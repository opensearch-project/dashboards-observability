// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Dashboard component renders dashboard 1`] = `
<Dashboard
  appConfigs={Array []}
  childBreadcrumbs={
    Array [
      Object {
        "href": "#/trace_analytics/home",
        "text": "Trace analytics",
      },
      Object {
        "href": "#/trace_analytics/home",
        "text": "Dashboard",
      },
    ]
  }
  chrome={
    Object {
      "addApplicationClass": [MockFunction],
      "docTitle": Object {
        "change": [MockFunction],
        "reset": [MockFunction],
      },
      "getApplicationClasses$": [MockFunction],
      "getBadge$": [MockFunction],
      "getBreadcrumbs$": [MockFunction],
      "getCustomNavLink$": [MockFunction],
      "getHeaderComponent": [MockFunction],
      "getHelpExtension$": [MockFunction],
      "getIsNavDrawerLocked$": [MockFunction],
      "getIsVisible$": [MockFunction],
      "logos": Object {
        "AnimatedMark": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_spinner_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_spinner_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_spinner_on_light.svg",
        },
        "Application": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_dashboards_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_dashboards_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_dashboards_on_light.svg",
        },
        "CenterMark": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_center_mark_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_center_mark_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_center_mark_on_light.svg",
        },
        "Mark": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_mark_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_mark_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_mark_on_light.svg",
        },
        "OpenSearch": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_on_light.svg",
        },
        "colorScheme": "light",
      },
      "navControls": Object {
        "getCenter$": [MockFunction],
        "getLeft$": [MockFunction],
        "getRight$": [MockFunction],
        "registerCenter": [MockFunction],
        "registerLeft": [MockFunction],
        "registerRight": [MockFunction],
      },
      "navLinks": Object {
        "enableForcedAppSwitcherNavigation": [MockFunction],
        "get": [MockFunction],
        "getAll": [MockFunction],
        "getForceAppSwitcherNavigation$": [MockFunction],
        "getNavLinks$": [MockFunction],
        "has": [MockFunction],
        "showOnly": [MockFunction],
        "update": [MockFunction],
      },
      "recentlyAccessed": Object {
        "add": [MockFunction],
        "get": [MockFunction],
        "get$": [MockFunction],
      },
      "removeApplicationClass": [MockFunction],
      "setAppTitle": [MockFunction],
      "setBadge": [MockFunction],
      "setBreadcrumbs": [MockFunction] {
        "calls": Array [
          Array [
            Array [
              undefined,
              Object {
                "href": "#/trace_analytics/home",
                "text": "Trace analytics",
              },
              Object {
                "href": "#/trace_analytics/home",
                "text": "Dashboard",
              },
            ],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
      "setCustomNavLink": [MockFunction],
      "setHelpExtension": [MockFunction],
      "setHelpSupportUrl": [MockFunction],
      "setIsVisible": [MockFunction],
    }
  }
  dataPrepperIndicesExist={true}
  dataSourceMDSId={
    Array [
      Object {
        "id": "",
        "label": "",
      },
    ]
  }
  endTime="now"
  filters={Array []}
  http={[MockFunction]}
  mode="data_prepper"
  modes={
    Array [
      Object {
        "id": "jaeger",
        "title": "Jaeger",
      },
      Object {
        "id": "data_prepper",
        "title": "Data Prepper",
      },
    ]
  }
  page="dashboard"
  parentBreadcrumbs={
    Array [
      Object {
        "href": "test#/",
        "text": "test",
      },
    ]
  }
  query=""
  setEndTime={[MockFunction]}
  setFilters={
    [MockFunction] {
      "calls": Array [
        Array [
          Array [],
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  setQuery={[MockFunction]}
  setStartTime={[MockFunction]}
  startTime="now-5m"
>
  <EuiTitle
    size="l"
  >
    <h2
      className="euiTitle euiTitle--large"
      style={
        Object {
          "fontWeight": 430,
        }
      }
    >
      Dashboard
    </h2>
  </EuiTitle>
  <DataSourcePicker
    modes={
      Array [
        Object {
          "id": "jaeger",
          "title": "Jaeger",
        },
        Object {
          "id": "data_prepper",
          "title": "Data Prepper",
        },
      ]
    }
    selectedMode="data_prepper"
  >
    <EuiPopover
      anchorClassName="eui-textTruncate"
      anchorPosition="downCenter"
      button={
        <EuiButtonEmpty
          className="dscIndexPattern__triggerButton"
          color="text"
          data-test-subj="indexPattern-switch-link"
          flush="left"
          iconSide="right"
          iconType="arrowDown"
          onClick={[Function]}
          title="data_prepper"
        >
          Data Prepper
        </EuiButtonEmpty>
      }
      className="eui-textTruncate"
      closePopover={[Function]}
      display="inlineBlock"
      hasArrow={true}
      isOpen={false}
      ownFocus={true}
      panelPaddingSize="s"
    >
      <div
        className="euiPopover euiPopover--anchorDownCenter eui-textTruncate"
      >
        <div
          className="euiPopover__anchor eui-textTruncate"
        >
          <EuiButtonEmpty
            className="dscIndexPattern__triggerButton"
            color="text"
            data-test-subj="indexPattern-switch-link"
            flush="left"
            iconSide="right"
            iconType="arrowDown"
            onClick={[Function]}
            title="data_prepper"
          >
            <button
              className="euiButtonEmpty euiButtonEmpty--text euiButtonEmpty--flushLeft dscIndexPattern__triggerButton"
              data-test-subj="indexPattern-switch-link"
              disabled={false}
              onClick={[Function]}
              title="data_prepper"
              type="button"
            >
              <EuiButtonContent
                className="euiButtonEmpty__content"
                iconSide="right"
                iconSize="m"
                iconType="arrowDown"
                textProps={
                  Object {
                    "className": "euiButtonEmpty__text",
                  }
                }
              >
                <span
                  className="euiButtonContent euiButtonContent--iconRight euiButtonEmpty__content"
                >
                  <EuiIcon
                    className="euiButtonContent__icon"
                    color="inherit"
                    size="m"
                    type="arrowDown"
                  >
                    <EuiIconArrowDown
                      aria-hidden={true}
                      className="euiIcon euiIcon--medium euiIcon--inherit euiButtonContent__icon"
                      focusable="false"
                      role="img"
                      style={null}
                    >
                      <svg
                        aria-hidden={true}
                        className="euiIcon euiIcon--medium euiIcon--inherit euiButtonContent__icon"
                        focusable="false"
                        height={16}
                        role="img"
                        style={null}
                        viewBox="0 0 16 16"
                        width={16}
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M13.069 5.157 8.384 9.768a.546.546 0 0 1-.768 0L2.93 5.158a.552.552 0 0 0-.771 0 .53.53 0 0 0 0 .759l4.684 4.61c.641.631 1.672.63 2.312 0l4.684-4.61a.53.53 0 0 0 0-.76.552.552 0 0 0-.771 0Z"
                          fillRule="non-zero"
                        />
                      </svg>
                    </EuiIconArrowDown>
                  </EuiIcon>
                  <span
                    className="euiButtonEmpty__text"
                  >
                    Data Prepper
                  </span>
                </span>
              </EuiButtonContent>
            </button>
          </EuiButtonEmpty>
        </div>
      </div>
    </EuiPopover>
  </DataSourcePicker>
  <DashboardContent
    appConfigs={Array []}
    childBreadcrumbs={
      Array [
        Object {
          "href": "#/trace_analytics/home",
          "text": "Trace analytics",
        },
        Object {
          "href": "#/trace_analytics/home",
          "text": "Dashboard",
        },
      ]
    }
    chrome={
      Object {
        "addApplicationClass": [MockFunction],
        "docTitle": Object {
          "change": [MockFunction],
          "reset": [MockFunction],
        },
        "getApplicationClasses$": [MockFunction],
        "getBadge$": [MockFunction],
        "getBreadcrumbs$": [MockFunction],
        "getCustomNavLink$": [MockFunction],
        "getHeaderComponent": [MockFunction],
        "getHelpExtension$": [MockFunction],
        "getIsNavDrawerLocked$": [MockFunction],
        "getIsVisible$": [MockFunction],
        "logos": Object {
          "AnimatedMark": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_spinner_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_spinner_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_spinner_on_light.svg",
          },
          "Application": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_dashboards_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_dashboards_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_dashboards_on_light.svg",
          },
          "CenterMark": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_center_mark_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_center_mark_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_center_mark_on_light.svg",
          },
          "Mark": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_mark_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_mark_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_mark_on_light.svg",
          },
          "OpenSearch": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_on_light.svg",
          },
          "colorScheme": "light",
        },
        "navControls": Object {
          "getCenter$": [MockFunction],
          "getLeft$": [MockFunction],
          "getRight$": [MockFunction],
          "registerCenter": [MockFunction],
          "registerLeft": [MockFunction],
          "registerRight": [MockFunction],
        },
        "navLinks": Object {
          "enableForcedAppSwitcherNavigation": [MockFunction],
          "get": [MockFunction],
          "getAll": [MockFunction],
          "getForceAppSwitcherNavigation$": [MockFunction],
          "getNavLinks$": [MockFunction],
          "has": [MockFunction],
          "showOnly": [MockFunction],
          "update": [MockFunction],
        },
        "recentlyAccessed": Object {
          "add": [MockFunction],
          "get": [MockFunction],
          "get$": [MockFunction],
        },
        "removeApplicationClass": [MockFunction],
        "setAppTitle": [MockFunction],
        "setBadge": [MockFunction],
        "setBreadcrumbs": [MockFunction] {
          "calls": Array [
            Array [
              Array [
                undefined,
                Object {
                  "href": "#/trace_analytics/home",
                  "text": "Trace analytics",
                },
                Object {
                  "href": "#/trace_analytics/home",
                  "text": "Dashboard",
                },
              ],
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        },
        "setCustomNavLink": [MockFunction],
        "setHelpExtension": [MockFunction],
        "setHelpSupportUrl": [MockFunction],
        "setIsVisible": [MockFunction],
      }
    }
    dataPrepperIndicesExist={true}
    dataSourceMDSId={
      Array [
        Object {
          "id": "",
          "label": "",
        },
      ]
    }
    endTime="now"
    filters={Array []}
    http={[MockFunction]}
    mode="data_prepper"
    modes={
      Array [
        Object {
          "id": "jaeger",
          "title": "Jaeger",
        },
        Object {
          "id": "data_prepper",
          "title": "Data Prepper",
        },
      ]
    }
    page="dashboard"
    parentBreadcrumbs={
      Array [
        Object {
          "href": "test#/",
          "text": "test",
        },
      ]
    }
    query=""
    setEndTime={[MockFunction]}
    setFilters={
      [MockFunction] {
        "calls": Array [
          Array [
            Array [],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    setQuery={[MockFunction]}
    setStartTime={[MockFunction]}
    startTime="now-5m"
  >
    <div>
      <DashboardTable
        addFilter={[Function]}
        addPercentileFilter={[Function]}
        filters={Array []}
        items={Array []}
        loading={true}
        page="dashboard"
        setRedirect={[Function]}
      >
        <EuiPanel>
          <div
            className="euiPanel euiPanel--paddingMedium euiPanel--borderRadiusMedium euiPanel--plain euiPanel--hasShadow"
          >
            <EuiFlexGroup
              alignItems="center"
              gutterSize="s"
            >
              <div
                className="euiFlexGroup euiFlexGroup--gutterSmall euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow euiFlexGroup--responsive"
              >
                <EuiFlexItem
                  grow={10}
                >
                  <div
                    className="euiFlexItem euiFlexItem--flexGrow10"
                  >
                    <PanelTitle
                      title="Latency by trace group"
                      totalItems={0}
                    >
                      <EuiText
                        size="m"
                      >
                        <div
                          className="euiText euiText--medium"
                        >
                          <span
                            className="panel-title"
                          >
                            Latency by trace group
                          </span>
                          <span
                            className="panel-title-count"
                          >
                             (0)
                          </span>
                        </div>
                      </EuiText>
                    </PanelTitle>
                  </div>
                </EuiFlexItem>
                <EuiFlexItem
                  grow={false}
                >
                  <div
                    className="euiFlexItem euiFlexItem--flexGrowZero"
                  >
                    <EuiLink
                      data-test-subj="dashboard-table-percentile-button-1"
                      onClick={[Function]}
                    >
                      <button
                        className="euiLink euiLink--primary"
                        data-test-subj="dashboard-table-percentile-button-1"
                        disabled={false}
                        onClick={[Function]}
                        type="button"
                      >
                        <EuiText
                          size="xs"
                        >
                          <div
                            className="euiText euiText--extraSmall"
                          >
                            <span
                              style={
                                Object {
                                  "color": "#957ac9",
                                }
                              }
                            >
                              □
                            </span>
                             &lt; 95 percentile
                          </div>
                        </EuiText>
                      </button>
                    </EuiLink>
                  </div>
                </EuiFlexItem>
                <EuiFlexItem
                  grow={1}
                >
                  <div
                    className="euiFlexItem euiFlexItem--flexGrow1"
                  />
                </EuiFlexItem>
                <EuiFlexItem
                  grow={false}
                >
                  <div
                    className="euiFlexItem euiFlexItem--flexGrowZero"
                  >
                    <EuiLink
                      data-test-subj="dashboard-table-percentile-button-2"
                      onClick={[Function]}
                    >
                      <button
                        className="euiLink euiLink--primary"
                        data-test-subj="dashboard-table-percentile-button-2"
                        disabled={false}
                        onClick={[Function]}
                        type="button"
                      >
                        <EuiText
                          size="xs"
                        >
                          <div
                            className="euiText euiText--extraSmall"
                          >
                            <span
                              style={
                                Object {
                                  "color": "#957ac9",
                                }
                              }
                            >
                              ■
                            </span>
                             &gt;= 95 percentile
                          </div>
                        </EuiText>
                      </button>
                    </EuiLink>
                  </div>
                </EuiFlexItem>
                <EuiFlexItem
                  grow={1}
                >
                  <div
                    className="euiFlexItem euiFlexItem--flexGrow1"
                  />
                </EuiFlexItem>
              </div>
            </EuiFlexGroup>
            <EuiSpacer
              size="m"
            >
              <div
                className="euiSpacer euiSpacer--m"
              />
            </EuiSpacer>
            <EuiHorizontalRule
              margin="none"
            >
              <hr
                className="euiHorizontalRule euiHorizontalRule--full"
              />
            </EuiHorizontalRule>
            <NoMatchMessage
              size="xl"
            >
              <EuiSpacer
                size="xl"
              >
                <div
                  className="euiSpacer euiSpacer--xl"
                />
              </EuiSpacer>
              <EuiEmptyPrompt
                body={
                  <EuiText>
                    No data matches the selected filter. Clear the filter and/or increase the time range to see more results.
                  </EuiText>
                }
                title={
                  <h2>
                    No matches
                  </h2>
                }
              >
                <div
                  className="euiEmptyPrompt"
                >
                  <EuiTitle
                    size="m"
                  >
                    <h2
                      className="euiTitle euiTitle--medium"
                    >
                      No matches
                    </h2>
                  </EuiTitle>
                  <EuiTextColor
                    color="subdued"
                  >
                    <span
                      className="euiTextColor euiTextColor--subdued"
                    >
                      <EuiSpacer
                        size="m"
                      >
                        <div
                          className="euiSpacer euiSpacer--m"
                        />
                      </EuiSpacer>
                      <EuiText>
                        <div
                          className="euiText euiText--medium"
                        >
                          <EuiText>
                            <div
                              className="euiText euiText--medium"
                            >
                              No data matches the selected filter. Clear the filter and/or increase the time range to see more results.
                            </div>
                          </EuiText>
                        </div>
                      </EuiText>
                    </span>
                  </EuiTextColor>
                </div>
              </EuiEmptyPrompt>
              <EuiSpacer
                size="xl"
              >
                <div
                  className="euiSpacer euiSpacer--xl"
                />
              </EuiSpacer>
            </NoMatchMessage>
          </div>
        </EuiPanel>
      </DashboardTable>
      <EuiSpacer>
        <div
          className="euiSpacer euiSpacer--l"
        />
      </EuiSpacer>
      <EuiFlexGroup
        alignItems="baseline"
      >
        <div
          className="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--alignItemsBaseline euiFlexGroup--directionRow euiFlexGroup--responsive"
        >
          <EuiFlexItem>
            <div
              className="euiFlexItem"
            >
              <EuiFlexGroup
                direction="row"
              >
                <div
                  className="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--directionRow euiFlexGroup--responsive"
                >
                  <EuiFlexItem>
                    <div
                      className="euiFlexItem"
                    >
                      <ErrorRatePlt
                        items={
                          Object {
                            "fixedInterval": "1h",
                            "items": Array [],
                          }
                        }
                        setEndTime={[MockFunction]}
                        setStartTime={[MockFunction]}
                      >
                        <EuiPanel
                          style={
                            Object {
                              "minHeight": 308,
                              "minWidth": 433,
                            }
                          }
                        >
                          <div
                            className="euiPanel euiPanel--paddingMedium euiPanel--borderRadiusMedium euiPanel--plain euiPanel--hasShadow"
                            style={
                              Object {
                                "minHeight": 308,
                                "minWidth": 433,
                              }
                            }
                          >
                            <EuiFlexGroup
                              gutterSize="xs"
                              justifyContent="spaceBetween"
                            >
                              <div
                                className="euiFlexGroup euiFlexGroup--gutterExtraSmall euiFlexGroup--justifyContentSpaceBetween euiFlexGroup--directionRow euiFlexGroup--responsive"
                              >
                                <PanelTitle
                                  title="Trace error rate over time"
                                >
                                  <EuiText
                                    size="m"
                                  >
                                    <div
                                      className="euiText euiText--medium"
                                    >
                                      <span
                                        className="panel-title"
                                      >
                                        Trace error rate over time
                                      </span>
                                    </div>
                                  </EuiText>
                                </PanelTitle>
                                <EuiButtonGroup
                                  buttonSize="s"
                                  color="text"
                                  onChange={[Function]}
                                >
                                  <fieldset
                                    className="euiButtonGroup euiButtonGroup--small euiButtonGroup--text"
                                    disabled={false}
                                  >
                                    <EuiScreenReaderOnly>
                                      <legend
                                        className="euiScreenReaderOnly"
                                      />
                                    </EuiScreenReaderOnly>
                                    <div
                                      className="euiButtonGroup__buttons"
                                    />
                                  </fieldset>
                                </EuiButtonGroup>
                              </div>
                            </EuiFlexGroup>
                            <EuiSpacer
                              size="m"
                            >
                              <div
                                className="euiSpacer euiSpacer--m"
                              />
                            </EuiSpacer>
                            <NoMatchMessage
                              size="s"
                            >
                              <EuiSpacer
                                size="s"
                              >
                                <div
                                  className="euiSpacer euiSpacer--s"
                                />
                              </EuiSpacer>
                              <EuiEmptyPrompt
                                body={
                                  <EuiText>
                                    No data matches the selected filter. Clear the filter and/or increase the time range to see more results.
                                  </EuiText>
                                }
                                title={
                                  <h2>
                                    No matches
                                  </h2>
                                }
                              >
                                <div
                                  className="euiEmptyPrompt"
                                >
                                  <EuiTitle
                                    size="m"
                                  >
                                    <h2
                                      className="euiTitle euiTitle--medium"
                                    >
                                      No matches
                                    </h2>
                                  </EuiTitle>
                                  <EuiTextColor
                                    color="subdued"
                                  >
                                    <span
                                      className="euiTextColor euiTextColor--subdued"
                                    >
                                      <EuiSpacer
                                        size="m"
                                      >
                                        <div
                                          className="euiSpacer euiSpacer--m"
                                        />
                                      </EuiSpacer>
                                      <EuiText>
                                        <div
                                          className="euiText euiText--medium"
                                        >
                                          <EuiText>
                                            <div
                                              className="euiText euiText--medium"
                                            >
                                              No data matches the selected filter. Clear the filter and/or increase the time range to see more results.
                                            </div>
                                          </EuiText>
                                        </div>
                                      </EuiText>
                                    </span>
                                  </EuiTextColor>
                                </div>
                              </EuiEmptyPrompt>
                              <EuiSpacer
                                size="s"
                              >
                                <div
                                  className="euiSpacer euiSpacer--s"
                                />
                              </EuiSpacer>
                            </NoMatchMessage>
                          </div>
                        </EuiPanel>
                      </ErrorRatePlt>
                    </div>
                  </EuiFlexItem>
                  <EuiFlexItem>
                    <div
                      className="euiFlexItem"
                    >
                      <ThroughputPlt
                        items={
                          Object {
                            "fixedInterval": "1h",
                            "items": Array [],
                          }
                        }
                        setEndTime={[MockFunction]}
                        setStartTime={[MockFunction]}
                      >
                        <EuiPanel
                          style={
                            Object {
                              "minHeight": 308,
                              "minWidth": 433,
                            }
                          }
                        >
                          <div
                            className="euiPanel euiPanel--paddingMedium euiPanel--borderRadiusMedium euiPanel--plain euiPanel--hasShadow"
                            style={
                              Object {
                                "minHeight": 308,
                                "minWidth": 433,
                              }
                            }
                          >
                            <EuiFlexGroup
                              gutterSize="xs"
                              justifyContent="spaceBetween"
                            >
                              <div
                                className="euiFlexGroup euiFlexGroup--gutterExtraSmall euiFlexGroup--justifyContentSpaceBetween euiFlexGroup--directionRow euiFlexGroup--responsive"
                              >
                                <PanelTitle
                                  title="Traces over time"
                                >
                                  <EuiText
                                    size="m"
                                  >
                                    <div
                                      className="euiText euiText--medium"
                                    >
                                      <span
                                        className="panel-title"
                                      >
                                        Traces over time
                                      </span>
                                    </div>
                                  </EuiText>
                                </PanelTitle>
                                <EuiButtonGroup
                                  buttonSize="s"
                                  color="text"
                                  onChange={[Function]}
                                >
                                  <fieldset
                                    className="euiButtonGroup euiButtonGroup--small euiButtonGroup--text"
                                    disabled={false}
                                  >
                                    <EuiScreenReaderOnly>
                                      <legend
                                        className="euiScreenReaderOnly"
                                      />
                                    </EuiScreenReaderOnly>
                                    <div
                                      className="euiButtonGroup__buttons"
                                    />
                                  </fieldset>
                                </EuiButtonGroup>
                              </div>
                            </EuiFlexGroup>
                            <EuiHorizontalRule
                              margin="m"
                            >
                              <hr
                                className="euiHorizontalRule euiHorizontalRule--full euiHorizontalRule--marginMedium"
                              />
                            </EuiHorizontalRule>
                            <NoMatchMessage
                              size="s"
                            >
                              <EuiSpacer
                                size="s"
                              >
                                <div
                                  className="euiSpacer euiSpacer--s"
                                />
                              </EuiSpacer>
                              <EuiEmptyPrompt
                                body={
                                  <EuiText>
                                    No data matches the selected filter. Clear the filter and/or increase the time range to see more results.
                                  </EuiText>
                                }
                                title={
                                  <h2>
                                    No matches
                                  </h2>
                                }
                              >
                                <div
                                  className="euiEmptyPrompt"
                                >
                                  <EuiTitle
                                    size="m"
                                  >
                                    <h2
                                      className="euiTitle euiTitle--medium"
                                    >
                                      No matches
                                    </h2>
                                  </EuiTitle>
                                  <EuiTextColor
                                    color="subdued"
                                  >
                                    <span
                                      className="euiTextColor euiTextColor--subdued"
                                    >
                                      <EuiSpacer
                                        size="m"
                                      >
                                        <div
                                          className="euiSpacer euiSpacer--m"
                                        />
                                      </EuiSpacer>
                                      <EuiText>
                                        <div
                                          className="euiText euiText--medium"
                                        >
                                          <EuiText>
                                            <div
                                              className="euiText euiText--medium"
                                            >
                                              No data matches the selected filter. Clear the filter and/or increase the time range to see more results.
                                            </div>
                                          </EuiText>
                                        </div>
                                      </EuiText>
                                    </span>
                                  </EuiTextColor>
                                </div>
                              </EuiEmptyPrompt>
                              <EuiSpacer
                                size="s"
                              >
                                <div
                                  className="euiSpacer euiSpacer--s"
                                />
                              </EuiSpacer>
                            </NoMatchMessage>
                          </div>
                        </EuiPanel>
                      </ThroughputPlt>
                    </div>
                  </EuiFlexItem>
                </div>
              </EuiFlexGroup>
            </div>
          </EuiFlexItem>
        </div>
      </EuiFlexGroup>
    </div>
  </DashboardContent>
</Dashboard>
`;

exports[`Dashboard component renders empty dashboard 1`] = `
<Dashboard
  appConfigs={Array []}
  childBreadcrumbs={
    Array [
      Object {
        "href": "#/trace_analytics/home",
        "text": "Trace analytics",
      },
      Object {
        "href": "#/trace_analytics/home",
        "text": "Dashboard",
      },
    ]
  }
  chrome={
    Object {
      "addApplicationClass": [MockFunction],
      "docTitle": Object {
        "change": [MockFunction],
        "reset": [MockFunction],
      },
      "getApplicationClasses$": [MockFunction],
      "getBadge$": [MockFunction],
      "getBreadcrumbs$": [MockFunction],
      "getCustomNavLink$": [MockFunction],
      "getHeaderComponent": [MockFunction],
      "getHelpExtension$": [MockFunction],
      "getIsNavDrawerLocked$": [MockFunction],
      "getIsVisible$": [MockFunction],
      "logos": Object {
        "AnimatedMark": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_spinner_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_spinner_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_spinner_on_light.svg",
        },
        "Application": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_dashboards_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_dashboards_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_dashboards_on_light.svg",
        },
        "CenterMark": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_center_mark_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_center_mark_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_center_mark_on_light.svg",
        },
        "Mark": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_mark_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_mark_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_mark_on_light.svg",
        },
        "OpenSearch": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_on_light.svg",
        },
        "colorScheme": "light",
      },
      "navControls": Object {
        "getCenter$": [MockFunction],
        "getLeft$": [MockFunction],
        "getRight$": [MockFunction],
        "registerCenter": [MockFunction],
        "registerLeft": [MockFunction],
        "registerRight": [MockFunction],
      },
      "navLinks": Object {
        "enableForcedAppSwitcherNavigation": [MockFunction],
        "get": [MockFunction],
        "getAll": [MockFunction],
        "getForceAppSwitcherNavigation$": [MockFunction],
        "getNavLinks$": [MockFunction],
        "has": [MockFunction],
        "showOnly": [MockFunction],
        "update": [MockFunction],
      },
      "recentlyAccessed": Object {
        "add": [MockFunction],
        "get": [MockFunction],
        "get$": [MockFunction],
      },
      "removeApplicationClass": [MockFunction],
      "setAppTitle": [MockFunction],
      "setBadge": [MockFunction],
      "setBreadcrumbs": [MockFunction] {
        "calls": Array [
          Array [
            Array [
              undefined,
              Object {
                "href": "#/trace_analytics/home",
                "text": "Trace analytics",
              },
              Object {
                "href": "#/trace_analytics/home",
                "text": "Dashboard",
              },
            ],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
      "setCustomNavLink": [MockFunction],
      "setHelpExtension": [MockFunction],
      "setHelpSupportUrl": [MockFunction],
      "setIsVisible": [MockFunction],
    }
  }
  dataPrepperIndicesExist={true}
  dataSourceMDSId={
    Array [
      Object {
        "id": "",
        "label": "",
      },
    ]
  }
  endTime="now"
  filters={Array []}
  http={[MockFunction]}
  mode="data_prepper"
  modes={
    Array [
      Object {
        "id": "jaeger",
        "title": "Jaeger",
      },
      Object {
        "id": "data_prepper",
        "title": "Data Prepper",
      },
    ]
  }
  page="dashboard"
  parentBreadcrumbs={
    Array [
      Object {
        "href": "test#/",
        "text": "test",
      },
    ]
  }
  query=""
  setEndTime={[MockFunction]}
  setFilters={
    [MockFunction] {
      "calls": Array [
        Array [
          Array [],
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  setQuery={[MockFunction]}
  setStartTime={[MockFunction]}
  startTime="now-5m"
>
  <EuiTitle
    size="l"
  >
    <h2
      className="euiTitle euiTitle--large"
      style={
        Object {
          "fontWeight": 430,
        }
      }
    >
      Dashboard
    </h2>
  </EuiTitle>
  <DataSourcePicker
    modes={
      Array [
        Object {
          "id": "jaeger",
          "title": "Jaeger",
        },
        Object {
          "id": "data_prepper",
          "title": "Data Prepper",
        },
      ]
    }
    selectedMode="data_prepper"
  >
    <EuiPopover
      anchorClassName="eui-textTruncate"
      anchorPosition="downCenter"
      button={
        <EuiButtonEmpty
          className="dscIndexPattern__triggerButton"
          color="text"
          data-test-subj="indexPattern-switch-link"
          flush="left"
          iconSide="right"
          iconType="arrowDown"
          onClick={[Function]}
          title="data_prepper"
        >
          Data Prepper
        </EuiButtonEmpty>
      }
      className="eui-textTruncate"
      closePopover={[Function]}
      display="inlineBlock"
      hasArrow={true}
      isOpen={false}
      ownFocus={true}
      panelPaddingSize="s"
    >
      <div
        className="euiPopover euiPopover--anchorDownCenter eui-textTruncate"
      >
        <div
          className="euiPopover__anchor eui-textTruncate"
        >
          <EuiButtonEmpty
            className="dscIndexPattern__triggerButton"
            color="text"
            data-test-subj="indexPattern-switch-link"
            flush="left"
            iconSide="right"
            iconType="arrowDown"
            onClick={[Function]}
            title="data_prepper"
          >
            <button
              className="euiButtonEmpty euiButtonEmpty--text euiButtonEmpty--flushLeft dscIndexPattern__triggerButton"
              data-test-subj="indexPattern-switch-link"
              disabled={false}
              onClick={[Function]}
              title="data_prepper"
              type="button"
            >
              <EuiButtonContent
                className="euiButtonEmpty__content"
                iconSide="right"
                iconSize="m"
                iconType="arrowDown"
                textProps={
                  Object {
                    "className": "euiButtonEmpty__text",
                  }
                }
              >
                <span
                  className="euiButtonContent euiButtonContent--iconRight euiButtonEmpty__content"
                >
                  <EuiIcon
                    className="euiButtonContent__icon"
                    color="inherit"
                    size="m"
                    type="arrowDown"
                  >
                    <EuiIconBeaker
                      aria-hidden={true}
                      className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonContent__icon"
                      focusable="false"
                      role="img"
                      style={null}
                    >
                      <svg
                        aria-hidden={true}
                        className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonContent__icon"
                        focusable="false"
                        height={16}
                        role="img"
                        style={null}
                        viewBox="0 0 16 16"
                        width={16}
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M5.277 10.088c.02.014.04.03.057.047.582.55 1.134.812 1.666.812.586 0 1.84-.293 3.713-.88L9 6.212V2H7v4.212l-1.723 3.876Zm-.438.987L3.539 14h8.922l-1.32-2.969C9.096 11.677 7.733 12 7 12c-.74 0-1.463-.315-2.161-.925ZM6 2H5V1h6v1h-1v4l3.375 7.594A1 1 0 0 1 12.461 15H3.54a1 1 0 0 1-.914-1.406L6 6V2Z"
                        />
                      </svg>
                    </EuiIconBeaker>
                  </EuiIcon>
                  <span
                    className="euiButtonEmpty__text"
                  >
                    Data Prepper
                  </span>
                </span>
              </EuiButtonContent>
            </button>
          </EuiButtonEmpty>
        </div>
      </div>
    </EuiPopover>
  </DataSourcePicker>
  <DashboardContent
    appConfigs={Array []}
    childBreadcrumbs={
      Array [
        Object {
          "href": "#/trace_analytics/home",
          "text": "Trace analytics",
        },
        Object {
          "href": "#/trace_analytics/home",
          "text": "Dashboard",
        },
      ]
    }
    chrome={
      Object {
        "addApplicationClass": [MockFunction],
        "docTitle": Object {
          "change": [MockFunction],
          "reset": [MockFunction],
        },
        "getApplicationClasses$": [MockFunction],
        "getBadge$": [MockFunction],
        "getBreadcrumbs$": [MockFunction],
        "getCustomNavLink$": [MockFunction],
        "getHeaderComponent": [MockFunction],
        "getHelpExtension$": [MockFunction],
        "getIsNavDrawerLocked$": [MockFunction],
        "getIsVisible$": [MockFunction],
        "logos": Object {
          "AnimatedMark": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_spinner_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_spinner_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_spinner_on_light.svg",
          },
          "Application": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_dashboards_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_dashboards_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_dashboards_on_light.svg",
          },
          "CenterMark": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_center_mark_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_center_mark_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_center_mark_on_light.svg",
          },
          "Mark": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_mark_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_mark_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_mark_on_light.svg",
          },
          "OpenSearch": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_on_light.svg",
          },
          "colorScheme": "light",
        },
        "navControls": Object {
          "getCenter$": [MockFunction],
          "getLeft$": [MockFunction],
          "getRight$": [MockFunction],
          "registerCenter": [MockFunction],
          "registerLeft": [MockFunction],
          "registerRight": [MockFunction],
        },
        "navLinks": Object {
          "enableForcedAppSwitcherNavigation": [MockFunction],
          "get": [MockFunction],
          "getAll": [MockFunction],
          "getForceAppSwitcherNavigation$": [MockFunction],
          "getNavLinks$": [MockFunction],
          "has": [MockFunction],
          "showOnly": [MockFunction],
          "update": [MockFunction],
        },
        "recentlyAccessed": Object {
          "add": [MockFunction],
          "get": [MockFunction],
          "get$": [MockFunction],
        },
        "removeApplicationClass": [MockFunction],
        "setAppTitle": [MockFunction],
        "setBadge": [MockFunction],
        "setBreadcrumbs": [MockFunction] {
          "calls": Array [
            Array [
              Array [
                undefined,
                Object {
                  "href": "#/trace_analytics/home",
                  "text": "Trace analytics",
                },
                Object {
                  "href": "#/trace_analytics/home",
                  "text": "Dashboard",
                },
              ],
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        },
        "setCustomNavLink": [MockFunction],
        "setHelpExtension": [MockFunction],
        "setHelpSupportUrl": [MockFunction],
        "setIsVisible": [MockFunction],
      }
    }
    dataPrepperIndicesExist={true}
    dataSourceMDSId={
      Array [
        Object {
          "id": "",
          "label": "",
        },
      ]
    }
    endTime="now"
    filters={Array []}
    http={[MockFunction]}
    mode="data_prepper"
    modes={
      Array [
        Object {
          "id": "jaeger",
          "title": "Jaeger",
        },
        Object {
          "id": "data_prepper",
          "title": "Data Prepper",
        },
      ]
    }
    page="dashboard"
    parentBreadcrumbs={
      Array [
        Object {
          "href": "test#/",
          "text": "test",
        },
      ]
    }
    query=""
    setEndTime={[MockFunction]}
    setFilters={
      [MockFunction] {
        "calls": Array [
          Array [
            Array [],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    setQuery={[MockFunction]}
    setStartTime={[MockFunction]}
    startTime="now-5m"
  >
    <div>
      <DashboardTable
        addFilter={[Function]}
        addPercentileFilter={[Function]}
        filters={Array []}
        items={Array []}
        loading={true}
        page="dashboard"
        setRedirect={[Function]}
      >
        <EuiPanel>
          <div
            className="euiPanel euiPanel--paddingMedium euiPanel--borderRadiusMedium euiPanel--plain euiPanel--hasShadow"
          >
            <EuiFlexGroup
              alignItems="center"
              gutterSize="s"
            >
              <div
                className="euiFlexGroup euiFlexGroup--gutterSmall euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow euiFlexGroup--responsive"
              >
                <EuiFlexItem
                  grow={10}
                >
                  <div
                    className="euiFlexItem euiFlexItem--flexGrow10"
                  >
                    <PanelTitle
                      title="Latency by trace group"
                      totalItems={0}
                    >
                      <EuiText
                        size="m"
                      >
                        <div
                          className="euiText euiText--medium"
                        >
                          <span
                            className="panel-title"
                          >
                            Latency by trace group
                          </span>
                          <span
                            className="panel-title-count"
                          >
                             (0)
                          </span>
                        </div>
                      </EuiText>
                    </PanelTitle>
                  </div>
                </EuiFlexItem>
                <EuiFlexItem
                  grow={false}
                >
                  <div
                    className="euiFlexItem euiFlexItem--flexGrowZero"
                  >
                    <EuiLink
                      data-test-subj="dashboard-table-percentile-button-1"
                      onClick={[Function]}
                    >
                      <button
                        className="euiLink euiLink--primary"
                        data-test-subj="dashboard-table-percentile-button-1"
                        disabled={false}
                        onClick={[Function]}
                        type="button"
                      >
                        <EuiText
                          size="xs"
                        >
                          <div
                            className="euiText euiText--extraSmall"
                          >
                            <span
                              style={
                                Object {
                                  "color": "#957ac9",
                                }
                              }
                            >
                              □
                            </span>
                             &lt; 95 percentile
                          </div>
                        </EuiText>
                      </button>
                    </EuiLink>
                  </div>
                </EuiFlexItem>
                <EuiFlexItem
                  grow={1}
                >
                  <div
                    className="euiFlexItem euiFlexItem--flexGrow1"
                  />
                </EuiFlexItem>
                <EuiFlexItem
                  grow={false}
                >
                  <div
                    className="euiFlexItem euiFlexItem--flexGrowZero"
                  >
                    <EuiLink
                      data-test-subj="dashboard-table-percentile-button-2"
                      onClick={[Function]}
                    >
                      <button
                        className="euiLink euiLink--primary"
                        data-test-subj="dashboard-table-percentile-button-2"
                        disabled={false}
                        onClick={[Function]}
                        type="button"
                      >
                        <EuiText
                          size="xs"
                        >
                          <div
                            className="euiText euiText--extraSmall"
                          >
                            <span
                              style={
                                Object {
                                  "color": "#957ac9",
                                }
                              }
                            >
                              ■
                            </span>
                             &gt;= 95 percentile
                          </div>
                        </EuiText>
                      </button>
                    </EuiLink>
                  </div>
                </EuiFlexItem>
                <EuiFlexItem
                  grow={1}
                >
                  <div
                    className="euiFlexItem euiFlexItem--flexGrow1"
                  />
                </EuiFlexItem>
              </div>
            </EuiFlexGroup>
            <EuiSpacer
              size="m"
            >
              <div
                className="euiSpacer euiSpacer--m"
              />
            </EuiSpacer>
            <EuiHorizontalRule
              margin="none"
            >
              <hr
                className="euiHorizontalRule euiHorizontalRule--full"
              />
            </EuiHorizontalRule>
            <NoMatchMessage
              size="xl"
            >
              <EuiSpacer
                size="xl"
              >
                <div
                  className="euiSpacer euiSpacer--xl"
                />
              </EuiSpacer>
              <EuiEmptyPrompt
                body={
                  <EuiText>
                    No data matches the selected filter. Clear the filter and/or increase the time range to see more results.
                  </EuiText>
                }
                title={
                  <h2>
                    No matches
                  </h2>
                }
              >
                <div
                  className="euiEmptyPrompt"
                >
                  <EuiTitle
                    size="m"
                  >
                    <h2
                      className="euiTitle euiTitle--medium"
                    >
                      No matches
                    </h2>
                  </EuiTitle>
                  <EuiTextColor
                    color="subdued"
                  >
                    <span
                      className="euiTextColor euiTextColor--subdued"
                    >
                      <EuiSpacer
                        size="m"
                      >
                        <div
                          className="euiSpacer euiSpacer--m"
                        />
                      </EuiSpacer>
                      <EuiText>
                        <div
                          className="euiText euiText--medium"
                        >
                          <EuiText>
                            <div
                              className="euiText euiText--medium"
                            >
                              No data matches the selected filter. Clear the filter and/or increase the time range to see more results.
                            </div>
                          </EuiText>
                        </div>
                      </EuiText>
                    </span>
                  </EuiTextColor>
                </div>
              </EuiEmptyPrompt>
              <EuiSpacer
                size="xl"
              >
                <div
                  className="euiSpacer euiSpacer--xl"
                />
              </EuiSpacer>
            </NoMatchMessage>
          </div>
        </EuiPanel>
      </DashboardTable>
      <EuiSpacer>
        <div
          className="euiSpacer euiSpacer--l"
        />
      </EuiSpacer>
      <EuiFlexGroup
        alignItems="baseline"
      >
        <div
          className="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--alignItemsBaseline euiFlexGroup--directionRow euiFlexGroup--responsive"
        >
          <EuiFlexItem>
            <div
              className="euiFlexItem"
            >
              <EuiFlexGroup
                direction="row"
              >
                <div
                  className="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--directionRow euiFlexGroup--responsive"
                >
                  <EuiFlexItem>
                    <div
                      className="euiFlexItem"
                    >
                      <ErrorRatePlt
                        items={
                          Object {
                            "fixedInterval": "1h",
                            "items": Array [],
                          }
                        }
                        setEndTime={[MockFunction]}
                        setStartTime={[MockFunction]}
                      >
                        <EuiPanel
                          style={
                            Object {
                              "minHeight": 308,
                              "minWidth": 433,
                            }
                          }
                        >
                          <div
                            className="euiPanel euiPanel--paddingMedium euiPanel--borderRadiusMedium euiPanel--plain euiPanel--hasShadow"
                            style={
                              Object {
                                "minHeight": 308,
                                "minWidth": 433,
                              }
                            }
                          >
                            <EuiFlexGroup
                              gutterSize="xs"
                              justifyContent="spaceBetween"
                            >
                              <div
                                className="euiFlexGroup euiFlexGroup--gutterExtraSmall euiFlexGroup--justifyContentSpaceBetween euiFlexGroup--directionRow euiFlexGroup--responsive"
                              >
                                <PanelTitle
                                  title="Trace error rate over time"
                                >
                                  <EuiText
                                    size="m"
                                  >
                                    <div
                                      className="euiText euiText--medium"
                                    >
                                      <span
                                        className="panel-title"
                                      >
                                        Trace error rate over time
                                      </span>
                                    </div>
                                  </EuiText>
                                </PanelTitle>
                                <EuiButtonGroup
                                  buttonSize="s"
                                  color="text"
                                  onChange={[Function]}
                                >
                                  <fieldset
                                    className="euiButtonGroup euiButtonGroup--small euiButtonGroup--text"
                                    disabled={false}
                                  >
                                    <EuiScreenReaderOnly>
                                      <legend
                                        className="euiScreenReaderOnly"
                                      />
                                    </EuiScreenReaderOnly>
                                    <div
                                      className="euiButtonGroup__buttons"
                                    />
                                  </fieldset>
                                </EuiButtonGroup>
                              </div>
                            </EuiFlexGroup>
                            <EuiSpacer
                              size="m"
                            >
                              <div
                                className="euiSpacer euiSpacer--m"
                              />
                            </EuiSpacer>
                            <NoMatchMessage
                              size="s"
                            >
                              <EuiSpacer
                                size="s"
                              >
                                <div
                                  className="euiSpacer euiSpacer--s"
                                />
                              </EuiSpacer>
                              <EuiEmptyPrompt
                                body={
                                  <EuiText>
                                    No data matches the selected filter. Clear the filter and/or increase the time range to see more results.
                                  </EuiText>
                                }
                                title={
                                  <h2>
                                    No matches
                                  </h2>
                                }
                              >
                                <div
                                  className="euiEmptyPrompt"
                                >
                                  <EuiTitle
                                    size="m"
                                  >
                                    <h2
                                      className="euiTitle euiTitle--medium"
                                    >
                                      No matches
                                    </h2>
                                  </EuiTitle>
                                  <EuiTextColor
                                    color="subdued"
                                  >
                                    <span
                                      className="euiTextColor euiTextColor--subdued"
                                    >
                                      <EuiSpacer
                                        size="m"
                                      >
                                        <div
                                          className="euiSpacer euiSpacer--m"
                                        />
                                      </EuiSpacer>
                                      <EuiText>
                                        <div
                                          className="euiText euiText--medium"
                                        >
                                          <EuiText>
                                            <div
                                              className="euiText euiText--medium"
                                            >
                                              No data matches the selected filter. Clear the filter and/or increase the time range to see more results.
                                            </div>
                                          </EuiText>
                                        </div>
                                      </EuiText>
                                    </span>
                                  </EuiTextColor>
                                </div>
                              </EuiEmptyPrompt>
                              <EuiSpacer
                                size="s"
                              >
                                <div
                                  className="euiSpacer euiSpacer--s"
                                />
                              </EuiSpacer>
                            </NoMatchMessage>
                          </div>
                        </EuiPanel>
                      </ErrorRatePlt>
                    </div>
                  </EuiFlexItem>
                  <EuiFlexItem>
                    <div
                      className="euiFlexItem"
                    >
                      <ThroughputPlt
                        items={
                          Object {
                            "fixedInterval": "1h",
                            "items": Array [],
                          }
                        }
                        setEndTime={[MockFunction]}
                        setStartTime={[MockFunction]}
                      >
                        <EuiPanel
                          style={
                            Object {
                              "minHeight": 308,
                              "minWidth": 433,
                            }
                          }
                        >
                          <div
                            className="euiPanel euiPanel--paddingMedium euiPanel--borderRadiusMedium euiPanel--plain euiPanel--hasShadow"
                            style={
                              Object {
                                "minHeight": 308,
                                "minWidth": 433,
                              }
                            }
                          >
                            <EuiFlexGroup
                              gutterSize="xs"
                              justifyContent="spaceBetween"
                            >
                              <div
                                className="euiFlexGroup euiFlexGroup--gutterExtraSmall euiFlexGroup--justifyContentSpaceBetween euiFlexGroup--directionRow euiFlexGroup--responsive"
                              >
                                <PanelTitle
                                  title="Traces over time"
                                >
                                  <EuiText
                                    size="m"
                                  >
                                    <div
                                      className="euiText euiText--medium"
                                    >
                                      <span
                                        className="panel-title"
                                      >
                                        Traces over time
                                      </span>
                                    </div>
                                  </EuiText>
                                </PanelTitle>
                                <EuiButtonGroup
                                  buttonSize="s"
                                  color="text"
                                  onChange={[Function]}
                                >
                                  <fieldset
                                    className="euiButtonGroup euiButtonGroup--small euiButtonGroup--text"
                                    disabled={false}
                                  >
                                    <EuiScreenReaderOnly>
                                      <legend
                                        className="euiScreenReaderOnly"
                                      />
                                    </EuiScreenReaderOnly>
                                    <div
                                      className="euiButtonGroup__buttons"
                                    />
                                  </fieldset>
                                </EuiButtonGroup>
                              </div>
                            </EuiFlexGroup>
                            <EuiHorizontalRule
                              margin="m"
                            >
                              <hr
                                className="euiHorizontalRule euiHorizontalRule--full euiHorizontalRule--marginMedium"
                              />
                            </EuiHorizontalRule>
                            <NoMatchMessage
                              size="s"
                            >
                              <EuiSpacer
                                size="s"
                              >
                                <div
                                  className="euiSpacer euiSpacer--s"
                                />
                              </EuiSpacer>
                              <EuiEmptyPrompt
                                body={
                                  <EuiText>
                                    No data matches the selected filter. Clear the filter and/or increase the time range to see more results.
                                  </EuiText>
                                }
                                title={
                                  <h2>
                                    No matches
                                  </h2>
                                }
                              >
                                <div
                                  className="euiEmptyPrompt"
                                >
                                  <EuiTitle
                                    size="m"
                                  >
                                    <h2
                                      className="euiTitle euiTitle--medium"
                                    >
                                      No matches
                                    </h2>
                                  </EuiTitle>
                                  <EuiTextColor
                                    color="subdued"
                                  >
                                    <span
                                      className="euiTextColor euiTextColor--subdued"
                                    >
                                      <EuiSpacer
                                        size="m"
                                      >
                                        <div
                                          className="euiSpacer euiSpacer--m"
                                        />
                                      </EuiSpacer>
                                      <EuiText>
                                        <div
                                          className="euiText euiText--medium"
                                        >
                                          <EuiText>
                                            <div
                                              className="euiText euiText--medium"
                                            >
                                              No data matches the selected filter. Clear the filter and/or increase the time range to see more results.
                                            </div>
                                          </EuiText>
                                        </div>
                                      </EuiText>
                                    </span>
                                  </EuiTextColor>
                                </div>
                              </EuiEmptyPrompt>
                              <EuiSpacer
                                size="s"
                              >
                                <div
                                  className="euiSpacer euiSpacer--s"
                                />
                              </EuiSpacer>
                            </NoMatchMessage>
                          </div>
                        </EuiPanel>
                      </ThroughputPlt>
                    </div>
                  </EuiFlexItem>
                </div>
              </EuiFlexGroup>
            </div>
          </EuiFlexItem>
        </div>
      </EuiFlexGroup>
    </div>
  </DashboardContent>
</Dashboard>
`;

exports[`Dashboard component renders empty jaeger dashboard 1`] = `
<Dashboard
  appConfigs={Array []}
  childBreadcrumbs={
    Array [
      Object {
        "href": "#/trace_analytics/home",
        "text": "Trace analytics",
      },
      Object {
        "href": "#/trace_analytics/home",
        "text": "Dashboard",
      },
    ]
  }
  chrome={
    Object {
      "addApplicationClass": [MockFunction],
      "docTitle": Object {
        "change": [MockFunction],
        "reset": [MockFunction],
      },
      "getApplicationClasses$": [MockFunction],
      "getBadge$": [MockFunction],
      "getBreadcrumbs$": [MockFunction],
      "getCustomNavLink$": [MockFunction],
      "getHeaderComponent": [MockFunction],
      "getHelpExtension$": [MockFunction],
      "getIsNavDrawerLocked$": [MockFunction],
      "getIsVisible$": [MockFunction],
      "logos": Object {
        "AnimatedMark": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_spinner_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_spinner_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_spinner_on_light.svg",
        },
        "Application": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_dashboards_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_dashboards_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_dashboards_on_light.svg",
        },
        "CenterMark": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_center_mark_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_center_mark_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_center_mark_on_light.svg",
        },
        "Mark": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_mark_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_mark_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_mark_on_light.svg",
        },
        "OpenSearch": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_on_light.svg",
        },
        "colorScheme": "light",
      },
      "navControls": Object {
        "getCenter$": [MockFunction],
        "getLeft$": [MockFunction],
        "getRight$": [MockFunction],
        "registerCenter": [MockFunction],
        "registerLeft": [MockFunction],
        "registerRight": [MockFunction],
      },
      "navLinks": Object {
        "enableForcedAppSwitcherNavigation": [MockFunction],
        "get": [MockFunction],
        "getAll": [MockFunction],
        "getForceAppSwitcherNavigation$": [MockFunction],
        "getNavLinks$": [MockFunction],
        "has": [MockFunction],
        "showOnly": [MockFunction],
        "update": [MockFunction],
      },
      "recentlyAccessed": Object {
        "add": [MockFunction],
        "get": [MockFunction],
        "get$": [MockFunction],
      },
      "removeApplicationClass": [MockFunction],
      "setAppTitle": [MockFunction],
      "setBadge": [MockFunction],
      "setBreadcrumbs": [MockFunction] {
        "calls": Array [
          Array [
            Array [
              undefined,
              Object {
                "href": "#/trace_analytics/home",
                "text": "Trace analytics",
              },
              Object {
                "href": "#/trace_analytics/home",
                "text": "Dashboard",
              },
            ],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
      "setCustomNavLink": [MockFunction],
      "setHelpExtension": [MockFunction],
      "setHelpSupportUrl": [MockFunction],
      "setIsVisible": [MockFunction],
    }
  }
  dataPrepperIndicesExist={false}
  dataSourceMDSId={
    Array [
      Object {
        "id": "",
        "label": "",
      },
    ]
  }
  endTime="now"
  filters={Array []}
  http={[MockFunction]}
  jaegerIndicesExist={true}
  mode="jaeger"
  modes={
    Array [
      Object {
        "id": "jaeger",
        "title": "Jaeger",
      },
      Object {
        "id": "data_prepper",
        "title": "Data Prepper",
      },
    ]
  }
  page="dashboard"
  parentBreadcrumbs={
    Array [
      Object {
        "href": "test#/",
        "text": "test",
      },
    ]
  }
  query=""
  setEndTime={[MockFunction]}
  setFilters={
    [MockFunction] {
      "calls": Array [
        Array [
          Array [],
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  setQuery={[MockFunction]}
  setStartTime={[MockFunction]}
  startTime="now-5m"
>
  <EuiTitle
    size="l"
  >
    <h2
      className="euiTitle euiTitle--large"
      style={
        Object {
          "fontWeight": 430,
        }
      }
    >
      Dashboard
    </h2>
  </EuiTitle>
  <DataSourcePicker
    modes={
      Array [
        Object {
          "id": "jaeger",
          "title": "Jaeger",
        },
        Object {
          "id": "data_prepper",
          "title": "Data Prepper",
        },
      ]
    }
    selectedMode="jaeger"
  >
    <EuiPopover
      anchorClassName="eui-textTruncate"
      anchorPosition="downCenter"
      button={
        <EuiButtonEmpty
          className="dscIndexPattern__triggerButton"
          color="text"
          data-test-subj="indexPattern-switch-link"
          flush="left"
          iconSide="right"
          iconType="arrowDown"
          onClick={[Function]}
          title="jaeger"
        >
          Jaeger
        </EuiButtonEmpty>
      }
      className="eui-textTruncate"
      closePopover={[Function]}
      display="inlineBlock"
      hasArrow={true}
      isOpen={false}
      ownFocus={true}
      panelPaddingSize="s"
    >
      <div
        className="euiPopover euiPopover--anchorDownCenter eui-textTruncate"
      >
        <div
          className="euiPopover__anchor eui-textTruncate"
        >
          <EuiButtonEmpty
            className="dscIndexPattern__triggerButton"
            color="text"
            data-test-subj="indexPattern-switch-link"
            flush="left"
            iconSide="right"
            iconType="arrowDown"
            onClick={[Function]}
            title="jaeger"
          >
            <button
              className="euiButtonEmpty euiButtonEmpty--text euiButtonEmpty--flushLeft dscIndexPattern__triggerButton"
              data-test-subj="indexPattern-switch-link"
              disabled={false}
              onClick={[Function]}
              title="jaeger"
              type="button"
            >
              <EuiButtonContent
                className="euiButtonEmpty__content"
                iconSide="right"
                iconSize="m"
                iconType="arrowDown"
                textProps={
                  Object {
                    "className": "euiButtonEmpty__text",
                  }
                }
              >
                <span
                  className="euiButtonContent euiButtonContent--iconRight euiButtonEmpty__content"
                >
                  <EuiIcon
                    className="euiButtonContent__icon"
                    color="inherit"
                    size="m"
                    type="arrowDown"
                  >
                    <EuiIconArrowDown
                      aria-hidden={true}
                      className="euiIcon euiIcon--medium euiIcon--inherit euiButtonContent__icon"
                      focusable="false"
                      role="img"
                      style={null}
                    >
                      <svg
                        aria-hidden={true}
                        className="euiIcon euiIcon--medium euiIcon--inherit euiButtonContent__icon"
                        focusable="false"
                        height={16}
                        role="img"
                        style={null}
                        viewBox="0 0 16 16"
                        width={16}
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M13.069 5.157 8.384 9.768a.546.546 0 0 1-.768 0L2.93 5.158a.552.552 0 0 0-.771 0 .53.53 0 0 0 0 .759l4.684 4.61c.641.631 1.672.63 2.312 0l4.684-4.61a.53.53 0 0 0 0-.76.552.552 0 0 0-.771 0Z"
                          fillRule="non-zero"
                        />
                      </svg>
                    </EuiIconArrowDown>
                  </EuiIcon>
                  <span
                    className="euiButtonEmpty__text"
                  >
                    Jaeger
                  </span>
                </span>
              </EuiButtonContent>
            </button>
          </EuiButtonEmpty>
        </div>
      </div>
    </EuiPopover>
  </DataSourcePicker>
  <DashboardContent
    appConfigs={Array []}
    childBreadcrumbs={
      Array [
        Object {
          "href": "#/trace_analytics/home",
          "text": "Trace analytics",
        },
        Object {
          "href": "#/trace_analytics/home",
          "text": "Dashboard",
        },
      ]
    }
    chrome={
      Object {
        "addApplicationClass": [MockFunction],
        "docTitle": Object {
          "change": [MockFunction],
          "reset": [MockFunction],
        },
        "getApplicationClasses$": [MockFunction],
        "getBadge$": [MockFunction],
        "getBreadcrumbs$": [MockFunction],
        "getCustomNavLink$": [MockFunction],
        "getHeaderComponent": [MockFunction],
        "getHelpExtension$": [MockFunction],
        "getIsNavDrawerLocked$": [MockFunction],
        "getIsVisible$": [MockFunction],
        "logos": Object {
          "AnimatedMark": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_spinner_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_spinner_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_spinner_on_light.svg",
          },
          "Application": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_dashboards_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_dashboards_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_dashboards_on_light.svg",
          },
          "CenterMark": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_center_mark_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_center_mark_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_center_mark_on_light.svg",
          },
          "Mark": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_mark_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_mark_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_mark_on_light.svg",
          },
          "OpenSearch": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_on_light.svg",
          },
          "colorScheme": "light",
        },
        "navControls": Object {
          "getCenter$": [MockFunction],
          "getLeft$": [MockFunction],
          "getRight$": [MockFunction],
          "registerCenter": [MockFunction],
          "registerLeft": [MockFunction],
          "registerRight": [MockFunction],
        },
        "navLinks": Object {
          "enableForcedAppSwitcherNavigation": [MockFunction],
          "get": [MockFunction],
          "getAll": [MockFunction],
          "getForceAppSwitcherNavigation$": [MockFunction],
          "getNavLinks$": [MockFunction],
          "has": [MockFunction],
          "showOnly": [MockFunction],
          "update": [MockFunction],
        },
        "recentlyAccessed": Object {
          "add": [MockFunction],
          "get": [MockFunction],
          "get$": [MockFunction],
        },
        "removeApplicationClass": [MockFunction],
        "setAppTitle": [MockFunction],
        "setBadge": [MockFunction],
        "setBreadcrumbs": [MockFunction] {
          "calls": Array [
            Array [
              Array [
                undefined,
                Object {
                  "href": "#/trace_analytics/home",
                  "text": "Trace analytics",
                },
                Object {
                  "href": "#/trace_analytics/home",
                  "text": "Dashboard",
                },
              ],
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        },
        "setCustomNavLink": [MockFunction],
        "setHelpExtension": [MockFunction],
        "setHelpSupportUrl": [MockFunction],
        "setIsVisible": [MockFunction],
      }
    }
    dataPrepperIndicesExist={false}
    dataSourceMDSId={
      Array [
        Object {
          "id": "",
          "label": "",
        },
      ]
    }
    endTime="now"
    filters={Array []}
    http={[MockFunction]}
    jaegerIndicesExist={true}
    mode="jaeger"
    modes={
      Array [
        Object {
          "id": "jaeger",
          "title": "Jaeger",
        },
        Object {
          "id": "data_prepper",
          "title": "Data Prepper",
        },
      ]
    }
    page="dashboard"
    parentBreadcrumbs={
      Array [
        Object {
          "href": "test#/",
          "text": "test",
        },
      ]
    }
    query=""
    setEndTime={[MockFunction]}
    setFilters={
      [MockFunction] {
        "calls": Array [
          Array [
            Array [],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    setQuery={[MockFunction]}
    setStartTime={[MockFunction]}
    startTime="now-5m"
  >
    <div>
      <TopGroupsPage
        addFilter={[Function]}
        addFilters={[Function]}
        addPercentileFilter={[Function]}
        filters={Array []}
        jaegerErrorRatePltItems={
          Object {
            "fixedInterval": "1h",
            "items": Array [],
          }
        }
        jaegerErrorTableItems={Array []}
        jaegerTableItems={Array []}
        loading={true}
        page="dashboard"
        setEndTime={[MockFunction]}
        setRedirect={[Function]}
        setStartTime={[MockFunction]}
        throughPutItems={
          Object {
            "fixedInterval": "1h",
            "items": Array [],
          }
        }
      >
        <EuiSpacer
          size="m"
        >
          <div
            className="euiSpacer euiSpacer--m"
          />
        </EuiSpacer>
        <ErrorRatePlt
          idSelected="error_rate"
          items={
            Object {
              "fixedInterval": "1h",
              "items": Array [],
            }
          }
          setEndTime={[MockFunction]}
          setIdSelected={[Function]}
          setStartTime={[MockFunction]}
          toggleButtons={
            Array [
              Object {
                "data-test-subj": "errors-toggle",
                "id": "error_rate",
                "label": "Errors",
              },
              Object {
                "data-test-subj": "throughput-toggle",
                "id": "throughput",
                "label": "Request rate",
              },
            ]
          }
        >
          <EuiPanel
            style={
              Object {
                "minHeight": 308,
                "minWidth": 433,
              }
            }
          >
            <div
              className="euiPanel euiPanel--paddingMedium euiPanel--borderRadiusMedium euiPanel--plain euiPanel--hasShadow"
              style={
                Object {
                  "minHeight": 308,
                  "minWidth": 433,
                }
              }
            >
              <EuiFlexGroup
                gutterSize="xs"
                justifyContent="spaceBetween"
              >
                <div
                  className="euiFlexGroup euiFlexGroup--gutterExtraSmall euiFlexGroup--justifyContentSpaceBetween euiFlexGroup--directionRow euiFlexGroup--responsive"
                >
                  <PanelTitle
                    title="Trace error rate over time"
                  >
                    <EuiText
                      size="m"
                    >
                      <div
                        className="euiText euiText--medium"
                      >
                        <span
                          className="panel-title"
                        >
                          Trace error rate over time
                        </span>
                      </div>
                    </EuiText>
                  </PanelTitle>
                  <EuiButtonGroup
                    buttonSize="s"
                    color="text"
                    idSelected="error_rate"
                    onChange={[Function]}
                    options={
                      Array [
                        Object {
                          "data-test-subj": "errors-toggle",
                          "id": "error_rate",
                          "label": "Errors",
                        },
                        Object {
                          "data-test-subj": "throughput-toggle",
                          "id": "throughput",
                          "label": "Request rate",
                        },
                      ]
                    }
                  >
                    <fieldset
                      className="euiButtonGroup euiButtonGroup--small euiButtonGroup--text"
                      disabled={false}
                    >
                      <EuiScreenReaderOnly>
                        <legend
                          className="euiScreenReaderOnly"
                        />
                      </EuiScreenReaderOnly>
                      <div
                        className="euiButtonGroup__buttons"
                      >
                        <EuiButtonGroupButton
                          color="text"
                          data-test-subj="errors-toggle"
                          element="label"
                          id="error_rate"
                          isDisabled={false}
                          isIconOnly={false}
                          isSelected={true}
                          key="0"
                          label="Errors"
                          name="random_html_id"
                          onChange={[Function]}
                          size="s"
                        >
                          <EuiButtonDisplay
                            baseClassName="euiButtonGroupButton"
                            className="euiButtonGroupButton-isSelected"
                            color="text"
                            data-test-subj="errors-toggle"
                            element="label"
                            fill={true}
                            htmlFor="random_html_id"
                            isDisabled={false}
                            onClick={[Function]}
                            size="s"
                            textProps={
                              Object {
                                "className": "euiButtonGroupButton__textShift",
                                "data-text": "Errors",
                                "ref": [Function],
                                "title": "Errors",
                              }
                            }
                          >
                            <label
                              className="euiButtonGroupButton euiButtonGroupButton--text euiButtonGroupButton--small euiButtonGroupButton--fill euiButtonGroupButton-isSelected"
                              data-test-subj="errors-toggle"
                              disabled={false}
                              htmlFor="random_html_id"
                              onClick={[Function]}
                              style={
                                Object {
                                  "minWidth": undefined,
                                }
                              }
                            >
                              <EuiButtonContent
                                className="euiButton__content"
                                iconSide="left"
                                textProps={
                                  Object {
                                    "className": "euiButton__text euiButtonGroupButton__textShift",
                                    "data-text": "Errors",
                                    "ref": [Function],
                                    "title": "Errors",
                                  }
                                }
                              >
                                <span
                                  className="euiButtonContent euiButton__content"
                                >
                                  <span
                                    className="euiButton__text euiButtonGroupButton__textShift"
                                    data-text="Errors"
                                    title="Errors"
                                  >
                                    <input
                                      checked={true}
                                      className="euiScreenReaderOnly"
                                      data-test-subj="error_rate"
                                      disabled={false}
                                      id="random_html_id"
                                      name="random_html_id"
                                      onChange={[Function]}
                                      type="radio"
                                    />
                                    Errors
                                  </span>
                                </span>
                              </EuiButtonContent>
                            </label>
                          </EuiButtonDisplay>
                        </EuiButtonGroupButton>
                        <EuiButtonGroupButton
                          color="text"
                          data-test-subj="throughput-toggle"
                          element="label"
                          id="throughput"
                          isDisabled={false}
                          isIconOnly={false}
                          isSelected={false}
                          key="1"
                          label="Request rate"
                          name="random_html_id"
                          onChange={[Function]}
                          size="s"
                        >
                          <EuiButtonDisplay
                            baseClassName="euiButtonGroupButton"
                            className=""
                            color="text"
                            data-test-subj="throughput-toggle"
                            element="label"
                            fill={false}
                            htmlFor="random_html_id"
                            isDisabled={false}
                            onClick={[Function]}
                            size="s"
                            textProps={
                              Object {
                                "className": "euiButtonGroupButton__textShift",
                                "data-text": "Request rate",
                                "ref": [Function],
                                "title": "Request rate",
                              }
                            }
                          >
                            <label
                              className="euiButtonGroupButton euiButtonGroupButton--text euiButtonGroupButton--small"
                              data-test-subj="throughput-toggle"
                              disabled={false}
                              htmlFor="random_html_id"
                              onClick={[Function]}
                              style={
                                Object {
                                  "minWidth": undefined,
                                }
                              }
                            >
                              <EuiButtonContent
                                className="euiButton__content"
                                iconSide="left"
                                textProps={
                                  Object {
                                    "className": "euiButton__text euiButtonGroupButton__textShift",
                                    "data-text": "Request rate",
                                    "ref": [Function],
                                    "title": "Request rate",
                                  }
                                }
                              >
                                <span
                                  className="euiButtonContent euiButton__content"
                                >
                                  <span
                                    className="euiButton__text euiButtonGroupButton__textShift"
                                    data-text="Request rate"
                                    title="Request rate"
                                  >
                                    <input
                                      checked={false}
                                      className="euiScreenReaderOnly"
                                      data-test-subj="throughput"
                                      disabled={false}
                                      id="random_html_id"
                                      name="random_html_id"
                                      onChange={[Function]}
                                      type="radio"
                                    />
                                    Request rate
                                  </span>
                                </span>
                              </EuiButtonContent>
                            </label>
                          </EuiButtonDisplay>
                        </EuiButtonGroupButton>
                      </div>
                    </fieldset>
                  </EuiButtonGroup>
                </div>
              </EuiFlexGroup>
              <EuiSpacer
                size="m"
              >
                <div
                  className="euiSpacer euiSpacer--m"
                />
              </EuiSpacer>
              <NoMatchMessage
                size="s"
              >
                <EuiSpacer
                  size="s"
                >
                  <div
                    className="euiSpacer euiSpacer--s"
                  />
                </EuiSpacer>
                <EuiEmptyPrompt
                  body={
                    <EuiText>
                      No data matches the selected filter. Clear the filter and/or increase the time range to see more results.
                    </EuiText>
                  }
                  title={
                    <h2>
                      No matches
                    </h2>
                  }
                >
                  <div
                    className="euiEmptyPrompt"
                  >
                    <EuiTitle
                      size="m"
                    >
                      <h2
                        className="euiTitle euiTitle--medium"
                      >
                        No matches
                      </h2>
                    </EuiTitle>
                    <EuiTextColor
                      color="subdued"
                    >
                      <span
                        className="euiTextColor euiTextColor--subdued"
                      >
                        <EuiSpacer
                          size="m"
                        >
                          <div
                            className="euiSpacer euiSpacer--m"
                          />
                        </EuiSpacer>
                        <EuiText>
                          <div
                            className="euiText euiText--medium"
                          >
                            <EuiText>
                              <div
                                className="euiText euiText--medium"
                              >
                                No data matches the selected filter. Clear the filter and/or increase the time range to see more results.
                              </div>
                            </EuiText>
                          </div>
                        </EuiText>
                      </span>
                    </EuiTextColor>
                  </div>
                </EuiEmptyPrompt>
                <EuiSpacer
                  size="s"
                >
                  <div
                    className="euiSpacer euiSpacer--s"
                  />
                </EuiSpacer>
              </NoMatchMessage>
            </div>
          </EuiPanel>
        </ErrorRatePlt>
        <ErrorRatesTable
          addFilter={[Function]}
          addFilters={[Function]}
          addPercentileFilter={[Function]}
          filters={Array []}
          items={Array []}
          jaegerErrorRatePltItems={
            Object {
              "fixedInterval": "1h",
              "items": Array [],
            }
          }
          jaegerErrorTableItems={Array []}
          jaegerTableItems={Array []}
          loading={true}
          page="dashboard"
          setEndTime={[MockFunction]}
          setRedirect={[Function]}
          setStartTime={[MockFunction]}
          throughPutItems={
            Object {
              "fixedInterval": "1h",
              "items": Array [],
            }
          }
          title="Top 5 Service and Operation Errors"
        >
          <EuiPanel>
            <div
              className="euiPanel euiPanel--paddingMedium euiPanel--borderRadiusMedium euiPanel--plain euiPanel--hasShadow"
            >
              <EuiFlexGroup
                alignItems="center"
                gutterSize="s"
              >
                <div
                  className="euiFlexGroup euiFlexGroup--gutterSmall euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow euiFlexGroup--responsive"
                >
                  <EuiFlexItem
                    grow={10}
                  >
                    <div
                      className="euiFlexItem euiFlexItem--flexGrow10"
                    >
                      <PanelTitle
                        title="Top 5 Service and Operation Errors"
                        totalItems={0}
                      >
                        <EuiText
                          size="m"
                        >
                          <div
                            className="euiText euiText--medium"
                          >
                            <span
                              className="panel-title"
                            >
                              Top 5 Service and Operation Errors
                            </span>
                            <span
                              className="panel-title-count"
                            >
                               (0)
                            </span>
                          </div>
                        </EuiText>
                      </PanelTitle>
                    </div>
                  </EuiFlexItem>
                </div>
              </EuiFlexGroup>
              <EuiSpacer
                size="m"
              >
                <div
                  className="euiSpacer euiSpacer--m"
                />
              </EuiSpacer>
              <EuiHorizontalRule
                margin="none"
              >
                <hr
                  className="euiHorizontalRule euiHorizontalRule--full"
                />
              </EuiHorizontalRule>
              <NoMatchMessage
                size="xl"
              >
                <EuiSpacer
                  size="xl"
                >
                  <div
                    className="euiSpacer euiSpacer--xl"
                  />
                </EuiSpacer>
                <EuiEmptyPrompt
                  body={
                    <EuiText>
                      No data matches the selected filter. Clear the filter and/or increase the time range to see more results.
                    </EuiText>
                  }
                  title={
                    <h2>
                      No matches
                    </h2>
                  }
                >
                  <div
                    className="euiEmptyPrompt"
                  >
                    <EuiTitle
                      size="m"
                    >
                      <h2
                        className="euiTitle euiTitle--medium"
                      >
                        No matches
                      </h2>
                    </EuiTitle>
                    <EuiTextColor
                      color="subdued"
                    >
                      <span
                        className="euiTextColor euiTextColor--subdued"
                      >
                        <EuiSpacer
                          size="m"
                        >
                          <div
                            className="euiSpacer euiSpacer--m"
                          />
                        </EuiSpacer>
                        <EuiText>
                          <div
                            className="euiText euiText--medium"
                          >
                            <EuiText>
                              <div
                                className="euiText euiText--medium"
                              >
                                No data matches the selected filter. Clear the filter and/or increase the time range to see more results.
                              </div>
                            </EuiText>
                          </div>
                        </EuiText>
                      </span>
                    </EuiTextColor>
                  </div>
                </EuiEmptyPrompt>
                <EuiSpacer
                  size="xl"
                >
                  <div
                    className="euiSpacer euiSpacer--xl"
                  />
                </EuiSpacer>
              </NoMatchMessage>
            </div>
          </EuiPanel>
        </ErrorRatesTable>
      </TopGroupsPage>
    </div>
  </DashboardContent>
</Dashboard>
`;
