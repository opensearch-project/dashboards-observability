// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Dashboard component renders dashboard 1`] = `
<Dashboard
  appConfigs={Array []}
  attributesFilterFields={Array []}
  childBreadcrumbs={
    Array [
      Object {
        "href": "#/trace_analytics/home",
        "text": "Trace analytics",
      },
      Object {
        "href": "#/trace_analytics/home",
        "text": "Dashboard",
      },
    ]
  }
  chrome={
    Object {
      "addApplicationClass": [MockFunction],
      "docTitle": Object {
        "change": [MockFunction],
        "reset": [MockFunction],
      },
      "getApplicationClasses$": [MockFunction],
      "getBadge$": [MockFunction],
      "getBreadcrumbs$": [MockFunction],
      "getBreadcrumbsEnricher$": [MockFunction],
      "getCustomNavLink$": [MockFunction],
      "getHeaderComponent": [MockFunction],
      "getHeaderVariant$": [MockFunction],
      "getHelpExtension$": [MockFunction],
      "getIsNavDrawerLocked$": [MockFunction],
      "getIsVisible$": [MockFunction],
      "globalSearch": Object {
        "getAllSearchCommands": [MockFunction],
      },
      "logos": Object {
        "AnimatedMark": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_spinner_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_spinner_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_spinner_on_light.svg",
        },
        "Application": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_dashboards_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_dashboards_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_dashboards_on_light.svg",
        },
        "CenterMark": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_center_mark_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_center_mark_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_center_mark_on_light.svg",
        },
        "Mark": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_mark_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_mark_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_mark_on_light.svg",
        },
        "OpenSearch": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_on_light.svg",
        },
        "colorScheme": "light",
      },
      "navControls": Object {
        "getCenter$": [MockFunction],
        "getLeft$": [MockFunction],
        "getLeftBottom$": [MockFunction],
        "getPrimaryHeaderRight$": [MockFunction],
        "getRight$": [MockFunction],
        "registerCenter": [MockFunction],
        "registerLeft": [MockFunction],
        "registerLeftBottom": [MockFunction],
        "registerPrimaryHeaderRight": [MockFunction],
        "registerRight": [MockFunction],
      },
      "navGroup": Object {
        "getCurrentNavGroup$": [MockFunction],
        "getNavGroupEnabled": [MockFunction] {
          "calls": Array [
            Array [],
            Array [],
            Array [],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
            Object {
              "type": "return",
              "value": undefined,
            },
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        },
        "getNavGroupsMap$": [MockFunction],
        "setCurrentNavGroup": [MockFunction],
      },
      "navLinks": Object {
        "enableForcedAppSwitcherNavigation": [MockFunction],
        "get": [MockFunction],
        "getAll": [MockFunction],
        "getForceAppSwitcherNavigation$": [MockFunction],
        "getNavLinks$": [MockFunction],
        "has": [MockFunction],
        "showOnly": [MockFunction],
        "update": [MockFunction],
      },
      "recentlyAccessed": Object {
        "add": [MockFunction],
        "get": [MockFunction],
        "get$": [MockFunction],
      },
      "removeApplicationClass": [MockFunction],
      "setAppTitle": [MockFunction],
      "setBadge": [MockFunction],
      "setBreadcrumbs": [MockFunction] {
        "calls": Array [
          Array [
            Array [
              undefined,
              Object {
                "href": "#/trace_analytics/home",
                "text": "Trace analytics",
              },
              Object {
                "href": "#/trace_analytics/home",
                "text": "Dashboard",
              },
            ],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
      "setBreadcrumbsEnricher": [MockFunction],
      "setCustomNavLink": [MockFunction],
      "setHeaderVariant": [MockFunction],
      "setHelpExtension": [MockFunction],
      "setHelpSupportUrl": [MockFunction],
      "setIsVisible": [MockFunction],
    }
  }
  dataPrepperIndicesExist={true}
  dataSourceMDSId={
    Array [
      Object {
        "id": "",
        "label": "",
      },
    ]
  }
  endTime="now"
  filters={Array []}
  http={[MockFunction]}
  mode="data_prepper"
  modes={
    Array [
      Object {
        "id": "jaeger",
        "title": "Jaeger",
      },
      Object {
        "id": "data_prepper",
        "title": "Data Prepper",
      },
    ]
  }
  page="dashboard"
  parentBreadcrumbs={
    Array [
      Object {
        "href": "test#/",
        "text": "test",
      },
    ]
  }
  query=""
  setEndTime={[MockFunction]}
  setFilters={
    [MockFunction] {
      "calls": Array [
        Array [
          Array [],
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  setQuery={[MockFunction]}
  setStartTime={[MockFunction]}
  startTime="now-5m"
>
  <EuiTitle
    size="l"
  >
    <h2
      className="euiTitle euiTitle--large"
      style={
        Object {
          "fontWeight": 430,
        }
      }
    >
      Dashboard
    </h2>
  </EuiTitle>
  <DataSourcePicker
    modes={
      Array [
        Object {
          "id": "jaeger",
          "title": "Jaeger",
        },
        Object {
          "id": "data_prepper",
          "title": "Data Prepper",
        },
      ]
    }
    selectedMode="data_prepper"
  >
    <EuiPopover
      anchorClassName="eui-textTruncate"
      anchorPosition="downCenter"
      button={
        <EuiSmallButtonEmpty
          className="dscIndexPattern__triggerButton"
          color="text"
          data-test-subj="indexPattern-switch-link"
          flush="left"
          iconSide="right"
          iconType="arrowDown"
          onClick={[Function]}
          title="data_prepper"
        >
          Data Prepper
        </EuiSmallButtonEmpty>
      }
      className="eui-textTruncate"
      closePopover={[Function]}
      display="inlineBlock"
      hasArrow={true}
      isOpen={false}
      ownFocus={true}
      panelPaddingSize="s"
    >
      <div
        className="euiPopover euiPopover--anchorDownCenter eui-textTruncate"
      >
        <div
          className="euiPopover__anchor eui-textTruncate"
        >
          <EuiSmallButtonEmpty
            className="dscIndexPattern__triggerButton"
            color="text"
            data-test-subj="indexPattern-switch-link"
            flush="left"
            iconSide="right"
            iconType="arrowDown"
            onClick={[Function]}
            title="data_prepper"
          >
            <EuiButtonEmpty
              className="dscIndexPattern__triggerButton"
              color="text"
              data-test-subj="indexPattern-switch-link"
              flush="left"
              iconSide="right"
              iconType="arrowDown"
              onClick={[Function]}
              size="s"
              title="data_prepper"
            >
              <button
                className="euiButtonEmpty euiButtonEmpty--text euiButtonEmpty--small euiButtonEmpty--flushLeft dscIndexPattern__triggerButton"
                data-test-subj="indexPattern-switch-link"
                disabled={false}
                onClick={[Function]}
                title="data_prepper"
                type="button"
              >
                <EuiButtonContent
                  className="euiButtonEmpty__content"
                  iconGap="m"
                  iconSide="right"
                  iconSize="m"
                  iconType="arrowDown"
                  textProps={
                    Object {
                      "className": "euiButtonEmpty__text",
                    }
                  }
                >
                  <span
                    className="euiButtonContent euiButtonContent--iconRight euiButtonEmpty__content"
                  >
                    <EuiIcon
                      className="euiButtonContent__icon"
                      color="inherit"
                      size="m"
                      type="arrowDown"
                    >
                      <EuiIconArrowDown
                        aria-hidden={true}
                        className="euiIcon euiIcon--medium euiIcon--inherit euiButtonContent__icon"
                        focusable="false"
                        role="img"
                        style={null}
                      >
                        <svg
                          aria-hidden={true}
                          className="euiIcon euiIcon--medium euiIcon--inherit euiButtonContent__icon"
                          focusable="false"
                          height={16}
                          role="img"
                          style={null}
                          viewBox="0 0 16 16"
                          width={16}
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M13.069 5.157 8.384 9.768a.546.546 0 0 1-.768 0L2.93 5.158a.552.552 0 0 0-.771 0 .53.53 0 0 0 0 .759l4.684 4.61c.641.631 1.672.63 2.312 0l4.684-4.61a.53.53 0 0 0 0-.76.552.552 0 0 0-.771 0Z"
                            fillRule="non-zero"
                          />
                        </svg>
                      </EuiIconArrowDown>
                    </EuiIcon>
                    <span
                      className="euiButtonEmpty__text"
                    >
                      Data Prepper
                    </span>
                  </span>
                </EuiButtonContent>
              </button>
            </EuiButtonEmpty>
          </EuiSmallButtonEmpty>
        </div>
      </div>
    </EuiPopover>
    <CustomIndexFlyout
      isFlyoutVisible={false}
      setIsFlyoutVisible={[Function]}
    >
      <div />
    </CustomIndexFlyout>
  </DataSourcePicker>
  <DashboardContent
    appConfigs={Array []}
    attributesFilterFields={Array []}
    childBreadcrumbs={
      Array [
        Object {
          "href": "#/trace_analytics/home",
          "text": "Trace analytics",
        },
        Object {
          "href": "#/trace_analytics/home",
          "text": "Dashboard",
        },
      ]
    }
    chrome={
      Object {
        "addApplicationClass": [MockFunction],
        "docTitle": Object {
          "change": [MockFunction],
          "reset": [MockFunction],
        },
        "getApplicationClasses$": [MockFunction],
        "getBadge$": [MockFunction],
        "getBreadcrumbs$": [MockFunction],
        "getBreadcrumbsEnricher$": [MockFunction],
        "getCustomNavLink$": [MockFunction],
        "getHeaderComponent": [MockFunction],
        "getHeaderVariant$": [MockFunction],
        "getHelpExtension$": [MockFunction],
        "getIsNavDrawerLocked$": [MockFunction],
        "getIsVisible$": [MockFunction],
        "globalSearch": Object {
          "getAllSearchCommands": [MockFunction],
        },
        "logos": Object {
          "AnimatedMark": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_spinner_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_spinner_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_spinner_on_light.svg",
          },
          "Application": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_dashboards_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_dashboards_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_dashboards_on_light.svg",
          },
          "CenterMark": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_center_mark_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_center_mark_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_center_mark_on_light.svg",
          },
          "Mark": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_mark_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_mark_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_mark_on_light.svg",
          },
          "OpenSearch": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_on_light.svg",
          },
          "colorScheme": "light",
        },
        "navControls": Object {
          "getCenter$": [MockFunction],
          "getLeft$": [MockFunction],
          "getLeftBottom$": [MockFunction],
          "getPrimaryHeaderRight$": [MockFunction],
          "getRight$": [MockFunction],
          "registerCenter": [MockFunction],
          "registerLeft": [MockFunction],
          "registerLeftBottom": [MockFunction],
          "registerPrimaryHeaderRight": [MockFunction],
          "registerRight": [MockFunction],
        },
        "navGroup": Object {
          "getCurrentNavGroup$": [MockFunction],
          "getNavGroupEnabled": [MockFunction] {
            "calls": Array [
              Array [],
              Array [],
              Array [],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": undefined,
              },
              Object {
                "type": "return",
                "value": undefined,
              },
              Object {
                "type": "return",
                "value": undefined,
              },
            ],
          },
          "getNavGroupsMap$": [MockFunction],
          "setCurrentNavGroup": [MockFunction],
        },
        "navLinks": Object {
          "enableForcedAppSwitcherNavigation": [MockFunction],
          "get": [MockFunction],
          "getAll": [MockFunction],
          "getForceAppSwitcherNavigation$": [MockFunction],
          "getNavLinks$": [MockFunction],
          "has": [MockFunction],
          "showOnly": [MockFunction],
          "update": [MockFunction],
        },
        "recentlyAccessed": Object {
          "add": [MockFunction],
          "get": [MockFunction],
          "get$": [MockFunction],
        },
        "removeApplicationClass": [MockFunction],
        "setAppTitle": [MockFunction],
        "setBadge": [MockFunction],
        "setBreadcrumbs": [MockFunction] {
          "calls": Array [
            Array [
              Array [
                undefined,
                Object {
                  "href": "#/trace_analytics/home",
                  "text": "Trace analytics",
                },
                Object {
                  "href": "#/trace_analytics/home",
                  "text": "Dashboard",
                },
              ],
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        },
        "setBreadcrumbsEnricher": [MockFunction],
        "setCustomNavLink": [MockFunction],
        "setHeaderVariant": [MockFunction],
        "setHelpExtension": [MockFunction],
        "setHelpSupportUrl": [MockFunction],
        "setIsVisible": [MockFunction],
      }
    }
    dataPrepperIndicesExist={true}
    dataSourceMDSId={
      Array [
        Object {
          "id": "",
          "label": "",
        },
      ]
    }
    endTime="now"
    filters={Array []}
    http={[MockFunction]}
    mode="data_prepper"
    modes={
      Array [
        Object {
          "id": "jaeger",
          "title": "Jaeger",
        },
        Object {
          "id": "data_prepper",
          "title": "Data Prepper",
        },
      ]
    }
    page="dashboard"
    parentBreadcrumbs={
      Array [
        Object {
          "href": "test#/",
          "text": "test",
        },
      ]
    }
    query=""
    setEndTime={[MockFunction]}
    setFilters={
      [MockFunction] {
        "calls": Array [
          Array [
            Array [],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    setQuery={[MockFunction]}
    setStartTime={[MockFunction]}
    startTime="now-5m"
  >
    <div>
      <DashboardTable
        addFilter={[Function]}
        addPercentileFilter={[Function]}
        filters={Array []}
        items={Array []}
        loading={true}
        page="dashboard"
        setRedirect={[Function]}
      >
        <EuiPanel>
          <div
            className="euiPanel euiPanel--paddingMedium euiPanel--borderRadiusMedium euiPanel--plain euiPanel--hasShadow"
          >
            <EuiFlexGroup
              alignItems="center"
              gutterSize="s"
            >
              <div
                className="euiFlexGroup euiFlexGroup--gutterSmall euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow euiFlexGroup--responsive"
              >
                <EuiFlexItem
                  grow={10}
                >
                  <div
                    className="euiFlexItem euiFlexItem--flexGrow10"
                  >
                    <PanelTitle
                      title="Latency by trace group"
                      totalItems={0}
                    >
                      <EuiText
                        size="m"
                      >
                        <div
                          className="euiText euiText--medium"
                        >
                          <span
                            className="panel-title"
                          >
                            Latency by trace group
                          </span>
                          <span
                            className="panel-title-count"
                          >
                             (0)
                          </span>
                        </div>
                      </EuiText>
                    </PanelTitle>
                  </div>
                </EuiFlexItem>
                <EuiFlexItem
                  grow={false}
                >
                  <div
                    className="euiFlexItem euiFlexItem--flexGrowZero"
                  >
                    <EuiLink
                      data-test-subj="dashboard-table-percentile-button-1"
                      onClick={[Function]}
                    >
                      <button
                        className="euiLink euiLink--primary"
                        data-test-subj="dashboard-table-percentile-button-1"
                        disabled={false}
                        onClick={[Function]}
                        type="button"
                      >
                        <EuiText
                          size="xs"
                        >
                          <div
                            className="euiText euiText--extraSmall"
                          >
                            <span
                              style={
                                Object {
                                  "color": "#957ac9",
                                }
                              }
                            >
                              □
                            </span>
                             &lt; 95 percentile
                          </div>
                        </EuiText>
                      </button>
                    </EuiLink>
                  </div>
                </EuiFlexItem>
                <EuiFlexItem
                  grow={1}
                >
                  <div
                    className="euiFlexItem euiFlexItem--flexGrow1"
                  />
                </EuiFlexItem>
                <EuiFlexItem
                  grow={false}
                >
                  <div
                    className="euiFlexItem euiFlexItem--flexGrowZero"
                  >
                    <EuiLink
                      data-test-subj="dashboard-table-percentile-button-2"
                      onClick={[Function]}
                    >
                      <button
                        className="euiLink euiLink--primary"
                        data-test-subj="dashboard-table-percentile-button-2"
                        disabled={false}
                        onClick={[Function]}
                        type="button"
                      >
                        <EuiText
                          size="xs"
                        >
                          <div
                            className="euiText euiText--extraSmall"
                          >
                            <span
                              style={
                                Object {
                                  "color": "#957ac9",
                                }
                              }
                            >
                              ■
                            </span>
                             &gt;= 95 percentile
                          </div>
                        </EuiText>
                      </button>
                    </EuiLink>
                  </div>
                </EuiFlexItem>
                <EuiFlexItem
                  grow={1}
                >
                  <div
                    className="euiFlexItem euiFlexItem--flexGrow1"
                  />
                </EuiFlexItem>
              </div>
            </EuiFlexGroup>
            <EuiSpacer
              size="m"
            >
              <div
                className="euiSpacer euiSpacer--m"
              />
            </EuiSpacer>
            <EuiHorizontalRule
              margin="none"
            >
              <hr
                className="euiHorizontalRule euiHorizontalRule--full"
              />
            </EuiHorizontalRule>
            <EuiInMemoryTable
              columns={
                Array [
                  Object {
                    "align": "left",
                    "field": "dashboard_trace_group_name",
                    "name": <EuiToolTip
                      content={
                        <EuiText
                          size="xs"
                        >
                          Traces of all requests that share a common API and operation at the start of distributed tracing instrumentation.
                        </EuiText>
                      }
                      delay="regular"
                      position="top"
                    >
                      <React.Fragment>
                        <div>
                          Trace group name
                           
                          <EuiIcon
                            className="eui-alignTop"
                            color="subdued"
                            size="s"
                            type="questionInCircle"
                          />
                        </div>
                        <div>
                           
                        </div>
                      </React.Fragment>
                    </EuiToolTip>,
                    "render": [Function],
                    "sortable": true,
                  },
                  Object {
                    "align": "center",
                    "field": "dashboard_latency_variance",
                    "name": <React.Fragment>
                      <EuiToolTip
                        content={
                          <EuiText
                            size="xs"
                          >
                            Range of latencies for traces within a trace group in the selected time range.
                          </EuiText>
                        }
                        delay="regular"
                        position="top"
                      >
                        <span>
                          Duration variance (ms)
                           
                          <EuiIcon
                            className="eui-alignTop"
                            color="subdued"
                            size="s"
                            type="questionInCircle"
                          />
                        </span>
                      </EuiToolTip>
                      <EuiText
                        color="subdued"
                        size="xs"
                      >
                        
                      </EuiText>
                    </React.Fragment>,
                    "render": [Function],
                    "sortable": [Function],
                    "width": "300px",
                  },
                  Object {
                    "align": "right",
                    "dataType": "number",
                    "field": "dashboard_average_latency",
                    "name": <EuiToolTip
                      content={
                        <EuiText
                          size="xs"
                        >
                          Average latency of traces within a trace group in the selected time range.
                        </EuiText>
                      }
                      delay="regular"
                      position="top"
                    >
                      <React.Fragment>
                        <div>
                          Average duration (ms)
                           
                          <EuiIcon
                            className="eui-alignTop"
                            color="subdued"
                            size="s"
                            type="questionInCircle"
                          />
                        </div>
                        <div>
                           
                        </div>
                      </React.Fragment>
                    </EuiToolTip>,
                    "render": [Function],
                    "sortable": true,
                  },
                  Object {
                    "align": "right",
                    "field": "24_hour_latency_trend",
                    "name": <EuiToolTip
                      content={
                        <EuiText
                          size="xs"
                        >
                          24 hour time series view of hourly average, hourly percentile, and hourly range of latency for traces within a trace group.
                        </EuiText>
                      }
                      delay="regular"
                      position="top"
                    >
                      <React.Fragment>
                        <div>
                          24-hour duration trend
                           
                          <EuiIcon
                            className="eui-alignTop"
                            color="subdued"
                            size="s"
                            type="questionInCircle"
                          />
                        </div>
                        <div>
                           
                        </div>
                      </React.Fragment>
                    </EuiToolTip>,
                    "render": [Function],
                    "sortable": false,
                  },
                  Object {
                    "align": "right",
                    "field": "dashboard_error_rate",
                    "name": <EuiToolTip
                      content={
                        <EuiText
                          size="xs"
                        >
                          Error rate based on count of trace errors within a trace group in the selected time range.
                        </EuiText>
                      }
                      delay="regular"
                      position="top"
                    >
                      <React.Fragment>
                        <div>
                          Error rate
                           
                          <EuiIcon
                            className="eui-alignTop"
                            color="subdued"
                            size="s"
                            type="questionInCircle"
                          />
                        </div>
                        <div>
                           
                        </div>
                      </React.Fragment>
                    </EuiToolTip>,
                    "render": [Function],
                    "sortable": true,
                  },
                  Object {
                    "align": "right",
                    "field": "dashboard_traces",
                    "name": <EuiToolTip
                      content={
                        <EuiText
                          size="xs"
                        >
                          Count of traces with unique trace identifiers in the selected time range.
                        </EuiText>
                      }
                      delay="regular"
                      position="top"
                    >
                      <React.Fragment>
                        <div>
                          Traces
                           
                          <EuiIcon
                            className="eui-alignTop"
                            color="subdued"
                            size="s"
                            type="questionInCircle"
                          />
                        </div>
                        <div>
                           
                        </div>
                      </React.Fragment>
                    </EuiToolTip>,
                    "render": [Function],
                    "sortable": true,
                  },
                ]
              }
              data-test-subj="dashboardTable"
              items={Array []}
              loading={true}
              onTableChange={[Function]}
              pagination={
                Object {
                  "initialPageSize": 10,
                  "pageSizeOptions": Array [
                    5,
                    10,
                    15,
                  ],
                }
              }
              responsive={true}
              sorting={
                Object {
                  "sort": Object {
                    "direction": "desc",
                    "field": "dashboard_latency_variance",
                  },
                }
              }
              tableLayout="auto"
            >
              <EuiBasicTable
                columns={
                  Array [
                    Object {
                      "align": "left",
                      "field": "dashboard_trace_group_name",
                      "name": <EuiToolTip
                        content={
                          <EuiText
                            size="xs"
                          >
                            Traces of all requests that share a common API and operation at the start of distributed tracing instrumentation.
                          </EuiText>
                        }
                        delay="regular"
                        position="top"
                      >
                        <React.Fragment>
                          <div>
                            Trace group name
                             
                            <EuiIcon
                              className="eui-alignTop"
                              color="subdued"
                              size="s"
                              type="questionInCircle"
                            />
                          </div>
                          <div>
                             
                          </div>
                        </React.Fragment>
                      </EuiToolTip>,
                      "render": [Function],
                      "sortable": true,
                    },
                    Object {
                      "align": "center",
                      "field": "dashboard_latency_variance",
                      "name": <React.Fragment>
                        <EuiToolTip
                          content={
                            <EuiText
                              size="xs"
                            >
                              Range of latencies for traces within a trace group in the selected time range.
                            </EuiText>
                          }
                          delay="regular"
                          position="top"
                        >
                          <span>
                            Duration variance (ms)
                             
                            <EuiIcon
                              className="eui-alignTop"
                              color="subdued"
                              size="s"
                              type="questionInCircle"
                            />
                          </span>
                        </EuiToolTip>
                        <EuiText
                          color="subdued"
                          size="xs"
                        >
                          
                        </EuiText>
                      </React.Fragment>,
                      "render": [Function],
                      "sortable": [Function],
                      "width": "300px",
                    },
                    Object {
                      "align": "right",
                      "dataType": "number",
                      "field": "dashboard_average_latency",
                      "name": <EuiToolTip
                        content={
                          <EuiText
                            size="xs"
                          >
                            Average latency of traces within a trace group in the selected time range.
                          </EuiText>
                        }
                        delay="regular"
                        position="top"
                      >
                        <React.Fragment>
                          <div>
                            Average duration (ms)
                             
                            <EuiIcon
                              className="eui-alignTop"
                              color="subdued"
                              size="s"
                              type="questionInCircle"
                            />
                          </div>
                          <div>
                             
                          </div>
                        </React.Fragment>
                      </EuiToolTip>,
                      "render": [Function],
                      "sortable": true,
                    },
                    Object {
                      "align": "right",
                      "field": "24_hour_latency_trend",
                      "name": <EuiToolTip
                        content={
                          <EuiText
                            size="xs"
                          >
                            24 hour time series view of hourly average, hourly percentile, and hourly range of latency for traces within a trace group.
                          </EuiText>
                        }
                        delay="regular"
                        position="top"
                      >
                        <React.Fragment>
                          <div>
                            24-hour duration trend
                             
                            <EuiIcon
                              className="eui-alignTop"
                              color="subdued"
                              size="s"
                              type="questionInCircle"
                            />
                          </div>
                          <div>
                             
                          </div>
                        </React.Fragment>
                      </EuiToolTip>,
                      "render": [Function],
                      "sortable": false,
                    },
                    Object {
                      "align": "right",
                      "field": "dashboard_error_rate",
                      "name": <EuiToolTip
                        content={
                          <EuiText
                            size="xs"
                          >
                            Error rate based on count of trace errors within a trace group in the selected time range.
                          </EuiText>
                        }
                        delay="regular"
                        position="top"
                      >
                        <React.Fragment>
                          <div>
                            Error rate
                             
                            <EuiIcon
                              className="eui-alignTop"
                              color="subdued"
                              size="s"
                              type="questionInCircle"
                            />
                          </div>
                          <div>
                             
                          </div>
                        </React.Fragment>
                      </EuiToolTip>,
                      "render": [Function],
                      "sortable": true,
                    },
                    Object {
                      "align": "right",
                      "field": "dashboard_traces",
                      "name": <EuiToolTip
                        content={
                          <EuiText
                            size="xs"
                          >
                            Count of traces with unique trace identifiers in the selected time range.
                          </EuiText>
                        }
                        delay="regular"
                        position="top"
                      >
                        <React.Fragment>
                          <div>
                            Traces
                             
                            <EuiIcon
                              className="eui-alignTop"
                              color="subdued"
                              size="s"
                              type="questionInCircle"
                            />
                          </div>
                          <div>
                             
                          </div>
                        </React.Fragment>
                      </EuiToolTip>,
                      "render": [Function],
                      "sortable": true,
                    },
                  ]
                }
                data-test-subj="dashboardTable"
                items={Array []}
                loading={true}
                noItemsMessage="No items found"
                onChange={[Function]}
                pagination={
                  Object {
                    "hidePerPageOptions": undefined,
                    "pageIndex": 0,
                    "pageSize": 10,
                    "pageSizeOptions": Array [
                      5,
                      10,
                      15,
                    ],
                    "totalItemCount": 0,
                  }
                }
                responsive={true}
                sorting={
                  Object {
                    "allowNeutralSort": true,
                    "sort": Object {
                      "direction": "desc",
                      "field": <React.Fragment>
                        <EuiToolTip
                          content={
                            <EuiText
                              size="xs"
                            >
                              Range of latencies for traces within a trace group in the selected time range.
                            </EuiText>
                          }
                          delay="regular"
                          position="top"
                        >
                          <span>
                            Duration variance (ms)
                             
                            <EuiIcon
                              className="eui-alignTop"
                              color="subdued"
                              size="s"
                              type="questionInCircle"
                            />
                          </span>
                        </EuiToolTip>
                        <EuiText
                          color="subdued"
                          size="xs"
                        >
                          
                        </EuiText>
                      </React.Fragment>,
                    },
                  }
                }
                tableLayout="auto"
              >
                <div
                  className="euiBasicTable euiBasicTable-loading"
                  data-test-subj="dashboardTable"
                >
                  <div>
                    <EuiTableHeaderMobile>
                      <div
                        className="euiTableHeaderMobile"
                      >
                        <EuiFlexGroup
                          alignItems="baseline"
                          justifyContent="spaceBetween"
                          responsive={false}
                        >
                          <div
                            className="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--alignItemsBaseline euiFlexGroup--justifyContentSpaceBetween euiFlexGroup--directionRow"
                          >
                            <EuiFlexItem
                              grow={false}
                            >
                              <div
                                className="euiFlexItem euiFlexItem--flexGrowZero"
                              />
                            </EuiFlexItem>
                            <EuiFlexItem
                              grow={false}
                            >
                              <div
                                className="euiFlexItem euiFlexItem--flexGrowZero"
                              >
                                <EuiTableSortMobile
                                  items={
                                    Array [
                                      Object {
                                        "isSortAscending": undefined,
                                        "isSorted": false,
                                        "key": "_data_s_dashboard_trace_group_name_0",
                                        "name": <EuiToolTip
                                          content={
                                            <EuiText
                                              size="xs"
                                            >
                                              Traces of all requests that share a common API and operation at the start of distributed tracing instrumentation.
                                            </EuiText>
                                          }
                                          delay="regular"
                                          position="top"
                                        >
                                          <React.Fragment>
                                            <div>
                                              Trace group name
                                               
                                              <EuiIcon
                                                className="eui-alignTop"
                                                color="subdued"
                                                size="s"
                                                type="questionInCircle"
                                              />
                                            </div>
                                            <div>
                                               
                                            </div>
                                          </React.Fragment>
                                        </EuiToolTip>,
                                        "onSort": [Function],
                                      },
                                      Object {
                                        "isSortAscending": false,
                                        "isSorted": true,
                                        "key": "_data_s_dashboard_latency_variance_1",
                                        "name": <React.Fragment>
                                          <EuiToolTip
                                            content={
                                              <EuiText
                                                size="xs"
                                              >
                                                Range of latencies for traces within a trace group in the selected time range.
                                              </EuiText>
                                            }
                                            delay="regular"
                                            position="top"
                                          >
                                            <span>
                                              Duration variance (ms)
                                               
                                              <EuiIcon
                                                className="eui-alignTop"
                                                color="subdued"
                                                size="s"
                                                type="questionInCircle"
                                              />
                                            </span>
                                          </EuiToolTip>
                                          <EuiText
                                            color="subdued"
                                            size="xs"
                                          >
                                            
                                          </EuiText>
                                        </React.Fragment>,
                                        "onSort": [Function],
                                      },
                                      Object {
                                        "isSortAscending": undefined,
                                        "isSorted": false,
                                        "key": "_data_s_dashboard_average_latency_2",
                                        "name": <EuiToolTip
                                          content={
                                            <EuiText
                                              size="xs"
                                            >
                                              Average latency of traces within a trace group in the selected time range.
                                            </EuiText>
                                          }
                                          delay="regular"
                                          position="top"
                                        >
                                          <React.Fragment>
                                            <div>
                                              Average duration (ms)
                                               
                                              <EuiIcon
                                                className="eui-alignTop"
                                                color="subdued"
                                                size="s"
                                                type="questionInCircle"
                                              />
                                            </div>
                                            <div>
                                               
                                            </div>
                                          </React.Fragment>
                                        </EuiToolTip>,
                                        "onSort": [Function],
                                      },
                                      Object {
                                        "isSortAscending": undefined,
                                        "isSorted": false,
                                        "key": "_data_s_dashboard_error_rate_4",
                                        "name": <EuiToolTip
                                          content={
                                            <EuiText
                                              size="xs"
                                            >
                                              Error rate based on count of trace errors within a trace group in the selected time range.
                                            </EuiText>
                                          }
                                          delay="regular"
                                          position="top"
                                        >
                                          <React.Fragment>
                                            <div>
                                              Error rate
                                               
                                              <EuiIcon
                                                className="eui-alignTop"
                                                color="subdued"
                                                size="s"
                                                type="questionInCircle"
                                              />
                                            </div>
                                            <div>
                                               
                                            </div>
                                          </React.Fragment>
                                        </EuiToolTip>,
                                        "onSort": [Function],
                                      },
                                      Object {
                                        "isSortAscending": undefined,
                                        "isSorted": false,
                                        "key": "_data_s_dashboard_traces_5",
                                        "name": <EuiToolTip
                                          content={
                                            <EuiText
                                              size="xs"
                                            >
                                              Count of traces with unique trace identifiers in the selected time range.
                                            </EuiText>
                                          }
                                          delay="regular"
                                          position="top"
                                        >
                                          <React.Fragment>
                                            <div>
                                              Traces
                                               
                                              <EuiIcon
                                                className="eui-alignTop"
                                                color="subdued"
                                                size="s"
                                                type="questionInCircle"
                                              />
                                            </div>
                                            <div>
                                               
                                            </div>
                                          </React.Fragment>
                                        </EuiToolTip>,
                                        "onSort": [Function],
                                      },
                                    ]
                                  }
                                >
                                  <div
                                    className="euiTableSortMobile"
                                  >
                                    <EuiPopover
                                      anchorPosition="downRight"
                                      button={
                                        <EuiButtonEmpty
                                          flush="right"
                                          iconSide="right"
                                          iconType="arrowDown"
                                          onClick={[Function]}
                                          size="xs"
                                        >
                                          <EuiI18n
                                            default="Sorting"
                                            token="euiTableSortMobile.sorting"
                                          />
                                        </EuiButtonEmpty>
                                      }
                                      closePopover={[Function]}
                                      display="inlineBlock"
                                      hasArrow={true}
                                      isOpen={false}
                                      ownFocus={true}
                                      panelPaddingSize="none"
                                    >
                                      <div
                                        className="euiPopover euiPopover--anchorDownRight"
                                      >
                                        <div
                                          className="euiPopover__anchor"
                                        >
                                          <EuiButtonEmpty
                                            flush="right"
                                            iconSide="right"
                                            iconType="arrowDown"
                                            onClick={[Function]}
                                            size="xs"
                                          >
                                            <button
                                              className="euiButtonEmpty euiButtonEmpty--primary euiButtonEmpty--xSmall euiButtonEmpty--flushRight"
                                              disabled={false}
                                              onClick={[Function]}
                                              type="button"
                                            >
                                              <EuiButtonContent
                                                className="euiButtonEmpty__content"
                                                iconGap="m"
                                                iconSide="right"
                                                iconSize="s"
                                                iconType="arrowDown"
                                                textProps={
                                                  Object {
                                                    "className": "euiButtonEmpty__text",
                                                  }
                                                }
                                              >
                                                <span
                                                  className="euiButtonContent euiButtonContent--iconRight euiButtonEmpty__content"
                                                >
                                                  <EuiIcon
                                                    className="euiButtonContent__icon"
                                                    color="inherit"
                                                    size="s"
                                                    type="arrowDown"
                                                  >
                                                    <EuiIconArrowDown
                                                      aria-hidden={true}
                                                      className="euiIcon euiIcon--small euiIcon--inherit euiButtonContent__icon"
                                                      focusable="false"
                                                      role="img"
                                                      style={null}
                                                    >
                                                      <svg
                                                        aria-hidden={true}
                                                        className="euiIcon euiIcon--small euiIcon--inherit euiButtonContent__icon"
                                                        focusable="false"
                                                        height={16}
                                                        role="img"
                                                        style={null}
                                                        viewBox="0 0 16 16"
                                                        width={16}
                                                        xmlns="http://www.w3.org/2000/svg"
                                                      >
                                                        <path
                                                          d="M13.069 5.157 8.384 9.768a.546.546 0 0 1-.768 0L2.93 5.158a.552.552 0 0 0-.771 0 .53.53 0 0 0 0 .759l4.684 4.61c.641.631 1.672.63 2.312 0l4.684-4.61a.53.53 0 0 0 0-.76.552.552 0 0 0-.771 0Z"
                                                          fillRule="non-zero"
                                                        />
                                                      </svg>
                                                    </EuiIconArrowDown>
                                                  </EuiIcon>
                                                  <span
                                                    className="euiButtonEmpty__text"
                                                  >
                                                    <EuiI18n
                                                      default="Sorting"
                                                      token="euiTableSortMobile.sorting"
                                                    >
                                                      Sorting
                                                    </EuiI18n>
                                                  </span>
                                                </span>
                                              </EuiButtonContent>
                                            </button>
                                          </EuiButtonEmpty>
                                        </div>
                                      </div>
                                    </EuiPopover>
                                  </div>
                                </EuiTableSortMobile>
                              </div>
                            </EuiFlexItem>
                          </div>
                        </EuiFlexGroup>
                      </div>
                    </EuiTableHeaderMobile>
                    <EuiTable
                      id="random_html_id"
                      responsive={true}
                      tableLayout="auto"
                    >
                      <table
                        className="euiTable euiTable--responsive euiTable--auto"
                        id="random_html_id"
                        tabIndex={-1}
                      >
                        <EuiScreenReaderOnly>
                          <caption
                            className="euiScreenReaderOnly euiTableCaption"
                          >
                            <EuiDelayRender
                              delay={500}
                            />
                          </caption>
                        </EuiScreenReaderOnly>
                        <EuiTableHeader>
                          <thead>
                            <tr>
                              <EuiTableHeaderCell
                                align="left"
                                data-test-subj="tableHeaderCell_dashboard_trace_group_name_0"
                                isSorted={false}
                                key="_data_h_dashboard_trace_group_name_0"
                                onSort={[Function]}
                              >
                                <th
                                  aria-live="polite"
                                  aria-sort="none"
                                  className="euiTableHeaderCell"
                                  data-test-subj="tableHeaderCell_dashboard_trace_group_name_0"
                                  role="columnheader"
                                  scope="col"
                                  style={
                                    Object {
                                      "width": undefined,
                                    }
                                  }
                                >
                                  <button
                                    className="euiTableHeaderButton"
                                    data-test-subj="tableHeaderSortButton"
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <CellContents
                                      className="euiTableCellContent"
                                      isSorted={false}
                                      showSortMsg={true}
                                    >
                                      <span
                                        className="euiTableCellContent"
                                      >
                                        <EuiInnerText>
                                          <EuiI18n
                                            default="{innerText}; {description}"
                                            token="euiTableHeaderCell.titleTextWithDesc"
                                            values={
                                              Object {
                                                "description": undefined,
                                                "innerText": "Trace group name  ",
                                              }
                                            }
                                          >
                                            <span
                                              className="euiTableCellContent__text"
                                              title="Trace group name  "
                                            >
                                              <EuiToolTip
                                                content={
                                                  <EuiText
                                                    size="xs"
                                                  >
                                                    Traces of all requests that share a common API and operation at the start of distributed tracing instrumentation.
                                                  </EuiText>
                                                }
                                                delay="regular"
                                                position="top"
                                              >
                                                <span
                                                  className="euiToolTipAnchor"
                                                  onKeyUp={[Function]}
                                                  onMouseOut={[Function]}
                                                  onMouseOver={[Function]}
                                                >
                                                  <div>
                                                    Trace group name
                                                     
                                                    <EuiIcon
                                                      className="eui-alignTop"
                                                      color="subdued"
                                                      size="s"
                                                      type="questionInCircle"
                                                    >
                                                      <EuiIconQuestionInCircle
                                                        aria-hidden={true}
                                                        className="euiIcon euiIcon--small euiIcon--subdued eui-alignTop"
                                                        focusable="false"
                                                        role="img"
                                                        style={null}
                                                      >
                                                        <svg
                                                          aria-hidden={true}
                                                          className="euiIcon euiIcon--small euiIcon--subdued eui-alignTop"
                                                          focusable="false"
                                                          height={16}
                                                          role="img"
                                                          style={null}
                                                          viewBox="0 0 16 16"
                                                          width={16}
                                                          xmlns="http://www.w3.org/2000/svg"
                                                        >
                                                          <path
                                                            d="M8 14A6 6 0 1 1 8 2a6 6 0 0 1 0 12Zm0-1A5 5 0 1 0 8 3a5 5 0 0 0 0 10Zm-.186-1.065A.785.785 0 0 1 7 11.12c0-.48.34-.82.814-.82.475 0 .809.34.809.82 0 .475-.334.815-.809.815ZM5.9 6.317C5.96 5.168 6.755 4.4 8.048 4.4c1.218 0 2.091.759 2.091 1.8 0 .736-.36 1.304-1.03 1.707-.56.33-.717.56-.717 1.022v.305l-.1.1H7.47l-.1-.1v-.431c-.005-.646.302-1.104.987-1.514.527-.322.708-.59.708-1.047 0-.536-.416-.91-1.05-.91-.652 0-1.064.374-1.112.998l-.1.092H6l-.1-.105Z"
                                                          />
                                                        </svg>
                                                      </EuiIconQuestionInCircle>
                                                    </EuiIcon>
                                                  </div>
                                                  <div>
                                                     
                                                  </div>
                                                </span>
                                              </EuiToolTip>
                                            </span>
                                          </EuiI18n>
                                        </EuiInnerText>
                                      </span>
                                    </CellContents>
                                  </button>
                                </th>
                              </EuiTableHeaderCell>
                              <EuiTableHeaderCell
                                align="center"
                                data-test-subj="tableHeaderCell_dashboard_latency_variance_1"
                                isSortAscending={false}
                                isSorted={true}
                                key="_data_h_dashboard_latency_variance_1"
                                onSort={[Function]}
                                width="300px"
                              >
                                <th
                                  aria-live="polite"
                                  aria-sort="descending"
                                  className="euiTableHeaderCell"
                                  data-test-subj="tableHeaderCell_dashboard_latency_variance_1"
                                  role="columnheader"
                                  scope="col"
                                  style={
                                    Object {
                                      "width": "300px",
                                    }
                                  }
                                >
                                  <button
                                    className="euiTableHeaderButton euiTableHeaderButton-isSorted"
                                    data-test-subj="tableHeaderSortButton"
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <CellContents
                                      className="euiTableCellContent euiTableCellContent--alignCenter"
                                      isSortAscending={false}
                                      isSorted={true}
                                      showSortMsg={true}
                                    >
                                      <span
                                        className="euiTableCellContent euiTableCellContent--alignCenter"
                                      >
                                        <EuiInnerText>
                                          <EuiI18n
                                            default="{innerText}; {description}"
                                            token="euiTableHeaderCell.titleTextWithDesc"
                                            values={
                                              Object {
                                                "description": undefined,
                                                "innerText": "Duration variance (ms) ",
                                              }
                                            }
                                          >
                                            <span
                                              className="euiTableCellContent__text"
                                              title="Duration variance (ms) "
                                            >
                                              <EuiToolTip
                                                content={
                                                  <EuiText
                                                    size="xs"
                                                  >
                                                    Range of latencies for traces within a trace group in the selected time range.
                                                  </EuiText>
                                                }
                                                delay="regular"
                                                position="top"
                                              >
                                                <span
                                                  className="euiToolTipAnchor"
                                                  onKeyUp={[Function]}
                                                  onMouseOut={[Function]}
                                                  onMouseOver={[Function]}
                                                >
                                                  <span
                                                    onBlur={[Function]}
                                                    onFocus={[Function]}
                                                  >
                                                    Duration variance (ms)
                                                     
                                                    <EuiIcon
                                                      className="eui-alignTop"
                                                      color="subdued"
                                                      size="s"
                                                      type="questionInCircle"
                                                    >
                                                      <EuiIconQuestionInCircle
                                                        aria-hidden={true}
                                                        className="euiIcon euiIcon--small euiIcon--subdued eui-alignTop"
                                                        focusable="false"
                                                        role="img"
                                                        style={null}
                                                      >
                                                        <svg
                                                          aria-hidden={true}
                                                          className="euiIcon euiIcon--small euiIcon--subdued eui-alignTop"
                                                          focusable="false"
                                                          height={16}
                                                          role="img"
                                                          style={null}
                                                          viewBox="0 0 16 16"
                                                          width={16}
                                                          xmlns="http://www.w3.org/2000/svg"
                                                        >
                                                          <path
                                                            d="M8 14A6 6 0 1 1 8 2a6 6 0 0 1 0 12Zm0-1A5 5 0 1 0 8 3a5 5 0 0 0 0 10Zm-.186-1.065A.785.785 0 0 1 7 11.12c0-.48.34-.82.814-.82.475 0 .809.34.809.82 0 .475-.334.815-.809.815ZM5.9 6.317C5.96 5.168 6.755 4.4 8.048 4.4c1.218 0 2.091.759 2.091 1.8 0 .736-.36 1.304-1.03 1.707-.56.33-.717.56-.717 1.022v.305l-.1.1H7.47l-.1-.1v-.431c-.005-.646.302-1.104.987-1.514.527-.322.708-.59.708-1.047 0-.536-.416-.91-1.05-.91-.652 0-1.064.374-1.112.998l-.1.092H6l-.1-.105Z"
                                                          />
                                                        </svg>
                                                      </EuiIconQuestionInCircle>
                                                    </EuiIcon>
                                                  </span>
                                                </span>
                                              </EuiToolTip>
                                              <EuiText
                                                color="subdued"
                                                size="xs"
                                              >
                                                <div
                                                  className="euiText euiText--extraSmall"
                                                >
                                                  <EuiTextColor
                                                    color="subdued"
                                                    component="div"
                                                  >
                                                    <div
                                                      className="euiTextColor euiTextColor--subdued"
                                                    />
                                                  </EuiTextColor>
                                                </div>
                                              </EuiText>
                                            </span>
                                          </EuiI18n>
                                        </EuiInnerText>
                                        <EuiIcon
                                          className="euiTableSortIcon"
                                          size="m"
                                          type="sortDown"
                                        >
                                          <EuiIconSortDown
                                            aria-hidden={true}
                                            className="euiIcon euiIcon--medium euiTableSortIcon"
                                            focusable="false"
                                            role="img"
                                            style={null}
                                          >
                                            <svg
                                              aria-hidden={true}
                                              className="euiIcon euiIcon--medium euiTableSortIcon"
                                              focusable="false"
                                              height={16}
                                              role="img"
                                              style={null}
                                              viewBox="0 0 16 16"
                                              width={16}
                                              xmlns="http://www.w3.org/2000/svg"
                                            >
                                              <path
                                                d="M7 11.692V3.556C7 3.249 7.224 3 7.5 3s.5.249.5.556v8.136l4.096-4.096a.5.5 0 0 1 .707.707l-4.242 4.243a1.494 1.494 0 0 1-.925.433.454.454 0 0 1-.272 0 1.494 1.494 0 0 1-.925-.433L2.197 8.303a.5.5 0 1 1 .707-.707L7 11.692Z"
                                              />
                                            </svg>
                                          </EuiIconSortDown>
                                        </EuiIcon>
                                      </span>
                                    </CellContents>
                                  </button>
                                </th>
                              </EuiTableHeaderCell>
                              <EuiTableHeaderCell
                                align="right"
                                data-test-subj="tableHeaderCell_dashboard_average_latency_2"
                                isSorted={false}
                                key="_data_h_dashboard_average_latency_2"
                                onSort={[Function]}
                              >
                                <th
                                  aria-live="polite"
                                  aria-sort="none"
                                  className="euiTableHeaderCell"
                                  data-test-subj="tableHeaderCell_dashboard_average_latency_2"
                                  role="columnheader"
                                  scope="col"
                                  style={
                                    Object {
                                      "width": undefined,
                                    }
                                  }
                                >
                                  <button
                                    className="euiTableHeaderButton"
                                    data-test-subj="tableHeaderSortButton"
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <CellContents
                                      className="euiTableCellContent euiTableCellContent--alignRight"
                                      isSorted={false}
                                      showSortMsg={true}
                                    >
                                      <span
                                        className="euiTableCellContent euiTableCellContent--alignRight"
                                      >
                                        <EuiInnerText>
                                          <EuiI18n
                                            default="{innerText}; {description}"
                                            token="euiTableHeaderCell.titleTextWithDesc"
                                            values={
                                              Object {
                                                "description": undefined,
                                                "innerText": "Average duration (ms)  ",
                                              }
                                            }
                                          >
                                            <span
                                              className="euiTableCellContent__text"
                                              title="Average duration (ms)  "
                                            >
                                              <EuiToolTip
                                                content={
                                                  <EuiText
                                                    size="xs"
                                                  >
                                                    Average latency of traces within a trace group in the selected time range.
                                                  </EuiText>
                                                }
                                                delay="regular"
                                                position="top"
                                              >
                                                <span
                                                  className="euiToolTipAnchor"
                                                  onKeyUp={[Function]}
                                                  onMouseOut={[Function]}
                                                  onMouseOver={[Function]}
                                                >
                                                  <div>
                                                    Average duration (ms)
                                                     
                                                    <EuiIcon
                                                      className="eui-alignTop"
                                                      color="subdued"
                                                      size="s"
                                                      type="questionInCircle"
                                                    >
                                                      <EuiIconQuestionInCircle
                                                        aria-hidden={true}
                                                        className="euiIcon euiIcon--small euiIcon--subdued eui-alignTop"
                                                        focusable="false"
                                                        role="img"
                                                        style={null}
                                                      >
                                                        <svg
                                                          aria-hidden={true}
                                                          className="euiIcon euiIcon--small euiIcon--subdued eui-alignTop"
                                                          focusable="false"
                                                          height={16}
                                                          role="img"
                                                          style={null}
                                                          viewBox="0 0 16 16"
                                                          width={16}
                                                          xmlns="http://www.w3.org/2000/svg"
                                                        >
                                                          <path
                                                            d="M8 14A6 6 0 1 1 8 2a6 6 0 0 1 0 12Zm0-1A5 5 0 1 0 8 3a5 5 0 0 0 0 10Zm-.186-1.065A.785.785 0 0 1 7 11.12c0-.48.34-.82.814-.82.475 0 .809.34.809.82 0 .475-.334.815-.809.815ZM5.9 6.317C5.96 5.168 6.755 4.4 8.048 4.4c1.218 0 2.091.759 2.091 1.8 0 .736-.36 1.304-1.03 1.707-.56.33-.717.56-.717 1.022v.305l-.1.1H7.47l-.1-.1v-.431c-.005-.646.302-1.104.987-1.514.527-.322.708-.59.708-1.047 0-.536-.416-.91-1.05-.91-.652 0-1.064.374-1.112.998l-.1.092H6l-.1-.105Z"
                                                          />
                                                        </svg>
                                                      </EuiIconQuestionInCircle>
                                                    </EuiIcon>
                                                  </div>
                                                  <div>
                                                     
                                                  </div>
                                                </span>
                                              </EuiToolTip>
                                            </span>
                                          </EuiI18n>
                                        </EuiInnerText>
                                      </span>
                                    </CellContents>
                                  </button>
                                </th>
                              </EuiTableHeaderCell>
                              <EuiTableHeaderCell
                                align="right"
                                data-test-subj="tableHeaderCell_24_hour_latency_trend_3"
                                key="_data_h_24_hour_latency_trend_3"
                              >
                                <th
                                  className="euiTableHeaderCell"
                                  data-test-subj="tableHeaderCell_24_hour_latency_trend_3"
                                  role="columnheader"
                                  scope="col"
                                  style={
                                    Object {
                                      "width": undefined,
                                    }
                                  }
                                >
                                  <CellContents
                                    className="euiTableCellContent euiTableCellContent--alignRight"
                                    showSortMsg={false}
                                  >
                                    <span
                                      className="euiTableCellContent euiTableCellContent--alignRight"
                                    >
                                      <EuiInnerText>
                                        <EuiI18n
                                          default="{innerText}; {description}"
                                          token="euiTableHeaderCell.titleTextWithDesc"
                                          values={
                                            Object {
                                              "description": undefined,
                                              "innerText": "24-hour duration trend  ",
                                            }
                                          }
                                        >
                                          <span
                                            className="euiTableCellContent__text"
                                            title="24-hour duration trend  "
                                          >
                                            <EuiToolTip
                                              content={
                                                <EuiText
                                                  size="xs"
                                                >
                                                  24 hour time series view of hourly average, hourly percentile, and hourly range of latency for traces within a trace group.
                                                </EuiText>
                                              }
                                              delay="regular"
                                              position="top"
                                            >
                                              <span
                                                className="euiToolTipAnchor"
                                                onKeyUp={[Function]}
                                                onMouseOut={[Function]}
                                                onMouseOver={[Function]}
                                              >
                                                <div>
                                                  24-hour duration trend
                                                   
                                                  <EuiIcon
                                                    className="eui-alignTop"
                                                    color="subdued"
                                                    size="s"
                                                    type="questionInCircle"
                                                  >
                                                    <EuiIconQuestionInCircle
                                                      aria-hidden={true}
                                                      className="euiIcon euiIcon--small euiIcon--subdued eui-alignTop"
                                                      focusable="false"
                                                      role="img"
                                                      style={null}
                                                    >
                                                      <svg
                                                        aria-hidden={true}
                                                        className="euiIcon euiIcon--small euiIcon--subdued eui-alignTop"
                                                        focusable="false"
                                                        height={16}
                                                        role="img"
                                                        style={null}
                                                        viewBox="0 0 16 16"
                                                        width={16}
                                                        xmlns="http://www.w3.org/2000/svg"
                                                      >
                                                        <path
                                                          d="M8 14A6 6 0 1 1 8 2a6 6 0 0 1 0 12Zm0-1A5 5 0 1 0 8 3a5 5 0 0 0 0 10Zm-.186-1.065A.785.785 0 0 1 7 11.12c0-.48.34-.82.814-.82.475 0 .809.34.809.82 0 .475-.334.815-.809.815ZM5.9 6.317C5.96 5.168 6.755 4.4 8.048 4.4c1.218 0 2.091.759 2.091 1.8 0 .736-.36 1.304-1.03 1.707-.56.33-.717.56-.717 1.022v.305l-.1.1H7.47l-.1-.1v-.431c-.005-.646.302-1.104.987-1.514.527-.322.708-.59.708-1.047 0-.536-.416-.91-1.05-.91-.652 0-1.064.374-1.112.998l-.1.092H6l-.1-.105Z"
                                                        />
                                                      </svg>
                                                    </EuiIconQuestionInCircle>
                                                  </EuiIcon>
                                                </div>
                                                <div>
                                                   
                                                </div>
                                              </span>
                                            </EuiToolTip>
                                          </span>
                                        </EuiI18n>
                                      </EuiInnerText>
                                    </span>
                                  </CellContents>
                                </th>
                              </EuiTableHeaderCell>
                              <EuiTableHeaderCell
                                align="right"
                                data-test-subj="tableHeaderCell_dashboard_error_rate_4"
                                isSorted={false}
                                key="_data_h_dashboard_error_rate_4"
                                onSort={[Function]}
                              >
                                <th
                                  aria-live="polite"
                                  aria-sort="none"
                                  className="euiTableHeaderCell"
                                  data-test-subj="tableHeaderCell_dashboard_error_rate_4"
                                  role="columnheader"
                                  scope="col"
                                  style={
                                    Object {
                                      "width": undefined,
                                    }
                                  }
                                >
                                  <button
                                    className="euiTableHeaderButton"
                                    data-test-subj="tableHeaderSortButton"
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <CellContents
                                      className="euiTableCellContent euiTableCellContent--alignRight"
                                      isSorted={false}
                                      showSortMsg={true}
                                    >
                                      <span
                                        className="euiTableCellContent euiTableCellContent--alignRight"
                                      >
                                        <EuiInnerText>
                                          <EuiI18n
                                            default="{innerText}; {description}"
                                            token="euiTableHeaderCell.titleTextWithDesc"
                                            values={
                                              Object {
                                                "description": undefined,
                                                "innerText": "Error rate  ",
                                              }
                                            }
                                          >
                                            <span
                                              className="euiTableCellContent__text"
                                              title="Error rate  "
                                            >
                                              <EuiToolTip
                                                content={
                                                  <EuiText
                                                    size="xs"
                                                  >
                                                    Error rate based on count of trace errors within a trace group in the selected time range.
                                                  </EuiText>
                                                }
                                                delay="regular"
                                                position="top"
                                              >
                                                <span
                                                  className="euiToolTipAnchor"
                                                  onKeyUp={[Function]}
                                                  onMouseOut={[Function]}
                                                  onMouseOver={[Function]}
                                                >
                                                  <div>
                                                    Error rate
                                                     
                                                    <EuiIcon
                                                      className="eui-alignTop"
                                                      color="subdued"
                                                      size="s"
                                                      type="questionInCircle"
                                                    >
                                                      <EuiIconQuestionInCircle
                                                        aria-hidden={true}
                                                        className="euiIcon euiIcon--small euiIcon--subdued eui-alignTop"
                                                        focusable="false"
                                                        role="img"
                                                        style={null}
                                                      >
                                                        <svg
                                                          aria-hidden={true}
                                                          className="euiIcon euiIcon--small euiIcon--subdued eui-alignTop"
                                                          focusable="false"
                                                          height={16}
                                                          role="img"
                                                          style={null}
                                                          viewBox="0 0 16 16"
                                                          width={16}
                                                          xmlns="http://www.w3.org/2000/svg"
                                                        >
                                                          <path
                                                            d="M8 14A6 6 0 1 1 8 2a6 6 0 0 1 0 12Zm0-1A5 5 0 1 0 8 3a5 5 0 0 0 0 10Zm-.186-1.065A.785.785 0 0 1 7 11.12c0-.48.34-.82.814-.82.475 0 .809.34.809.82 0 .475-.334.815-.809.815ZM5.9 6.317C5.96 5.168 6.755 4.4 8.048 4.4c1.218 0 2.091.759 2.091 1.8 0 .736-.36 1.304-1.03 1.707-.56.33-.717.56-.717 1.022v.305l-.1.1H7.47l-.1-.1v-.431c-.005-.646.302-1.104.987-1.514.527-.322.708-.59.708-1.047 0-.536-.416-.91-1.05-.91-.652 0-1.064.374-1.112.998l-.1.092H6l-.1-.105Z"
                                                          />
                                                        </svg>
                                                      </EuiIconQuestionInCircle>
                                                    </EuiIcon>
                                                  </div>
                                                  <div>
                                                     
                                                  </div>
                                                </span>
                                              </EuiToolTip>
                                            </span>
                                          </EuiI18n>
                                        </EuiInnerText>
                                      </span>
                                    </CellContents>
                                  </button>
                                </th>
                              </EuiTableHeaderCell>
                              <EuiTableHeaderCell
                                align="right"
                                data-test-subj="tableHeaderCell_dashboard_traces_5"
                                isSorted={false}
                                key="_data_h_dashboard_traces_5"
                                onSort={[Function]}
                              >
                                <th
                                  aria-live="polite"
                                  aria-sort="none"
                                  className="euiTableHeaderCell"
                                  data-test-subj="tableHeaderCell_dashboard_traces_5"
                                  role="columnheader"
                                  scope="col"
                                  style={
                                    Object {
                                      "width": undefined,
                                    }
                                  }
                                >
                                  <button
                                    className="euiTableHeaderButton"
                                    data-test-subj="tableHeaderSortButton"
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <CellContents
                                      className="euiTableCellContent euiTableCellContent--alignRight"
                                      isSorted={false}
                                      showSortMsg={true}
                                    >
                                      <span
                                        className="euiTableCellContent euiTableCellContent--alignRight"
                                      >
                                        <EuiInnerText>
                                          <EuiI18n
                                            default="{innerText}; {description}"
                                            token="euiTableHeaderCell.titleTextWithDesc"
                                            values={
                                              Object {
                                                "description": undefined,
                                                "innerText": "Traces  ",
                                              }
                                            }
                                          >
                                            <span
                                              className="euiTableCellContent__text"
                                              title="Traces  "
                                            >
                                              <EuiToolTip
                                                content={
                                                  <EuiText
                                                    size="xs"
                                                  >
                                                    Count of traces with unique trace identifiers in the selected time range.
                                                  </EuiText>
                                                }
                                                delay="regular"
                                                position="top"
                                              >
                                                <span
                                                  className="euiToolTipAnchor"
                                                  onKeyUp={[Function]}
                                                  onMouseOut={[Function]}
                                                  onMouseOver={[Function]}
                                                >
                                                  <div>
                                                    Traces
                                                     
                                                    <EuiIcon
                                                      className="eui-alignTop"
                                                      color="subdued"
                                                      size="s"
                                                      type="questionInCircle"
                                                    >
                                                      <EuiIconQuestionInCircle
                                                        aria-hidden={true}
                                                        className="euiIcon euiIcon--small euiIcon--subdued eui-alignTop"
                                                        focusable="false"
                                                        role="img"
                                                        style={null}
                                                      >
                                                        <svg
                                                          aria-hidden={true}
                                                          className="euiIcon euiIcon--small euiIcon--subdued eui-alignTop"
                                                          focusable="false"
                                                          height={16}
                                                          role="img"
                                                          style={null}
                                                          viewBox="0 0 16 16"
                                                          width={16}
                                                          xmlns="http://www.w3.org/2000/svg"
                                                        >
                                                          <path
                                                            d="M8 14A6 6 0 1 1 8 2a6 6 0 0 1 0 12Zm0-1A5 5 0 1 0 8 3a5 5 0 0 0 0 10Zm-.186-1.065A.785.785 0 0 1 7 11.12c0-.48.34-.82.814-.82.475 0 .809.34.809.82 0 .475-.334.815-.809.815ZM5.9 6.317C5.96 5.168 6.755 4.4 8.048 4.4c1.218 0 2.091.759 2.091 1.8 0 .736-.36 1.304-1.03 1.707-.56.33-.717.56-.717 1.022v.305l-.1.1H7.47l-.1-.1v-.431c-.005-.646.302-1.104.987-1.514.527-.322.708-.59.708-1.047 0-.536-.416-.91-1.05-.91-.652 0-1.064.374-1.112.998l-.1.092H6l-.1-.105Z"
                                                          />
                                                        </svg>
                                                      </EuiIconQuestionInCircle>
                                                    </EuiIcon>
                                                  </div>
                                                  <div>
                                                     
                                                  </div>
                                                </span>
                                              </EuiToolTip>
                                            </span>
                                          </EuiI18n>
                                        </EuiInnerText>
                                      </span>
                                    </CellContents>
                                  </button>
                                </th>
                              </EuiTableHeaderCell>
                            </tr>
                          </thead>
                        </EuiTableHeader>
                        <EuiTableBody>
                          <tbody>
                            <EuiTableRow>
                              <tr
                                className="euiTableRow"
                              >
                                <EuiTableRowCell
                                  align="center"
                                  colSpan={6}
                                  isMobileFullWidth={true}
                                >
                                  <td
                                    className="euiTableRowCell euiTableRowCell--isMobileFullWidth"
                                    colSpan={6}
                                    style={
                                      Object {
                                        "width": undefined,
                                      }
                                    }
                                  >
                                    <div
                                      className="euiTableCellContent euiTableCellContent--alignCenter"
                                    >
                                      <span
                                        className="euiTableCellContent__text"
                                      >
                                        No items found
                                      </span>
                                    </div>
                                  </td>
                                </EuiTableRowCell>
                              </tr>
                            </EuiTableRow>
                          </tbody>
                        </EuiTableBody>
                      </table>
                    </EuiTable>
                  </div>
                </div>
              </EuiBasicTable>
            </EuiInMemoryTable>
          </div>
        </EuiPanel>
      </DashboardTable>
      <EuiSpacer>
        <div
          className="euiSpacer euiSpacer--l"
        />
      </EuiSpacer>
      <EuiFlexGroup
        alignItems="baseline"
      >
        <div
          className="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--alignItemsBaseline euiFlexGroup--directionRow euiFlexGroup--responsive"
        >
          <EuiFlexItem>
            <div
              className="euiFlexItem"
            >
              <EuiFlexGroup
                direction="row"
              >
                <div
                  className="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--directionRow euiFlexGroup--responsive"
                >
                  <EuiFlexItem>
                    <div
                      className="euiFlexItem"
                    >
                      <ErrorRatePlt
                        isErrorRateTrendLoading={true}
                        items={
                          Object {
                            "fixedInterval": "1h",
                            "items": Array [],
                          }
                        }
                        setEndTime={[MockFunction]}
                        setStartTime={[MockFunction]}
                      >
                        <EuiPanel
                          style={
                            Object {
                              "maxHeight": 560,
                              "minHeight": 308,
                              "minWidth": 433,
                            }
                          }
                        >
                          <div
                            className="euiPanel euiPanel--paddingMedium euiPanel--borderRadiusMedium euiPanel--plain euiPanel--hasShadow"
                            style={
                              Object {
                                "maxHeight": 560,
                                "minHeight": 308,
                                "minWidth": 433,
                              }
                            }
                          >
                            <EuiFlexGroup
                              gutterSize="xs"
                              justifyContent="spaceBetween"
                            >
                              <div
                                className="euiFlexGroup euiFlexGroup--gutterExtraSmall euiFlexGroup--justifyContentSpaceBetween euiFlexGroup--directionRow euiFlexGroup--responsive"
                              >
                                <PanelTitle
                                  title="Trace error rate over time"
                                >
                                  <EuiText
                                    size="m"
                                  >
                                    <div
                                      className="euiText euiText--medium"
                                    >
                                      <span
                                        className="panel-title"
                                      >
                                        Trace error rate over time
                                      </span>
                                    </div>
                                  </EuiText>
                                </PanelTitle>
                                <EuiButtonGroup
                                  buttonSize="s"
                                  color="text"
                                  onChange={[Function]}
                                >
                                  <fieldset
                                    className="euiButtonGroup euiButtonGroup--small euiButtonGroup--text"
                                    disabled={false}
                                  >
                                    <EuiScreenReaderOnly>
                                      <legend
                                        className="euiScreenReaderOnly"
                                      />
                                    </EuiScreenReaderOnly>
                                    <div
                                      className="euiButtonGroup__buttons"
                                    />
                                  </fieldset>
                                </EuiButtonGroup>
                              </div>
                            </EuiFlexGroup>
                            <div
                              className="center-loading-div"
                            >
                              <EuiLoadingChart
                                size="l"
                              >
                                <span
                                  className="euiLoadingChart euiLoadingChart--large"
                                >
                                  <span
                                    className="euiLoadingChart__bar"
                                  />
                                  <span
                                    className="euiLoadingChart__bar"
                                  />
                                  <span
                                    className="euiLoadingChart__bar"
                                  />
                                  <span
                                    className="euiLoadingChart__bar"
                                  />
                                </span>
                              </EuiLoadingChart>
                            </div>
                          </div>
                        </EuiPanel>
                      </ErrorRatePlt>
                    </div>
                  </EuiFlexItem>
                  <EuiFlexItem>
                    <div
                      className="euiFlexItem"
                    >
                      <ThroughputPlt
                        isThroughputTrendLoading={true}
                        items={
                          Object {
                            "fixedInterval": "1h",
                            "items": Array [],
                          }
                        }
                        setEndTime={[MockFunction]}
                        setStartTime={[MockFunction]}
                      >
                        <EuiPanel
                          style={
                            Object {
                              "maxHeight": 560,
                              "minHeight": 308,
                              "minWidth": 433,
                            }
                          }
                        >
                          <div
                            className="euiPanel euiPanel--paddingMedium euiPanel--borderRadiusMedium euiPanel--plain euiPanel--hasShadow"
                            style={
                              Object {
                                "maxHeight": 560,
                                "minHeight": 308,
                                "minWidth": 433,
                              }
                            }
                          >
                            <EuiFlexGroup
                              gutterSize="xs"
                              justifyContent="spaceBetween"
                            >
                              <div
                                className="euiFlexGroup euiFlexGroup--gutterExtraSmall euiFlexGroup--justifyContentSpaceBetween euiFlexGroup--directionRow euiFlexGroup--responsive"
                              >
                                <PanelTitle
                                  title="Traces over time"
                                >
                                  <EuiText
                                    size="m"
                                  >
                                    <div
                                      className="euiText euiText--medium"
                                    >
                                      <span
                                        className="panel-title"
                                      >
                                        Traces over time
                                      </span>
                                    </div>
                                  </EuiText>
                                </PanelTitle>
                                <EuiButtonGroup
                                  buttonSize="s"
                                  color="text"
                                  onChange={[Function]}
                                >
                                  <fieldset
                                    className="euiButtonGroup euiButtonGroup--small euiButtonGroup--text"
                                    disabled={false}
                                  >
                                    <EuiScreenReaderOnly>
                                      <legend
                                        className="euiScreenReaderOnly"
                                      />
                                    </EuiScreenReaderOnly>
                                    <div
                                      className="euiButtonGroup__buttons"
                                    />
                                  </fieldset>
                                </EuiButtonGroup>
                              </div>
                            </EuiFlexGroup>
                            <div
                              className="center-loading-div"
                            >
                              <EuiLoadingChart
                                size="l"
                              >
                                <span
                                  className="euiLoadingChart euiLoadingChart--large"
                                >
                                  <span
                                    className="euiLoadingChart__bar"
                                  />
                                  <span
                                    className="euiLoadingChart__bar"
                                  />
                                  <span
                                    className="euiLoadingChart__bar"
                                  />
                                  <span
                                    className="euiLoadingChart__bar"
                                  />
                                </span>
                              </EuiLoadingChart>
                            </div>
                          </div>
                        </EuiPanel>
                      </ThroughputPlt>
                    </div>
                  </EuiFlexItem>
                </div>
              </EuiFlexGroup>
            </div>
          </EuiFlexItem>
        </div>
      </EuiFlexGroup>
    </div>
  </DashboardContent>
</Dashboard>
`;

exports[`Dashboard component renders empty dashboard 1`] = `
<Dashboard
  appConfigs={Array []}
  attributesFilterFields={Array []}
  childBreadcrumbs={
    Array [
      Object {
        "href": "#/trace_analytics/home",
        "text": "Trace analytics",
      },
      Object {
        "href": "#/trace_analytics/home",
        "text": "Dashboard",
      },
    ]
  }
  chrome={
    Object {
      "addApplicationClass": [MockFunction],
      "docTitle": Object {
        "change": [MockFunction],
        "reset": [MockFunction],
      },
      "getApplicationClasses$": [MockFunction],
      "getBadge$": [MockFunction],
      "getBreadcrumbs$": [MockFunction],
      "getBreadcrumbsEnricher$": [MockFunction],
      "getCustomNavLink$": [MockFunction],
      "getHeaderComponent": [MockFunction],
      "getHeaderVariant$": [MockFunction],
      "getHelpExtension$": [MockFunction],
      "getIsNavDrawerLocked$": [MockFunction],
      "getIsVisible$": [MockFunction],
      "globalSearch": Object {
        "getAllSearchCommands": [MockFunction],
      },
      "logos": Object {
        "AnimatedMark": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_spinner_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_spinner_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_spinner_on_light.svg",
        },
        "Application": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_dashboards_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_dashboards_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_dashboards_on_light.svg",
        },
        "CenterMark": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_center_mark_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_center_mark_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_center_mark_on_light.svg",
        },
        "Mark": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_mark_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_mark_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_mark_on_light.svg",
        },
        "OpenSearch": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_on_light.svg",
        },
        "colorScheme": "light",
      },
      "navControls": Object {
        "getCenter$": [MockFunction],
        "getLeft$": [MockFunction],
        "getLeftBottom$": [MockFunction],
        "getPrimaryHeaderRight$": [MockFunction],
        "getRight$": [MockFunction],
        "registerCenter": [MockFunction],
        "registerLeft": [MockFunction],
        "registerLeftBottom": [MockFunction],
        "registerPrimaryHeaderRight": [MockFunction],
        "registerRight": [MockFunction],
      },
      "navGroup": Object {
        "getCurrentNavGroup$": [MockFunction],
        "getNavGroupEnabled": [MockFunction] {
          "calls": Array [
            Array [],
            Array [],
            Array [],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
            Object {
              "type": "return",
              "value": undefined,
            },
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        },
        "getNavGroupsMap$": [MockFunction],
        "setCurrentNavGroup": [MockFunction],
      },
      "navLinks": Object {
        "enableForcedAppSwitcherNavigation": [MockFunction],
        "get": [MockFunction],
        "getAll": [MockFunction],
        "getForceAppSwitcherNavigation$": [MockFunction],
        "getNavLinks$": [MockFunction],
        "has": [MockFunction],
        "showOnly": [MockFunction],
        "update": [MockFunction],
      },
      "recentlyAccessed": Object {
        "add": [MockFunction],
        "get": [MockFunction],
        "get$": [MockFunction],
      },
      "removeApplicationClass": [MockFunction],
      "setAppTitle": [MockFunction],
      "setBadge": [MockFunction],
      "setBreadcrumbs": [MockFunction] {
        "calls": Array [
          Array [
            Array [
              undefined,
              Object {
                "href": "#/trace_analytics/home",
                "text": "Trace analytics",
              },
              Object {
                "href": "#/trace_analytics/home",
                "text": "Dashboard",
              },
            ],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
      "setBreadcrumbsEnricher": [MockFunction],
      "setCustomNavLink": [MockFunction],
      "setHeaderVariant": [MockFunction],
      "setHelpExtension": [MockFunction],
      "setHelpSupportUrl": [MockFunction],
      "setIsVisible": [MockFunction],
    }
  }
  dataPrepperIndicesExist={true}
  dataSourceMDSId={
    Array [
      Object {
        "id": "",
        "label": "",
      },
    ]
  }
  endTime="now"
  filters={Array []}
  http={[MockFunction]}
  mode="data_prepper"
  modes={
    Array [
      Object {
        "id": "jaeger",
        "title": "Jaeger",
      },
      Object {
        "id": "data_prepper",
        "title": "Data Prepper",
      },
    ]
  }
  page="dashboard"
  parentBreadcrumbs={
    Array [
      Object {
        "href": "test#/",
        "text": "test",
      },
    ]
  }
  query=""
  setEndTime={[MockFunction]}
  setFilters={
    [MockFunction] {
      "calls": Array [
        Array [
          Array [],
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  setQuery={[MockFunction]}
  setStartTime={[MockFunction]}
  startTime="now-5m"
>
  <EuiTitle
    size="l"
  >
    <h2
      className="euiTitle euiTitle--large"
      style={
        Object {
          "fontWeight": 430,
        }
      }
    >
      Dashboard
    </h2>
  </EuiTitle>
  <DataSourcePicker
    modes={
      Array [
        Object {
          "id": "jaeger",
          "title": "Jaeger",
        },
        Object {
          "id": "data_prepper",
          "title": "Data Prepper",
        },
      ]
    }
    selectedMode="data_prepper"
  >
    <EuiPopover
      anchorClassName="eui-textTruncate"
      anchorPosition="downCenter"
      button={
        <EuiSmallButtonEmpty
          className="dscIndexPattern__triggerButton"
          color="text"
          data-test-subj="indexPattern-switch-link"
          flush="left"
          iconSide="right"
          iconType="arrowDown"
          onClick={[Function]}
          title="data_prepper"
        >
          Data Prepper
        </EuiSmallButtonEmpty>
      }
      className="eui-textTruncate"
      closePopover={[Function]}
      display="inlineBlock"
      hasArrow={true}
      isOpen={false}
      ownFocus={true}
      panelPaddingSize="s"
    >
      <div
        className="euiPopover euiPopover--anchorDownCenter eui-textTruncate"
      >
        <div
          className="euiPopover__anchor eui-textTruncate"
        >
          <EuiSmallButtonEmpty
            className="dscIndexPattern__triggerButton"
            color="text"
            data-test-subj="indexPattern-switch-link"
            flush="left"
            iconSide="right"
            iconType="arrowDown"
            onClick={[Function]}
            title="data_prepper"
          >
            <EuiButtonEmpty
              className="dscIndexPattern__triggerButton"
              color="text"
              data-test-subj="indexPattern-switch-link"
              flush="left"
              iconSide="right"
              iconType="arrowDown"
              onClick={[Function]}
              size="s"
              title="data_prepper"
            >
              <button
                className="euiButtonEmpty euiButtonEmpty--text euiButtonEmpty--small euiButtonEmpty--flushLeft dscIndexPattern__triggerButton"
                data-test-subj="indexPattern-switch-link"
                disabled={false}
                onClick={[Function]}
                title="data_prepper"
                type="button"
              >
                <EuiButtonContent
                  className="euiButtonEmpty__content"
                  iconGap="m"
                  iconSide="right"
                  iconSize="m"
                  iconType="arrowDown"
                  textProps={
                    Object {
                      "className": "euiButtonEmpty__text",
                    }
                  }
                >
                  <span
                    className="euiButtonContent euiButtonContent--iconRight euiButtonEmpty__content"
                  >
                    <EuiIcon
                      className="euiButtonContent__icon"
                      color="inherit"
                      size="m"
                      type="arrowDown"
                    >
                      <EuiIconBeaker
                        aria-hidden={true}
                        className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonContent__icon"
                        focusable="false"
                        role="img"
                        style={null}
                      >
                        <svg
                          aria-hidden={true}
                          className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonContent__icon"
                          focusable="false"
                          height={16}
                          role="img"
                          style={null}
                          viewBox="0 0 16 16"
                          width={16}
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M5.277 10.088c.02.014.04.03.057.047.582.55 1.134.812 1.666.812.586 0 1.84-.293 3.713-.88L9 6.212V2H7v4.212l-1.723 3.876Zm-.438.987L3.539 14h8.922l-1.32-2.969C9.096 11.677 7.733 12 7 12c-.74 0-1.463-.315-2.161-.925ZM6 2H5V1h6v1h-1v4l3.375 7.594A1 1 0 0 1 12.461 15H3.54a1 1 0 0 1-.914-1.406L6 6V2Z"
                          />
                        </svg>
                      </EuiIconBeaker>
                    </EuiIcon>
                    <span
                      className="euiButtonEmpty__text"
                    >
                      Data Prepper
                    </span>
                  </span>
                </EuiButtonContent>
              </button>
            </EuiButtonEmpty>
          </EuiSmallButtonEmpty>
        </div>
      </div>
    </EuiPopover>
    <CustomIndexFlyout
      isFlyoutVisible={false}
      setIsFlyoutVisible={[Function]}
    >
      <div />
    </CustomIndexFlyout>
  </DataSourcePicker>
  <DashboardContent
    appConfigs={Array []}
    attributesFilterFields={Array []}
    childBreadcrumbs={
      Array [
        Object {
          "href": "#/trace_analytics/home",
          "text": "Trace analytics",
        },
        Object {
          "href": "#/trace_analytics/home",
          "text": "Dashboard",
        },
      ]
    }
    chrome={
      Object {
        "addApplicationClass": [MockFunction],
        "docTitle": Object {
          "change": [MockFunction],
          "reset": [MockFunction],
        },
        "getApplicationClasses$": [MockFunction],
        "getBadge$": [MockFunction],
        "getBreadcrumbs$": [MockFunction],
        "getBreadcrumbsEnricher$": [MockFunction],
        "getCustomNavLink$": [MockFunction],
        "getHeaderComponent": [MockFunction],
        "getHeaderVariant$": [MockFunction],
        "getHelpExtension$": [MockFunction],
        "getIsNavDrawerLocked$": [MockFunction],
        "getIsVisible$": [MockFunction],
        "globalSearch": Object {
          "getAllSearchCommands": [MockFunction],
        },
        "logos": Object {
          "AnimatedMark": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_spinner_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_spinner_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_spinner_on_light.svg",
          },
          "Application": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_dashboards_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_dashboards_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_dashboards_on_light.svg",
          },
          "CenterMark": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_center_mark_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_center_mark_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_center_mark_on_light.svg",
          },
          "Mark": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_mark_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_mark_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_mark_on_light.svg",
          },
          "OpenSearch": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_on_light.svg",
          },
          "colorScheme": "light",
        },
        "navControls": Object {
          "getCenter$": [MockFunction],
          "getLeft$": [MockFunction],
          "getLeftBottom$": [MockFunction],
          "getPrimaryHeaderRight$": [MockFunction],
          "getRight$": [MockFunction],
          "registerCenter": [MockFunction],
          "registerLeft": [MockFunction],
          "registerLeftBottom": [MockFunction],
          "registerPrimaryHeaderRight": [MockFunction],
          "registerRight": [MockFunction],
        },
        "navGroup": Object {
          "getCurrentNavGroup$": [MockFunction],
          "getNavGroupEnabled": [MockFunction] {
            "calls": Array [
              Array [],
              Array [],
              Array [],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": undefined,
              },
              Object {
                "type": "return",
                "value": undefined,
              },
              Object {
                "type": "return",
                "value": undefined,
              },
            ],
          },
          "getNavGroupsMap$": [MockFunction],
          "setCurrentNavGroup": [MockFunction],
        },
        "navLinks": Object {
          "enableForcedAppSwitcherNavigation": [MockFunction],
          "get": [MockFunction],
          "getAll": [MockFunction],
          "getForceAppSwitcherNavigation$": [MockFunction],
          "getNavLinks$": [MockFunction],
          "has": [MockFunction],
          "showOnly": [MockFunction],
          "update": [MockFunction],
        },
        "recentlyAccessed": Object {
          "add": [MockFunction],
          "get": [MockFunction],
          "get$": [MockFunction],
        },
        "removeApplicationClass": [MockFunction],
        "setAppTitle": [MockFunction],
        "setBadge": [MockFunction],
        "setBreadcrumbs": [MockFunction] {
          "calls": Array [
            Array [
              Array [
                undefined,
                Object {
                  "href": "#/trace_analytics/home",
                  "text": "Trace analytics",
                },
                Object {
                  "href": "#/trace_analytics/home",
                  "text": "Dashboard",
                },
              ],
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        },
        "setBreadcrumbsEnricher": [MockFunction],
        "setCustomNavLink": [MockFunction],
        "setHeaderVariant": [MockFunction],
        "setHelpExtension": [MockFunction],
        "setHelpSupportUrl": [MockFunction],
        "setIsVisible": [MockFunction],
      }
    }
    dataPrepperIndicesExist={true}
    dataSourceMDSId={
      Array [
        Object {
          "id": "",
          "label": "",
        },
      ]
    }
    endTime="now"
    filters={Array []}
    http={[MockFunction]}
    mode="data_prepper"
    modes={
      Array [
        Object {
          "id": "jaeger",
          "title": "Jaeger",
        },
        Object {
          "id": "data_prepper",
          "title": "Data Prepper",
        },
      ]
    }
    page="dashboard"
    parentBreadcrumbs={
      Array [
        Object {
          "href": "test#/",
          "text": "test",
        },
      ]
    }
    query=""
    setEndTime={[MockFunction]}
    setFilters={
      [MockFunction] {
        "calls": Array [
          Array [
            Array [],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    setQuery={[MockFunction]}
    setStartTime={[MockFunction]}
    startTime="now-5m"
  >
    <div>
      <DashboardTable
        addFilter={[Function]}
        addPercentileFilter={[Function]}
        filters={Array []}
        items={Array []}
        loading={true}
        page="dashboard"
        setRedirect={[Function]}
      >
        <EuiPanel>
          <div
            className="euiPanel euiPanel--paddingMedium euiPanel--borderRadiusMedium euiPanel--plain euiPanel--hasShadow"
          >
            <EuiFlexGroup
              alignItems="center"
              gutterSize="s"
            >
              <div
                className="euiFlexGroup euiFlexGroup--gutterSmall euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow euiFlexGroup--responsive"
              >
                <EuiFlexItem
                  grow={10}
                >
                  <div
                    className="euiFlexItem euiFlexItem--flexGrow10"
                  >
                    <PanelTitle
                      title="Latency by trace group"
                      totalItems={0}
                    >
                      <EuiText
                        size="m"
                      >
                        <div
                          className="euiText euiText--medium"
                        >
                          <span
                            className="panel-title"
                          >
                            Latency by trace group
                          </span>
                          <span
                            className="panel-title-count"
                          >
                             (0)
                          </span>
                        </div>
                      </EuiText>
                    </PanelTitle>
                  </div>
                </EuiFlexItem>
                <EuiFlexItem
                  grow={false}
                >
                  <div
                    className="euiFlexItem euiFlexItem--flexGrowZero"
                  >
                    <EuiLink
                      data-test-subj="dashboard-table-percentile-button-1"
                      onClick={[Function]}
                    >
                      <button
                        className="euiLink euiLink--primary"
                        data-test-subj="dashboard-table-percentile-button-1"
                        disabled={false}
                        onClick={[Function]}
                        type="button"
                      >
                        <EuiText
                          size="xs"
                        >
                          <div
                            className="euiText euiText--extraSmall"
                          >
                            <span
                              style={
                                Object {
                                  "color": "#957ac9",
                                }
                              }
                            >
                              □
                            </span>
                             &lt; 95 percentile
                          </div>
                        </EuiText>
                      </button>
                    </EuiLink>
                  </div>
                </EuiFlexItem>
                <EuiFlexItem
                  grow={1}
                >
                  <div
                    className="euiFlexItem euiFlexItem--flexGrow1"
                  />
                </EuiFlexItem>
                <EuiFlexItem
                  grow={false}
                >
                  <div
                    className="euiFlexItem euiFlexItem--flexGrowZero"
                  >
                    <EuiLink
                      data-test-subj="dashboard-table-percentile-button-2"
                      onClick={[Function]}
                    >
                      <button
                        className="euiLink euiLink--primary"
                        data-test-subj="dashboard-table-percentile-button-2"
                        disabled={false}
                        onClick={[Function]}
                        type="button"
                      >
                        <EuiText
                          size="xs"
                        >
                          <div
                            className="euiText euiText--extraSmall"
                          >
                            <span
                              style={
                                Object {
                                  "color": "#957ac9",
                                }
                              }
                            >
                              ■
                            </span>
                             &gt;= 95 percentile
                          </div>
                        </EuiText>
                      </button>
                    </EuiLink>
                  </div>
                </EuiFlexItem>
                <EuiFlexItem
                  grow={1}
                >
                  <div
                    className="euiFlexItem euiFlexItem--flexGrow1"
                  />
                </EuiFlexItem>
              </div>
            </EuiFlexGroup>
            <EuiSpacer
              size="m"
            >
              <div
                className="euiSpacer euiSpacer--m"
              />
            </EuiSpacer>
            <EuiHorizontalRule
              margin="none"
            >
              <hr
                className="euiHorizontalRule euiHorizontalRule--full"
              />
            </EuiHorizontalRule>
            <EuiInMemoryTable
              columns={
                Array [
                  Object {
                    "align": "left",
                    "field": "dashboard_trace_group_name",
                    "name": <EuiToolTip
                      content={
                        <EuiText
                          size="xs"
                        >
                          Traces of all requests that share a common API and operation at the start of distributed tracing instrumentation.
                        </EuiText>
                      }
                      delay="regular"
                      position="top"
                    >
                      <React.Fragment>
                        <div>
                          Trace group name
                           
                          <EuiIcon
                            className="eui-alignTop"
                            color="subdued"
                            size="s"
                            type="questionInCircle"
                          />
                        </div>
                        <div>
                           
                        </div>
                      </React.Fragment>
                    </EuiToolTip>,
                    "render": [Function],
                    "sortable": true,
                  },
                  Object {
                    "align": "center",
                    "field": "dashboard_latency_variance",
                    "name": <React.Fragment>
                      <EuiToolTip
                        content={
                          <EuiText
                            size="xs"
                          >
                            Range of latencies for traces within a trace group in the selected time range.
                          </EuiText>
                        }
                        delay="regular"
                        position="top"
                      >
                        <span>
                          Duration variance (ms)
                           
                          <EuiIcon
                            className="eui-alignTop"
                            color="subdued"
                            size="s"
                            type="questionInCircle"
                          />
                        </span>
                      </EuiToolTip>
                      <EuiText
                        color="subdued"
                        size="xs"
                      >
                        
                      </EuiText>
                    </React.Fragment>,
                    "render": [Function],
                    "sortable": [Function],
                    "width": "300px",
                  },
                  Object {
                    "align": "right",
                    "dataType": "number",
                    "field": "dashboard_average_latency",
                    "name": <EuiToolTip
                      content={
                        <EuiText
                          size="xs"
                        >
                          Average latency of traces within a trace group in the selected time range.
                        </EuiText>
                      }
                      delay="regular"
                      position="top"
                    >
                      <React.Fragment>
                        <div>
                          Average duration (ms)
                           
                          <EuiIcon
                            className="eui-alignTop"
                            color="subdued"
                            size="s"
                            type="questionInCircle"
                          />
                        </div>
                        <div>
                           
                        </div>
                      </React.Fragment>
                    </EuiToolTip>,
                    "render": [Function],
                    "sortable": true,
                  },
                  Object {
                    "align": "right",
                    "field": "24_hour_latency_trend",
                    "name": <EuiToolTip
                      content={
                        <EuiText
                          size="xs"
                        >
                          24 hour time series view of hourly average, hourly percentile, and hourly range of latency for traces within a trace group.
                        </EuiText>
                      }
                      delay="regular"
                      position="top"
                    >
                      <React.Fragment>
                        <div>
                          24-hour duration trend
                           
                          <EuiIcon
                            className="eui-alignTop"
                            color="subdued"
                            size="s"
                            type="questionInCircle"
                          />
                        </div>
                        <div>
                           
                        </div>
                      </React.Fragment>
                    </EuiToolTip>,
                    "render": [Function],
                    "sortable": false,
                  },
                  Object {
                    "align": "right",
                    "field": "dashboard_error_rate",
                    "name": <EuiToolTip
                      content={
                        <EuiText
                          size="xs"
                        >
                          Error rate based on count of trace errors within a trace group in the selected time range.
                        </EuiText>
                      }
                      delay="regular"
                      position="top"
                    >
                      <React.Fragment>
                        <div>
                          Error rate
                           
                          <EuiIcon
                            className="eui-alignTop"
                            color="subdued"
                            size="s"
                            type="questionInCircle"
                          />
                        </div>
                        <div>
                           
                        </div>
                      </React.Fragment>
                    </EuiToolTip>,
                    "render": [Function],
                    "sortable": true,
                  },
                  Object {
                    "align": "right",
                    "field": "dashboard_traces",
                    "name": <EuiToolTip
                      content={
                        <EuiText
                          size="xs"
                        >
                          Count of traces with unique trace identifiers in the selected time range.
                        </EuiText>
                      }
                      delay="regular"
                      position="top"
                    >
                      <React.Fragment>
                        <div>
                          Traces
                           
                          <EuiIcon
                            className="eui-alignTop"
                            color="subdued"
                            size="s"
                            type="questionInCircle"
                          />
                        </div>
                        <div>
                           
                        </div>
                      </React.Fragment>
                    </EuiToolTip>,
                    "render": [Function],
                    "sortable": true,
                  },
                ]
              }
              data-test-subj="dashboardTable"
              items={Array []}
              loading={true}
              onTableChange={[Function]}
              pagination={
                Object {
                  "initialPageSize": 10,
                  "pageSizeOptions": Array [
                    5,
                    10,
                    15,
                  ],
                }
              }
              responsive={true}
              sorting={
                Object {
                  "sort": Object {
                    "direction": "desc",
                    "field": "dashboard_latency_variance",
                  },
                }
              }
              tableLayout="auto"
            >
              <EuiBasicTable
                columns={
                  Array [
                    Object {
                      "align": "left",
                      "field": "dashboard_trace_group_name",
                      "name": <EuiToolTip
                        content={
                          <EuiText
                            size="xs"
                          >
                            Traces of all requests that share a common API and operation at the start of distributed tracing instrumentation.
                          </EuiText>
                        }
                        delay="regular"
                        position="top"
                      >
                        <React.Fragment>
                          <div>
                            Trace group name
                             
                            <EuiIcon
                              className="eui-alignTop"
                              color="subdued"
                              size="s"
                              type="questionInCircle"
                            />
                          </div>
                          <div>
                             
                          </div>
                        </React.Fragment>
                      </EuiToolTip>,
                      "render": [Function],
                      "sortable": true,
                    },
                    Object {
                      "align": "center",
                      "field": "dashboard_latency_variance",
                      "name": <React.Fragment>
                        <EuiToolTip
                          content={
                            <EuiText
                              size="xs"
                            >
                              Range of latencies for traces within a trace group in the selected time range.
                            </EuiText>
                          }
                          delay="regular"
                          position="top"
                        >
                          <span>
                            Duration variance (ms)
                             
                            <EuiIcon
                              className="eui-alignTop"
                              color="subdued"
                              size="s"
                              type="questionInCircle"
                            />
                          </span>
                        </EuiToolTip>
                        <EuiText
                          color="subdued"
                          size="xs"
                        >
                          
                        </EuiText>
                      </React.Fragment>,
                      "render": [Function],
                      "sortable": [Function],
                      "width": "300px",
                    },
                    Object {
                      "align": "right",
                      "dataType": "number",
                      "field": "dashboard_average_latency",
                      "name": <EuiToolTip
                        content={
                          <EuiText
                            size="xs"
                          >
                            Average latency of traces within a trace group in the selected time range.
                          </EuiText>
                        }
                        delay="regular"
                        position="top"
                      >
                        <React.Fragment>
                          <div>
                            Average duration (ms)
                             
                            <EuiIcon
                              className="eui-alignTop"
                              color="subdued"
                              size="s"
                              type="questionInCircle"
                            />
                          </div>
                          <div>
                             
                          </div>
                        </React.Fragment>
                      </EuiToolTip>,
                      "render": [Function],
                      "sortable": true,
                    },
                    Object {
                      "align": "right",
                      "field": "24_hour_latency_trend",
                      "name": <EuiToolTip
                        content={
                          <EuiText
                            size="xs"
                          >
                            24 hour time series view of hourly average, hourly percentile, and hourly range of latency for traces within a trace group.
                          </EuiText>
                        }
                        delay="regular"
                        position="top"
                      >
                        <React.Fragment>
                          <div>
                            24-hour duration trend
                             
                            <EuiIcon
                              className="eui-alignTop"
                              color="subdued"
                              size="s"
                              type="questionInCircle"
                            />
                          </div>
                          <div>
                             
                          </div>
                        </React.Fragment>
                      </EuiToolTip>,
                      "render": [Function],
                      "sortable": false,
                    },
                    Object {
                      "align": "right",
                      "field": "dashboard_error_rate",
                      "name": <EuiToolTip
                        content={
                          <EuiText
                            size="xs"
                          >
                            Error rate based on count of trace errors within a trace group in the selected time range.
                          </EuiText>
                        }
                        delay="regular"
                        position="top"
                      >
                        <React.Fragment>
                          <div>
                            Error rate
                             
                            <EuiIcon
                              className="eui-alignTop"
                              color="subdued"
                              size="s"
                              type="questionInCircle"
                            />
                          </div>
                          <div>
                             
                          </div>
                        </React.Fragment>
                      </EuiToolTip>,
                      "render": [Function],
                      "sortable": true,
                    },
                    Object {
                      "align": "right",
                      "field": "dashboard_traces",
                      "name": <EuiToolTip
                        content={
                          <EuiText
                            size="xs"
                          >
                            Count of traces with unique trace identifiers in the selected time range.
                          </EuiText>
                        }
                        delay="regular"
                        position="top"
                      >
                        <React.Fragment>
                          <div>
                            Traces
                             
                            <EuiIcon
                              className="eui-alignTop"
                              color="subdued"
                              size="s"
                              type="questionInCircle"
                            />
                          </div>
                          <div>
                             
                          </div>
                        </React.Fragment>
                      </EuiToolTip>,
                      "render": [Function],
                      "sortable": true,
                    },
                  ]
                }
                data-test-subj="dashboardTable"
                items={Array []}
                loading={true}
                noItemsMessage="No items found"
                onChange={[Function]}
                pagination={
                  Object {
                    "hidePerPageOptions": undefined,
                    "pageIndex": 0,
                    "pageSize": 10,
                    "pageSizeOptions": Array [
                      5,
                      10,
                      15,
                    ],
                    "totalItemCount": 0,
                  }
                }
                responsive={true}
                sorting={
                  Object {
                    "allowNeutralSort": true,
                    "sort": Object {
                      "direction": "desc",
                      "field": <React.Fragment>
                        <EuiToolTip
                          content={
                            <EuiText
                              size="xs"
                            >
                              Range of latencies for traces within a trace group in the selected time range.
                            </EuiText>
                          }
                          delay="regular"
                          position="top"
                        >
                          <span>
                            Duration variance (ms)
                             
                            <EuiIcon
                              className="eui-alignTop"
                              color="subdued"
                              size="s"
                              type="questionInCircle"
                            />
                          </span>
                        </EuiToolTip>
                        <EuiText
                          color="subdued"
                          size="xs"
                        >
                          
                        </EuiText>
                      </React.Fragment>,
                    },
                  }
                }
                tableLayout="auto"
              >
                <div
                  className="euiBasicTable euiBasicTable-loading"
                  data-test-subj="dashboardTable"
                >
                  <div>
                    <EuiTableHeaderMobile>
                      <div
                        className="euiTableHeaderMobile"
                      >
                        <EuiFlexGroup
                          alignItems="baseline"
                          justifyContent="spaceBetween"
                          responsive={false}
                        >
                          <div
                            className="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--alignItemsBaseline euiFlexGroup--justifyContentSpaceBetween euiFlexGroup--directionRow"
                          >
                            <EuiFlexItem
                              grow={false}
                            >
                              <div
                                className="euiFlexItem euiFlexItem--flexGrowZero"
                              />
                            </EuiFlexItem>
                            <EuiFlexItem
                              grow={false}
                            >
                              <div
                                className="euiFlexItem euiFlexItem--flexGrowZero"
                              >
                                <EuiTableSortMobile
                                  items={
                                    Array [
                                      Object {
                                        "isSortAscending": undefined,
                                        "isSorted": false,
                                        "key": "_data_s_dashboard_trace_group_name_0",
                                        "name": <EuiToolTip
                                          content={
                                            <EuiText
                                              size="xs"
                                            >
                                              Traces of all requests that share a common API and operation at the start of distributed tracing instrumentation.
                                            </EuiText>
                                          }
                                          delay="regular"
                                          position="top"
                                        >
                                          <React.Fragment>
                                            <div>
                                              Trace group name
                                               
                                              <EuiIcon
                                                className="eui-alignTop"
                                                color="subdued"
                                                size="s"
                                                type="questionInCircle"
                                              />
                                            </div>
                                            <div>
                                               
                                            </div>
                                          </React.Fragment>
                                        </EuiToolTip>,
                                        "onSort": [Function],
                                      },
                                      Object {
                                        "isSortAscending": false,
                                        "isSorted": true,
                                        "key": "_data_s_dashboard_latency_variance_1",
                                        "name": <React.Fragment>
                                          <EuiToolTip
                                            content={
                                              <EuiText
                                                size="xs"
                                              >
                                                Range of latencies for traces within a trace group in the selected time range.
                                              </EuiText>
                                            }
                                            delay="regular"
                                            position="top"
                                          >
                                            <span>
                                              Duration variance (ms)
                                               
                                              <EuiIcon
                                                className="eui-alignTop"
                                                color="subdued"
                                                size="s"
                                                type="questionInCircle"
                                              />
                                            </span>
                                          </EuiToolTip>
                                          <EuiText
                                            color="subdued"
                                            size="xs"
                                          >
                                            
                                          </EuiText>
                                        </React.Fragment>,
                                        "onSort": [Function],
                                      },
                                      Object {
                                        "isSortAscending": undefined,
                                        "isSorted": false,
                                        "key": "_data_s_dashboard_average_latency_2",
                                        "name": <EuiToolTip
                                          content={
                                            <EuiText
                                              size="xs"
                                            >
                                              Average latency of traces within a trace group in the selected time range.
                                            </EuiText>
                                          }
                                          delay="regular"
                                          position="top"
                                        >
                                          <React.Fragment>
                                            <div>
                                              Average duration (ms)
                                               
                                              <EuiIcon
                                                className="eui-alignTop"
                                                color="subdued"
                                                size="s"
                                                type="questionInCircle"
                                              />
                                            </div>
                                            <div>
                                               
                                            </div>
                                          </React.Fragment>
                                        </EuiToolTip>,
                                        "onSort": [Function],
                                      },
                                      Object {
                                        "isSortAscending": undefined,
                                        "isSorted": false,
                                        "key": "_data_s_dashboard_error_rate_4",
                                        "name": <EuiToolTip
                                          content={
                                            <EuiText
                                              size="xs"
                                            >
                                              Error rate based on count of trace errors within a trace group in the selected time range.
                                            </EuiText>
                                          }
                                          delay="regular"
                                          position="top"
                                        >
                                          <React.Fragment>
                                            <div>
                                              Error rate
                                               
                                              <EuiIcon
                                                className="eui-alignTop"
                                                color="subdued"
                                                size="s"
                                                type="questionInCircle"
                                              />
                                            </div>
                                            <div>
                                               
                                            </div>
                                          </React.Fragment>
                                        </EuiToolTip>,
                                        "onSort": [Function],
                                      },
                                      Object {
                                        "isSortAscending": undefined,
                                        "isSorted": false,
                                        "key": "_data_s_dashboard_traces_5",
                                        "name": <EuiToolTip
                                          content={
                                            <EuiText
                                              size="xs"
                                            >
                                              Count of traces with unique trace identifiers in the selected time range.
                                            </EuiText>
                                          }
                                          delay="regular"
                                          position="top"
                                        >
                                          <React.Fragment>
                                            <div>
                                              Traces
                                               
                                              <EuiIcon
                                                className="eui-alignTop"
                                                color="subdued"
                                                size="s"
                                                type="questionInCircle"
                                              />
                                            </div>
                                            <div>
                                               
                                            </div>
                                          </React.Fragment>
                                        </EuiToolTip>,
                                        "onSort": [Function],
                                      },
                                    ]
                                  }
                                >
                                  <div
                                    className="euiTableSortMobile"
                                  >
                                    <EuiPopover
                                      anchorPosition="downRight"
                                      button={
                                        <EuiButtonEmpty
                                          flush="right"
                                          iconSide="right"
                                          iconType="arrowDown"
                                          onClick={[Function]}
                                          size="xs"
                                        >
                                          <EuiI18n
                                            default="Sorting"
                                            token="euiTableSortMobile.sorting"
                                          />
                                        </EuiButtonEmpty>
                                      }
                                      closePopover={[Function]}
                                      display="inlineBlock"
                                      hasArrow={true}
                                      isOpen={false}
                                      ownFocus={true}
                                      panelPaddingSize="none"
                                    >
                                      <div
                                        className="euiPopover euiPopover--anchorDownRight"
                                      >
                                        <div
                                          className="euiPopover__anchor"
                                        >
                                          <EuiButtonEmpty
                                            flush="right"
                                            iconSide="right"
                                            iconType="arrowDown"
                                            onClick={[Function]}
                                            size="xs"
                                          >
                                            <button
                                              className="euiButtonEmpty euiButtonEmpty--primary euiButtonEmpty--xSmall euiButtonEmpty--flushRight"
                                              disabled={false}
                                              onClick={[Function]}
                                              type="button"
                                            >
                                              <EuiButtonContent
                                                className="euiButtonEmpty__content"
                                                iconGap="m"
                                                iconSide="right"
                                                iconSize="s"
                                                iconType="arrowDown"
                                                textProps={
                                                  Object {
                                                    "className": "euiButtonEmpty__text",
                                                  }
                                                }
                                              >
                                                <span
                                                  className="euiButtonContent euiButtonContent--iconRight euiButtonEmpty__content"
                                                >
                                                  <EuiIcon
                                                    className="euiButtonContent__icon"
                                                    color="inherit"
                                                    size="s"
                                                    type="arrowDown"
                                                  >
                                                    <EuiIconBeaker
                                                      aria-hidden={true}
                                                      className="euiIcon euiIcon--small euiIcon--inherit euiIcon-isLoading euiButtonContent__icon"
                                                      focusable="false"
                                                      role="img"
                                                      style={null}
                                                    >
                                                      <svg
                                                        aria-hidden={true}
                                                        className="euiIcon euiIcon--small euiIcon--inherit euiIcon-isLoading euiButtonContent__icon"
                                                        focusable="false"
                                                        height={16}
                                                        role="img"
                                                        style={null}
                                                        viewBox="0 0 16 16"
                                                        width={16}
                                                        xmlns="http://www.w3.org/2000/svg"
                                                      >
                                                        <path
                                                          d="M5.277 10.088c.02.014.04.03.057.047.582.55 1.134.812 1.666.812.586 0 1.84-.293 3.713-.88L9 6.212V2H7v4.212l-1.723 3.876Zm-.438.987L3.539 14h8.922l-1.32-2.969C9.096 11.677 7.733 12 7 12c-.74 0-1.463-.315-2.161-.925ZM6 2H5V1h6v1h-1v4l3.375 7.594A1 1 0 0 1 12.461 15H3.54a1 1 0 0 1-.914-1.406L6 6V2Z"
                                                        />
                                                      </svg>
                                                    </EuiIconBeaker>
                                                  </EuiIcon>
                                                  <span
                                                    className="euiButtonEmpty__text"
                                                  >
                                                    <EuiI18n
                                                      default="Sorting"
                                                      token="euiTableSortMobile.sorting"
                                                    >
                                                      Sorting
                                                    </EuiI18n>
                                                  </span>
                                                </span>
                                              </EuiButtonContent>
                                            </button>
                                          </EuiButtonEmpty>
                                        </div>
                                      </div>
                                    </EuiPopover>
                                  </div>
                                </EuiTableSortMobile>
                              </div>
                            </EuiFlexItem>
                          </div>
                        </EuiFlexGroup>
                      </div>
                    </EuiTableHeaderMobile>
                    <EuiTable
                      id="random_html_id"
                      responsive={true}
                      tableLayout="auto"
                    >
                      <table
                        className="euiTable euiTable--responsive euiTable--auto"
                        id="random_html_id"
                        tabIndex={-1}
                      >
                        <EuiScreenReaderOnly>
                          <caption
                            className="euiScreenReaderOnly euiTableCaption"
                          >
                            <EuiDelayRender
                              delay={500}
                            />
                          </caption>
                        </EuiScreenReaderOnly>
                        <EuiTableHeader>
                          <thead>
                            <tr>
                              <EuiTableHeaderCell
                                align="left"
                                data-test-subj="tableHeaderCell_dashboard_trace_group_name_0"
                                isSorted={false}
                                key="_data_h_dashboard_trace_group_name_0"
                                onSort={[Function]}
                              >
                                <th
                                  aria-live="polite"
                                  aria-sort="none"
                                  className="euiTableHeaderCell"
                                  data-test-subj="tableHeaderCell_dashboard_trace_group_name_0"
                                  role="columnheader"
                                  scope="col"
                                  style={
                                    Object {
                                      "width": undefined,
                                    }
                                  }
                                >
                                  <button
                                    className="euiTableHeaderButton"
                                    data-test-subj="tableHeaderSortButton"
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <CellContents
                                      className="euiTableCellContent"
                                      isSorted={false}
                                      showSortMsg={true}
                                    >
                                      <span
                                        className="euiTableCellContent"
                                      >
                                        <EuiInnerText>
                                          <EuiI18n
                                            default="{innerText}; {description}"
                                            token="euiTableHeaderCell.titleTextWithDesc"
                                            values={
                                              Object {
                                                "description": undefined,
                                                "innerText": "Trace group name  ",
                                              }
                                            }
                                          >
                                            <span
                                              className="euiTableCellContent__text"
                                              title="Trace group name  "
                                            >
                                              <EuiToolTip
                                                content={
                                                  <EuiText
                                                    size="xs"
                                                  >
                                                    Traces of all requests that share a common API and operation at the start of distributed tracing instrumentation.
                                                  </EuiText>
                                                }
                                                delay="regular"
                                                position="top"
                                              >
                                                <span
                                                  className="euiToolTipAnchor"
                                                  onKeyUp={[Function]}
                                                  onMouseOut={[Function]}
                                                  onMouseOver={[Function]}
                                                >
                                                  <div>
                                                    Trace group name
                                                     
                                                    <EuiIcon
                                                      className="eui-alignTop"
                                                      color="subdued"
                                                      size="s"
                                                      type="questionInCircle"
                                                    >
                                                      <EuiIconBeaker
                                                        aria-hidden={true}
                                                        className="euiIcon euiIcon--small euiIcon--subdued euiIcon-isLoading eui-alignTop"
                                                        focusable="false"
                                                        role="img"
                                                        style={null}
                                                      >
                                                        <svg
                                                          aria-hidden={true}
                                                          className="euiIcon euiIcon--small euiIcon--subdued euiIcon-isLoading eui-alignTop"
                                                          focusable="false"
                                                          height={16}
                                                          role="img"
                                                          style={null}
                                                          viewBox="0 0 16 16"
                                                          width={16}
                                                          xmlns="http://www.w3.org/2000/svg"
                                                        >
                                                          <path
                                                            d="M5.277 10.088c.02.014.04.03.057.047.582.55 1.134.812 1.666.812.586 0 1.84-.293 3.713-.88L9 6.212V2H7v4.212l-1.723 3.876Zm-.438.987L3.539 14h8.922l-1.32-2.969C9.096 11.677 7.733 12 7 12c-.74 0-1.463-.315-2.161-.925ZM6 2H5V1h6v1h-1v4l3.375 7.594A1 1 0 0 1 12.461 15H3.54a1 1 0 0 1-.914-1.406L6 6V2Z"
                                                          />
                                                        </svg>
                                                      </EuiIconBeaker>
                                                    </EuiIcon>
                                                  </div>
                                                  <div>
                                                     
                                                  </div>
                                                </span>
                                              </EuiToolTip>
                                            </span>
                                          </EuiI18n>
                                        </EuiInnerText>
                                      </span>
                                    </CellContents>
                                  </button>
                                </th>
                              </EuiTableHeaderCell>
                              <EuiTableHeaderCell
                                align="center"
                                data-test-subj="tableHeaderCell_dashboard_latency_variance_1"
                                isSortAscending={false}
                                isSorted={true}
                                key="_data_h_dashboard_latency_variance_1"
                                onSort={[Function]}
                                width="300px"
                              >
                                <th
                                  aria-live="polite"
                                  aria-sort="descending"
                                  className="euiTableHeaderCell"
                                  data-test-subj="tableHeaderCell_dashboard_latency_variance_1"
                                  role="columnheader"
                                  scope="col"
                                  style={
                                    Object {
                                      "width": "300px",
                                    }
                                  }
                                >
                                  <button
                                    className="euiTableHeaderButton euiTableHeaderButton-isSorted"
                                    data-test-subj="tableHeaderSortButton"
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <CellContents
                                      className="euiTableCellContent euiTableCellContent--alignCenter"
                                      isSortAscending={false}
                                      isSorted={true}
                                      showSortMsg={true}
                                    >
                                      <span
                                        className="euiTableCellContent euiTableCellContent--alignCenter"
                                      >
                                        <EuiInnerText>
                                          <EuiI18n
                                            default="{innerText}; {description}"
                                            token="euiTableHeaderCell.titleTextWithDesc"
                                            values={
                                              Object {
                                                "description": undefined,
                                                "innerText": "Duration variance (ms) ",
                                              }
                                            }
                                          >
                                            <span
                                              className="euiTableCellContent__text"
                                              title="Duration variance (ms) "
                                            >
                                              <EuiToolTip
                                                content={
                                                  <EuiText
                                                    size="xs"
                                                  >
                                                    Range of latencies for traces within a trace group in the selected time range.
                                                  </EuiText>
                                                }
                                                delay="regular"
                                                position="top"
                                              >
                                                <span
                                                  className="euiToolTipAnchor"
                                                  onKeyUp={[Function]}
                                                  onMouseOut={[Function]}
                                                  onMouseOver={[Function]}
                                                >
                                                  <span
                                                    onBlur={[Function]}
                                                    onFocus={[Function]}
                                                  >
                                                    Duration variance (ms)
                                                     
                                                    <EuiIcon
                                                      className="eui-alignTop"
                                                      color="subdued"
                                                      size="s"
                                                      type="questionInCircle"
                                                    >
                                                      <EuiIconBeaker
                                                        aria-hidden={true}
                                                        className="euiIcon euiIcon--small euiIcon--subdued euiIcon-isLoading eui-alignTop"
                                                        focusable="false"
                                                        role="img"
                                                        style={null}
                                                      >
                                                        <svg
                                                          aria-hidden={true}
                                                          className="euiIcon euiIcon--small euiIcon--subdued euiIcon-isLoading eui-alignTop"
                                                          focusable="false"
                                                          height={16}
                                                          role="img"
                                                          style={null}
                                                          viewBox="0 0 16 16"
                                                          width={16}
                                                          xmlns="http://www.w3.org/2000/svg"
                                                        >
                                                          <path
                                                            d="M5.277 10.088c.02.014.04.03.057.047.582.55 1.134.812 1.666.812.586 0 1.84-.293 3.713-.88L9 6.212V2H7v4.212l-1.723 3.876Zm-.438.987L3.539 14h8.922l-1.32-2.969C9.096 11.677 7.733 12 7 12c-.74 0-1.463-.315-2.161-.925ZM6 2H5V1h6v1h-1v4l3.375 7.594A1 1 0 0 1 12.461 15H3.54a1 1 0 0 1-.914-1.406L6 6V2Z"
                                                          />
                                                        </svg>
                                                      </EuiIconBeaker>
                                                    </EuiIcon>
                                                  </span>
                                                </span>
                                              </EuiToolTip>
                                              <EuiText
                                                color="subdued"
                                                size="xs"
                                              >
                                                <div
                                                  className="euiText euiText--extraSmall"
                                                >
                                                  <EuiTextColor
                                                    color="subdued"
                                                    component="div"
                                                  >
                                                    <div
                                                      className="euiTextColor euiTextColor--subdued"
                                                    />
                                                  </EuiTextColor>
                                                </div>
                                              </EuiText>
                                            </span>
                                          </EuiI18n>
                                        </EuiInnerText>
                                        <EuiIcon
                                          className="euiTableSortIcon"
                                          size="m"
                                          type="sortDown"
                                        >
                                          <EuiIconBeaker
                                            aria-hidden={true}
                                            className="euiIcon euiIcon--medium euiIcon-isLoading euiTableSortIcon"
                                            focusable="false"
                                            role="img"
                                            style={null}
                                          >
                                            <svg
                                              aria-hidden={true}
                                              className="euiIcon euiIcon--medium euiIcon-isLoading euiTableSortIcon"
                                              focusable="false"
                                              height={16}
                                              role="img"
                                              style={null}
                                              viewBox="0 0 16 16"
                                              width={16}
                                              xmlns="http://www.w3.org/2000/svg"
                                            >
                                              <path
                                                d="M5.277 10.088c.02.014.04.03.057.047.582.55 1.134.812 1.666.812.586 0 1.84-.293 3.713-.88L9 6.212V2H7v4.212l-1.723 3.876Zm-.438.987L3.539 14h8.922l-1.32-2.969C9.096 11.677 7.733 12 7 12c-.74 0-1.463-.315-2.161-.925ZM6 2H5V1h6v1h-1v4l3.375 7.594A1 1 0 0 1 12.461 15H3.54a1 1 0 0 1-.914-1.406L6 6V2Z"
                                              />
                                            </svg>
                                          </EuiIconBeaker>
                                        </EuiIcon>
                                      </span>
                                    </CellContents>
                                  </button>
                                </th>
                              </EuiTableHeaderCell>
                              <EuiTableHeaderCell
                                align="right"
                                data-test-subj="tableHeaderCell_dashboard_average_latency_2"
                                isSorted={false}
                                key="_data_h_dashboard_average_latency_2"
                                onSort={[Function]}
                              >
                                <th
                                  aria-live="polite"
                                  aria-sort="none"
                                  className="euiTableHeaderCell"
                                  data-test-subj="tableHeaderCell_dashboard_average_latency_2"
                                  role="columnheader"
                                  scope="col"
                                  style={
                                    Object {
                                      "width": undefined,
                                    }
                                  }
                                >
                                  <button
                                    className="euiTableHeaderButton"
                                    data-test-subj="tableHeaderSortButton"
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <CellContents
                                      className="euiTableCellContent euiTableCellContent--alignRight"
                                      isSorted={false}
                                      showSortMsg={true}
                                    >
                                      <span
                                        className="euiTableCellContent euiTableCellContent--alignRight"
                                      >
                                        <EuiInnerText>
                                          <EuiI18n
                                            default="{innerText}; {description}"
                                            token="euiTableHeaderCell.titleTextWithDesc"
                                            values={
                                              Object {
                                                "description": undefined,
                                                "innerText": "Average duration (ms)  ",
                                              }
                                            }
                                          >
                                            <span
                                              className="euiTableCellContent__text"
                                              title="Average duration (ms)  "
                                            >
                                              <EuiToolTip
                                                content={
                                                  <EuiText
                                                    size="xs"
                                                  >
                                                    Average latency of traces within a trace group in the selected time range.
                                                  </EuiText>
                                                }
                                                delay="regular"
                                                position="top"
                                              >
                                                <span
                                                  className="euiToolTipAnchor"
                                                  onKeyUp={[Function]}
                                                  onMouseOut={[Function]}
                                                  onMouseOver={[Function]}
                                                >
                                                  <div>
                                                    Average duration (ms)
                                                     
                                                    <EuiIcon
                                                      className="eui-alignTop"
                                                      color="subdued"
                                                      size="s"
                                                      type="questionInCircle"
                                                    >
                                                      <EuiIconBeaker
                                                        aria-hidden={true}
                                                        className="euiIcon euiIcon--small euiIcon--subdued euiIcon-isLoading eui-alignTop"
                                                        focusable="false"
                                                        role="img"
                                                        style={null}
                                                      >
                                                        <svg
                                                          aria-hidden={true}
                                                          className="euiIcon euiIcon--small euiIcon--subdued euiIcon-isLoading eui-alignTop"
                                                          focusable="false"
                                                          height={16}
                                                          role="img"
                                                          style={null}
                                                          viewBox="0 0 16 16"
                                                          width={16}
                                                          xmlns="http://www.w3.org/2000/svg"
                                                        >
                                                          <path
                                                            d="M5.277 10.088c.02.014.04.03.057.047.582.55 1.134.812 1.666.812.586 0 1.84-.293 3.713-.88L9 6.212V2H7v4.212l-1.723 3.876Zm-.438.987L3.539 14h8.922l-1.32-2.969C9.096 11.677 7.733 12 7 12c-.74 0-1.463-.315-2.161-.925ZM6 2H5V1h6v1h-1v4l3.375 7.594A1 1 0 0 1 12.461 15H3.54a1 1 0 0 1-.914-1.406L6 6V2Z"
                                                          />
                                                        </svg>
                                                      </EuiIconBeaker>
                                                    </EuiIcon>
                                                  </div>
                                                  <div>
                                                     
                                                  </div>
                                                </span>
                                              </EuiToolTip>
                                            </span>
                                          </EuiI18n>
                                        </EuiInnerText>
                                      </span>
                                    </CellContents>
                                  </button>
                                </th>
                              </EuiTableHeaderCell>
                              <EuiTableHeaderCell
                                align="right"
                                data-test-subj="tableHeaderCell_24_hour_latency_trend_3"
                                key="_data_h_24_hour_latency_trend_3"
                              >
                                <th
                                  className="euiTableHeaderCell"
                                  data-test-subj="tableHeaderCell_24_hour_latency_trend_3"
                                  role="columnheader"
                                  scope="col"
                                  style={
                                    Object {
                                      "width": undefined,
                                    }
                                  }
                                >
                                  <CellContents
                                    className="euiTableCellContent euiTableCellContent--alignRight"
                                    showSortMsg={false}
                                  >
                                    <span
                                      className="euiTableCellContent euiTableCellContent--alignRight"
                                    >
                                      <EuiInnerText>
                                        <EuiI18n
                                          default="{innerText}; {description}"
                                          token="euiTableHeaderCell.titleTextWithDesc"
                                          values={
                                            Object {
                                              "description": undefined,
                                              "innerText": "24-hour duration trend  ",
                                            }
                                          }
                                        >
                                          <span
                                            className="euiTableCellContent__text"
                                            title="24-hour duration trend  "
                                          >
                                            <EuiToolTip
                                              content={
                                                <EuiText
                                                  size="xs"
                                                >
                                                  24 hour time series view of hourly average, hourly percentile, and hourly range of latency for traces within a trace group.
                                                </EuiText>
                                              }
                                              delay="regular"
                                              position="top"
                                            >
                                              <span
                                                className="euiToolTipAnchor"
                                                onKeyUp={[Function]}
                                                onMouseOut={[Function]}
                                                onMouseOver={[Function]}
                                              >
                                                <div>
                                                  24-hour duration trend
                                                   
                                                  <EuiIcon
                                                    className="eui-alignTop"
                                                    color="subdued"
                                                    size="s"
                                                    type="questionInCircle"
                                                  >
                                                    <EuiIconBeaker
                                                      aria-hidden={true}
                                                      className="euiIcon euiIcon--small euiIcon--subdued euiIcon-isLoading eui-alignTop"
                                                      focusable="false"
                                                      role="img"
                                                      style={null}
                                                    >
                                                      <svg
                                                        aria-hidden={true}
                                                        className="euiIcon euiIcon--small euiIcon--subdued euiIcon-isLoading eui-alignTop"
                                                        focusable="false"
                                                        height={16}
                                                        role="img"
                                                        style={null}
                                                        viewBox="0 0 16 16"
                                                        width={16}
                                                        xmlns="http://www.w3.org/2000/svg"
                                                      >
                                                        <path
                                                          d="M5.277 10.088c.02.014.04.03.057.047.582.55 1.134.812 1.666.812.586 0 1.84-.293 3.713-.88L9 6.212V2H7v4.212l-1.723 3.876Zm-.438.987L3.539 14h8.922l-1.32-2.969C9.096 11.677 7.733 12 7 12c-.74 0-1.463-.315-2.161-.925ZM6 2H5V1h6v1h-1v4l3.375 7.594A1 1 0 0 1 12.461 15H3.54a1 1 0 0 1-.914-1.406L6 6V2Z"
                                                        />
                                                      </svg>
                                                    </EuiIconBeaker>
                                                  </EuiIcon>
                                                </div>
                                                <div>
                                                   
                                                </div>
                                              </span>
                                            </EuiToolTip>
                                          </span>
                                        </EuiI18n>
                                      </EuiInnerText>
                                    </span>
                                  </CellContents>
                                </th>
                              </EuiTableHeaderCell>
                              <EuiTableHeaderCell
                                align="right"
                                data-test-subj="tableHeaderCell_dashboard_error_rate_4"
                                isSorted={false}
                                key="_data_h_dashboard_error_rate_4"
                                onSort={[Function]}
                              >
                                <th
                                  aria-live="polite"
                                  aria-sort="none"
                                  className="euiTableHeaderCell"
                                  data-test-subj="tableHeaderCell_dashboard_error_rate_4"
                                  role="columnheader"
                                  scope="col"
                                  style={
                                    Object {
                                      "width": undefined,
                                    }
                                  }
                                >
                                  <button
                                    className="euiTableHeaderButton"
                                    data-test-subj="tableHeaderSortButton"
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <CellContents
                                      className="euiTableCellContent euiTableCellContent--alignRight"
                                      isSorted={false}
                                      showSortMsg={true}
                                    >
                                      <span
                                        className="euiTableCellContent euiTableCellContent--alignRight"
                                      >
                                        <EuiInnerText>
                                          <EuiI18n
                                            default="{innerText}; {description}"
                                            token="euiTableHeaderCell.titleTextWithDesc"
                                            values={
                                              Object {
                                                "description": undefined,
                                                "innerText": "Error rate  ",
                                              }
                                            }
                                          >
                                            <span
                                              className="euiTableCellContent__text"
                                              title="Error rate  "
                                            >
                                              <EuiToolTip
                                                content={
                                                  <EuiText
                                                    size="xs"
                                                  >
                                                    Error rate based on count of trace errors within a trace group in the selected time range.
                                                  </EuiText>
                                                }
                                                delay="regular"
                                                position="top"
                                              >
                                                <span
                                                  className="euiToolTipAnchor"
                                                  onKeyUp={[Function]}
                                                  onMouseOut={[Function]}
                                                  onMouseOver={[Function]}
                                                >
                                                  <div>
                                                    Error rate
                                                     
                                                    <EuiIcon
                                                      className="eui-alignTop"
                                                      color="subdued"
                                                      size="s"
                                                      type="questionInCircle"
                                                    >
                                                      <EuiIconBeaker
                                                        aria-hidden={true}
                                                        className="euiIcon euiIcon--small euiIcon--subdued euiIcon-isLoading eui-alignTop"
                                                        focusable="false"
                                                        role="img"
                                                        style={null}
                                                      >
                                                        <svg
                                                          aria-hidden={true}
                                                          className="euiIcon euiIcon--small euiIcon--subdued euiIcon-isLoading eui-alignTop"
                                                          focusable="false"
                                                          height={16}
                                                          role="img"
                                                          style={null}
                                                          viewBox="0 0 16 16"
                                                          width={16}
                                                          xmlns="http://www.w3.org/2000/svg"
                                                        >
                                                          <path
                                                            d="M5.277 10.088c.02.014.04.03.057.047.582.55 1.134.812 1.666.812.586 0 1.84-.293 3.713-.88L9 6.212V2H7v4.212l-1.723 3.876Zm-.438.987L3.539 14h8.922l-1.32-2.969C9.096 11.677 7.733 12 7 12c-.74 0-1.463-.315-2.161-.925ZM6 2H5V1h6v1h-1v4l3.375 7.594A1 1 0 0 1 12.461 15H3.54a1 1 0 0 1-.914-1.406L6 6V2Z"
                                                          />
                                                        </svg>
                                                      </EuiIconBeaker>
                                                    </EuiIcon>
                                                  </div>
                                                  <div>
                                                     
                                                  </div>
                                                </span>
                                              </EuiToolTip>
                                            </span>
                                          </EuiI18n>
                                        </EuiInnerText>
                                      </span>
                                    </CellContents>
                                  </button>
                                </th>
                              </EuiTableHeaderCell>
                              <EuiTableHeaderCell
                                align="right"
                                data-test-subj="tableHeaderCell_dashboard_traces_5"
                                isSorted={false}
                                key="_data_h_dashboard_traces_5"
                                onSort={[Function]}
                              >
                                <th
                                  aria-live="polite"
                                  aria-sort="none"
                                  className="euiTableHeaderCell"
                                  data-test-subj="tableHeaderCell_dashboard_traces_5"
                                  role="columnheader"
                                  scope="col"
                                  style={
                                    Object {
                                      "width": undefined,
                                    }
                                  }
                                >
                                  <button
                                    className="euiTableHeaderButton"
                                    data-test-subj="tableHeaderSortButton"
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <CellContents
                                      className="euiTableCellContent euiTableCellContent--alignRight"
                                      isSorted={false}
                                      showSortMsg={true}
                                    >
                                      <span
                                        className="euiTableCellContent euiTableCellContent--alignRight"
                                      >
                                        <EuiInnerText>
                                          <EuiI18n
                                            default="{innerText}; {description}"
                                            token="euiTableHeaderCell.titleTextWithDesc"
                                            values={
                                              Object {
                                                "description": undefined,
                                                "innerText": "Traces  ",
                                              }
                                            }
                                          >
                                            <span
                                              className="euiTableCellContent__text"
                                              title="Traces  "
                                            >
                                              <EuiToolTip
                                                content={
                                                  <EuiText
                                                    size="xs"
                                                  >
                                                    Count of traces with unique trace identifiers in the selected time range.
                                                  </EuiText>
                                                }
                                                delay="regular"
                                                position="top"
                                              >
                                                <span
                                                  className="euiToolTipAnchor"
                                                  onKeyUp={[Function]}
                                                  onMouseOut={[Function]}
                                                  onMouseOver={[Function]}
                                                >
                                                  <div>
                                                    Traces
                                                     
                                                    <EuiIcon
                                                      className="eui-alignTop"
                                                      color="subdued"
                                                      size="s"
                                                      type="questionInCircle"
                                                    >
                                                      <EuiIconBeaker
                                                        aria-hidden={true}
                                                        className="euiIcon euiIcon--small euiIcon--subdued euiIcon-isLoading eui-alignTop"
                                                        focusable="false"
                                                        role="img"
                                                        style={null}
                                                      >
                                                        <svg
                                                          aria-hidden={true}
                                                          className="euiIcon euiIcon--small euiIcon--subdued euiIcon-isLoading eui-alignTop"
                                                          focusable="false"
                                                          height={16}
                                                          role="img"
                                                          style={null}
                                                          viewBox="0 0 16 16"
                                                          width={16}
                                                          xmlns="http://www.w3.org/2000/svg"
                                                        >
                                                          <path
                                                            d="M5.277 10.088c.02.014.04.03.057.047.582.55 1.134.812 1.666.812.586 0 1.84-.293 3.713-.88L9 6.212V2H7v4.212l-1.723 3.876Zm-.438.987L3.539 14h8.922l-1.32-2.969C9.096 11.677 7.733 12 7 12c-.74 0-1.463-.315-2.161-.925ZM6 2H5V1h6v1h-1v4l3.375 7.594A1 1 0 0 1 12.461 15H3.54a1 1 0 0 1-.914-1.406L6 6V2Z"
                                                          />
                                                        </svg>
                                                      </EuiIconBeaker>
                                                    </EuiIcon>
                                                  </div>
                                                  <div>
                                                     
                                                  </div>
                                                </span>
                                              </EuiToolTip>
                                            </span>
                                          </EuiI18n>
                                        </EuiInnerText>
                                      </span>
                                    </CellContents>
                                  </button>
                                </th>
                              </EuiTableHeaderCell>
                            </tr>
                          </thead>
                        </EuiTableHeader>
                        <EuiTableBody>
                          <tbody>
                            <EuiTableRow>
                              <tr
                                className="euiTableRow"
                              >
                                <EuiTableRowCell
                                  align="center"
                                  colSpan={6}
                                  isMobileFullWidth={true}
                                >
                                  <td
                                    className="euiTableRowCell euiTableRowCell--isMobileFullWidth"
                                    colSpan={6}
                                    style={
                                      Object {
                                        "width": undefined,
                                      }
                                    }
                                  >
                                    <div
                                      className="euiTableCellContent euiTableCellContent--alignCenter"
                                    >
                                      <span
                                        className="euiTableCellContent__text"
                                      >
                                        No items found
                                      </span>
                                    </div>
                                  </td>
                                </EuiTableRowCell>
                              </tr>
                            </EuiTableRow>
                          </tbody>
                        </EuiTableBody>
                      </table>
                    </EuiTable>
                  </div>
                </div>
              </EuiBasicTable>
            </EuiInMemoryTable>
          </div>
        </EuiPanel>
      </DashboardTable>
      <EuiSpacer>
        <div
          className="euiSpacer euiSpacer--l"
        />
      </EuiSpacer>
      <EuiFlexGroup
        alignItems="baseline"
      >
        <div
          className="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--alignItemsBaseline euiFlexGroup--directionRow euiFlexGroup--responsive"
        >
          <EuiFlexItem>
            <div
              className="euiFlexItem"
            >
              <EuiFlexGroup
                direction="row"
              >
                <div
                  className="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--directionRow euiFlexGroup--responsive"
                >
                  <EuiFlexItem>
                    <div
                      className="euiFlexItem"
                    >
                      <ErrorRatePlt
                        isErrorRateTrendLoading={true}
                        items={
                          Object {
                            "fixedInterval": "1h",
                            "items": Array [],
                          }
                        }
                        setEndTime={[MockFunction]}
                        setStartTime={[MockFunction]}
                      >
                        <EuiPanel
                          style={
                            Object {
                              "maxHeight": 560,
                              "minHeight": 308,
                              "minWidth": 433,
                            }
                          }
                        >
                          <div
                            className="euiPanel euiPanel--paddingMedium euiPanel--borderRadiusMedium euiPanel--plain euiPanel--hasShadow"
                            style={
                              Object {
                                "maxHeight": 560,
                                "minHeight": 308,
                                "minWidth": 433,
                              }
                            }
                          >
                            <EuiFlexGroup
                              gutterSize="xs"
                              justifyContent="spaceBetween"
                            >
                              <div
                                className="euiFlexGroup euiFlexGroup--gutterExtraSmall euiFlexGroup--justifyContentSpaceBetween euiFlexGroup--directionRow euiFlexGroup--responsive"
                              >
                                <PanelTitle
                                  title="Trace error rate over time"
                                >
                                  <EuiText
                                    size="m"
                                  >
                                    <div
                                      className="euiText euiText--medium"
                                    >
                                      <span
                                        className="panel-title"
                                      >
                                        Trace error rate over time
                                      </span>
                                    </div>
                                  </EuiText>
                                </PanelTitle>
                                <EuiButtonGroup
                                  buttonSize="s"
                                  color="text"
                                  onChange={[Function]}
                                >
                                  <fieldset
                                    className="euiButtonGroup euiButtonGroup--small euiButtonGroup--text"
                                    disabled={false}
                                  >
                                    <EuiScreenReaderOnly>
                                      <legend
                                        className="euiScreenReaderOnly"
                                      />
                                    </EuiScreenReaderOnly>
                                    <div
                                      className="euiButtonGroup__buttons"
                                    />
                                  </fieldset>
                                </EuiButtonGroup>
                              </div>
                            </EuiFlexGroup>
                            <div
                              className="center-loading-div"
                            >
                              <EuiLoadingChart
                                size="l"
                              >
                                <span
                                  className="euiLoadingChart euiLoadingChart--large"
                                >
                                  <span
                                    className="euiLoadingChart__bar"
                                  />
                                  <span
                                    className="euiLoadingChart__bar"
                                  />
                                  <span
                                    className="euiLoadingChart__bar"
                                  />
                                  <span
                                    className="euiLoadingChart__bar"
                                  />
                                </span>
                              </EuiLoadingChart>
                            </div>
                          </div>
                        </EuiPanel>
                      </ErrorRatePlt>
                    </div>
                  </EuiFlexItem>
                  <EuiFlexItem>
                    <div
                      className="euiFlexItem"
                    >
                      <ThroughputPlt
                        isThroughputTrendLoading={true}
                        items={
                          Object {
                            "fixedInterval": "1h",
                            "items": Array [],
                          }
                        }
                        setEndTime={[MockFunction]}
                        setStartTime={[MockFunction]}
                      >
                        <EuiPanel
                          style={
                            Object {
                              "maxHeight": 560,
                              "minHeight": 308,
                              "minWidth": 433,
                            }
                          }
                        >
                          <div
                            className="euiPanel euiPanel--paddingMedium euiPanel--borderRadiusMedium euiPanel--plain euiPanel--hasShadow"
                            style={
                              Object {
                                "maxHeight": 560,
                                "minHeight": 308,
                                "minWidth": 433,
                              }
                            }
                          >
                            <EuiFlexGroup
                              gutterSize="xs"
                              justifyContent="spaceBetween"
                            >
                              <div
                                className="euiFlexGroup euiFlexGroup--gutterExtraSmall euiFlexGroup--justifyContentSpaceBetween euiFlexGroup--directionRow euiFlexGroup--responsive"
                              >
                                <PanelTitle
                                  title="Traces over time"
                                >
                                  <EuiText
                                    size="m"
                                  >
                                    <div
                                      className="euiText euiText--medium"
                                    >
                                      <span
                                        className="panel-title"
                                      >
                                        Traces over time
                                      </span>
                                    </div>
                                  </EuiText>
                                </PanelTitle>
                                <EuiButtonGroup
                                  buttonSize="s"
                                  color="text"
                                  onChange={[Function]}
                                >
                                  <fieldset
                                    className="euiButtonGroup euiButtonGroup--small euiButtonGroup--text"
                                    disabled={false}
                                  >
                                    <EuiScreenReaderOnly>
                                      <legend
                                        className="euiScreenReaderOnly"
                                      />
                                    </EuiScreenReaderOnly>
                                    <div
                                      className="euiButtonGroup__buttons"
                                    />
                                  </fieldset>
                                </EuiButtonGroup>
                              </div>
                            </EuiFlexGroup>
                            <div
                              className="center-loading-div"
                            >
                              <EuiLoadingChart
                                size="l"
                              >
                                <span
                                  className="euiLoadingChart euiLoadingChart--large"
                                >
                                  <span
                                    className="euiLoadingChart__bar"
                                  />
                                  <span
                                    className="euiLoadingChart__bar"
                                  />
                                  <span
                                    className="euiLoadingChart__bar"
                                  />
                                  <span
                                    className="euiLoadingChart__bar"
                                  />
                                </span>
                              </EuiLoadingChart>
                            </div>
                          </div>
                        </EuiPanel>
                      </ThroughputPlt>
                    </div>
                  </EuiFlexItem>
                </div>
              </EuiFlexGroup>
            </div>
          </EuiFlexItem>
        </div>
      </EuiFlexGroup>
    </div>
  </DashboardContent>
</Dashboard>
`;

exports[`Dashboard component renders empty jaeger dashboard 1`] = `
<Dashboard
  appConfigs={Array []}
  attributesFilterFields={Array []}
  childBreadcrumbs={
    Array [
      Object {
        "href": "#/trace_analytics/home",
        "text": "Trace analytics",
      },
      Object {
        "href": "#/trace_analytics/home",
        "text": "Dashboard",
      },
    ]
  }
  chrome={
    Object {
      "addApplicationClass": [MockFunction],
      "docTitle": Object {
        "change": [MockFunction],
        "reset": [MockFunction],
      },
      "getApplicationClasses$": [MockFunction],
      "getBadge$": [MockFunction],
      "getBreadcrumbs$": [MockFunction],
      "getBreadcrumbsEnricher$": [MockFunction],
      "getCustomNavLink$": [MockFunction],
      "getHeaderComponent": [MockFunction],
      "getHeaderVariant$": [MockFunction],
      "getHelpExtension$": [MockFunction],
      "getIsNavDrawerLocked$": [MockFunction],
      "getIsVisible$": [MockFunction],
      "globalSearch": Object {
        "getAllSearchCommands": [MockFunction],
      },
      "logos": Object {
        "AnimatedMark": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_spinner_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_spinner_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_spinner_on_light.svg",
        },
        "Application": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_dashboards_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_dashboards_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_dashboards_on_light.svg",
        },
        "CenterMark": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_center_mark_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_center_mark_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_center_mark_on_light.svg",
        },
        "Mark": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_mark_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_mark_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_mark_on_light.svg",
        },
        "OpenSearch": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_on_light.svg",
        },
        "colorScheme": "light",
      },
      "navControls": Object {
        "getCenter$": [MockFunction],
        "getLeft$": [MockFunction],
        "getLeftBottom$": [MockFunction],
        "getPrimaryHeaderRight$": [MockFunction],
        "getRight$": [MockFunction],
        "registerCenter": [MockFunction],
        "registerLeft": [MockFunction],
        "registerLeftBottom": [MockFunction],
        "registerPrimaryHeaderRight": [MockFunction],
        "registerRight": [MockFunction],
      },
      "navGroup": Object {
        "getCurrentNavGroup$": [MockFunction],
        "getNavGroupEnabled": [MockFunction] {
          "calls": Array [
            Array [],
            Array [],
            Array [],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
            Object {
              "type": "return",
              "value": undefined,
            },
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        },
        "getNavGroupsMap$": [MockFunction],
        "setCurrentNavGroup": [MockFunction],
      },
      "navLinks": Object {
        "enableForcedAppSwitcherNavigation": [MockFunction],
        "get": [MockFunction],
        "getAll": [MockFunction],
        "getForceAppSwitcherNavigation$": [MockFunction],
        "getNavLinks$": [MockFunction],
        "has": [MockFunction],
        "showOnly": [MockFunction],
        "update": [MockFunction],
      },
      "recentlyAccessed": Object {
        "add": [MockFunction],
        "get": [MockFunction],
        "get$": [MockFunction],
      },
      "removeApplicationClass": [MockFunction],
      "setAppTitle": [MockFunction],
      "setBadge": [MockFunction],
      "setBreadcrumbs": [MockFunction] {
        "calls": Array [
          Array [
            Array [
              undefined,
              Object {
                "href": "#/trace_analytics/home",
                "text": "Trace analytics",
              },
              Object {
                "href": "#/trace_analytics/home",
                "text": "Dashboard",
              },
            ],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
      "setBreadcrumbsEnricher": [MockFunction],
      "setCustomNavLink": [MockFunction],
      "setHeaderVariant": [MockFunction],
      "setHelpExtension": [MockFunction],
      "setHelpSupportUrl": [MockFunction],
      "setIsVisible": [MockFunction],
    }
  }
  dataPrepperIndicesExist={false}
  dataSourceMDSId={
    Array [
      Object {
        "id": "",
        "label": "",
      },
    ]
  }
  endTime="now"
  filters={Array []}
  http={[MockFunction]}
  jaegerIndicesExist={true}
  mode="jaeger"
  modes={
    Array [
      Object {
        "id": "jaeger",
        "title": "Jaeger",
      },
      Object {
        "id": "data_prepper",
        "title": "Data Prepper",
      },
    ]
  }
  page="dashboard"
  parentBreadcrumbs={
    Array [
      Object {
        "href": "test#/",
        "text": "test",
      },
    ]
  }
  query=""
  setEndTime={[MockFunction]}
  setFilters={
    [MockFunction] {
      "calls": Array [
        Array [
          Array [],
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  setQuery={[MockFunction]}
  setStartTime={[MockFunction]}
  startTime="now-5m"
>
  <EuiTitle
    size="l"
  >
    <h2
      className="euiTitle euiTitle--large"
      style={
        Object {
          "fontWeight": 430,
        }
      }
    >
      Dashboard
    </h2>
  </EuiTitle>
  <DataSourcePicker
    modes={
      Array [
        Object {
          "id": "jaeger",
          "title": "Jaeger",
        },
        Object {
          "id": "data_prepper",
          "title": "Data Prepper",
        },
      ]
    }
    selectedMode="jaeger"
  >
    <EuiPopover
      anchorClassName="eui-textTruncate"
      anchorPosition="downCenter"
      button={
        <EuiSmallButtonEmpty
          className="dscIndexPattern__triggerButton"
          color="text"
          data-test-subj="indexPattern-switch-link"
          flush="left"
          iconSide="right"
          iconType="arrowDown"
          onClick={[Function]}
          title="jaeger"
        >
          Jaeger
        </EuiSmallButtonEmpty>
      }
      className="eui-textTruncate"
      closePopover={[Function]}
      display="inlineBlock"
      hasArrow={true}
      isOpen={false}
      ownFocus={true}
      panelPaddingSize="s"
    >
      <div
        className="euiPopover euiPopover--anchorDownCenter eui-textTruncate"
      >
        <div
          className="euiPopover__anchor eui-textTruncate"
        >
          <EuiSmallButtonEmpty
            className="dscIndexPattern__triggerButton"
            color="text"
            data-test-subj="indexPattern-switch-link"
            flush="left"
            iconSide="right"
            iconType="arrowDown"
            onClick={[Function]}
            title="jaeger"
          >
            <EuiButtonEmpty
              className="dscIndexPattern__triggerButton"
              color="text"
              data-test-subj="indexPattern-switch-link"
              flush="left"
              iconSide="right"
              iconType="arrowDown"
              onClick={[Function]}
              size="s"
              title="jaeger"
            >
              <button
                className="euiButtonEmpty euiButtonEmpty--text euiButtonEmpty--small euiButtonEmpty--flushLeft dscIndexPattern__triggerButton"
                data-test-subj="indexPattern-switch-link"
                disabled={false}
                onClick={[Function]}
                title="jaeger"
                type="button"
              >
                <EuiButtonContent
                  className="euiButtonEmpty__content"
                  iconGap="m"
                  iconSide="right"
                  iconSize="m"
                  iconType="arrowDown"
                  textProps={
                    Object {
                      "className": "euiButtonEmpty__text",
                    }
                  }
                >
                  <span
                    className="euiButtonContent euiButtonContent--iconRight euiButtonEmpty__content"
                  >
                    <EuiIcon
                      className="euiButtonContent__icon"
                      color="inherit"
                      size="m"
                      type="arrowDown"
                    >
                      <EuiIconArrowDown
                        aria-hidden={true}
                        className="euiIcon euiIcon--medium euiIcon--inherit euiButtonContent__icon"
                        focusable="false"
                        role="img"
                        style={null}
                      >
                        <svg
                          aria-hidden={true}
                          className="euiIcon euiIcon--medium euiIcon--inherit euiButtonContent__icon"
                          focusable="false"
                          height={16}
                          role="img"
                          style={null}
                          viewBox="0 0 16 16"
                          width={16}
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M13.069 5.157 8.384 9.768a.546.546 0 0 1-.768 0L2.93 5.158a.552.552 0 0 0-.771 0 .53.53 0 0 0 0 .759l4.684 4.61c.641.631 1.672.63 2.312 0l4.684-4.61a.53.53 0 0 0 0-.76.552.552 0 0 0-.771 0Z"
                            fillRule="non-zero"
                          />
                        </svg>
                      </EuiIconArrowDown>
                    </EuiIcon>
                    <span
                      className="euiButtonEmpty__text"
                    >
                      Jaeger
                    </span>
                  </span>
                </EuiButtonContent>
              </button>
            </EuiButtonEmpty>
          </EuiSmallButtonEmpty>
        </div>
      </div>
    </EuiPopover>
    <CustomIndexFlyout
      isFlyoutVisible={false}
      setIsFlyoutVisible={[Function]}
    >
      <div />
    </CustomIndexFlyout>
  </DataSourcePicker>
  <DashboardContent
    appConfigs={Array []}
    attributesFilterFields={Array []}
    childBreadcrumbs={
      Array [
        Object {
          "href": "#/trace_analytics/home",
          "text": "Trace analytics",
        },
        Object {
          "href": "#/trace_analytics/home",
          "text": "Dashboard",
        },
      ]
    }
    chrome={
      Object {
        "addApplicationClass": [MockFunction],
        "docTitle": Object {
          "change": [MockFunction],
          "reset": [MockFunction],
        },
        "getApplicationClasses$": [MockFunction],
        "getBadge$": [MockFunction],
        "getBreadcrumbs$": [MockFunction],
        "getBreadcrumbsEnricher$": [MockFunction],
        "getCustomNavLink$": [MockFunction],
        "getHeaderComponent": [MockFunction],
        "getHeaderVariant$": [MockFunction],
        "getHelpExtension$": [MockFunction],
        "getIsNavDrawerLocked$": [MockFunction],
        "getIsVisible$": [MockFunction],
        "globalSearch": Object {
          "getAllSearchCommands": [MockFunction],
        },
        "logos": Object {
          "AnimatedMark": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_spinner_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_spinner_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_spinner_on_light.svg",
          },
          "Application": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_dashboards_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_dashboards_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_dashboards_on_light.svg",
          },
          "CenterMark": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_center_mark_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_center_mark_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_center_mark_on_light.svg",
          },
          "Mark": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_mark_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_mark_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_mark_on_light.svg",
          },
          "OpenSearch": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_on_light.svg",
          },
          "colorScheme": "light",
        },
        "navControls": Object {
          "getCenter$": [MockFunction],
          "getLeft$": [MockFunction],
          "getLeftBottom$": [MockFunction],
          "getPrimaryHeaderRight$": [MockFunction],
          "getRight$": [MockFunction],
          "registerCenter": [MockFunction],
          "registerLeft": [MockFunction],
          "registerLeftBottom": [MockFunction],
          "registerPrimaryHeaderRight": [MockFunction],
          "registerRight": [MockFunction],
        },
        "navGroup": Object {
          "getCurrentNavGroup$": [MockFunction],
          "getNavGroupEnabled": [MockFunction] {
            "calls": Array [
              Array [],
              Array [],
              Array [],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": undefined,
              },
              Object {
                "type": "return",
                "value": undefined,
              },
              Object {
                "type": "return",
                "value": undefined,
              },
            ],
          },
          "getNavGroupsMap$": [MockFunction],
          "setCurrentNavGroup": [MockFunction],
        },
        "navLinks": Object {
          "enableForcedAppSwitcherNavigation": [MockFunction],
          "get": [MockFunction],
          "getAll": [MockFunction],
          "getForceAppSwitcherNavigation$": [MockFunction],
          "getNavLinks$": [MockFunction],
          "has": [MockFunction],
          "showOnly": [MockFunction],
          "update": [MockFunction],
        },
        "recentlyAccessed": Object {
          "add": [MockFunction],
          "get": [MockFunction],
          "get$": [MockFunction],
        },
        "removeApplicationClass": [MockFunction],
        "setAppTitle": [MockFunction],
        "setBadge": [MockFunction],
        "setBreadcrumbs": [MockFunction] {
          "calls": Array [
            Array [
              Array [
                undefined,
                Object {
                  "href": "#/trace_analytics/home",
                  "text": "Trace analytics",
                },
                Object {
                  "href": "#/trace_analytics/home",
                  "text": "Dashboard",
                },
              ],
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        },
        "setBreadcrumbsEnricher": [MockFunction],
        "setCustomNavLink": [MockFunction],
        "setHeaderVariant": [MockFunction],
        "setHelpExtension": [MockFunction],
        "setHelpSupportUrl": [MockFunction],
        "setIsVisible": [MockFunction],
      }
    }
    dataPrepperIndicesExist={false}
    dataSourceMDSId={
      Array [
        Object {
          "id": "",
          "label": "",
        },
      ]
    }
    endTime="now"
    filters={Array []}
    http={[MockFunction]}
    jaegerIndicesExist={true}
    mode="jaeger"
    modes={
      Array [
        Object {
          "id": "jaeger",
          "title": "Jaeger",
        },
        Object {
          "id": "data_prepper",
          "title": "Data Prepper",
        },
      ]
    }
    page="dashboard"
    parentBreadcrumbs={
      Array [
        Object {
          "href": "test#/",
          "text": "test",
        },
      ]
    }
    query=""
    setEndTime={[MockFunction]}
    setFilters={
      [MockFunction] {
        "calls": Array [
          Array [
            Array [],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    setQuery={[MockFunction]}
    setStartTime={[MockFunction]}
    startTime="now-5m"
  >
    <div>
      <TopGroupsPage
        addFilter={[Function]}
        addFilters={[Function]}
        addPercentileFilter={[Function]}
        filters={Array []}
        isErrorRateTrendLoading={true}
        isThroughputTrendLoading={true}
        jaegerErrorRatePltItems={
          Object {
            "fixedInterval": "1h",
            "items": Array [],
          }
        }
        jaegerErrorTableItems={Array []}
        jaegerTableItems={Array []}
        loading={true}
        page="dashboard"
        setEndTime={[MockFunction]}
        setRedirect={[Function]}
        setStartTime={[MockFunction]}
        throughPutItems={
          Object {
            "fixedInterval": "1h",
            "items": Array [],
          }
        }
      >
        <EuiSpacer
          size="m"
        >
          <div
            className="euiSpacer euiSpacer--m"
          />
        </EuiSpacer>
        <ErrorRatePlt
          idSelected="error_rate"
          isErrorRateTrendLoading={true}
          items={
            Object {
              "fixedInterval": "1h",
              "items": Array [],
            }
          }
          setEndTime={[MockFunction]}
          setIdSelected={[Function]}
          setStartTime={[MockFunction]}
          toggleButtons={
            Array [
              Object {
                "data-test-subj": "errors-toggle",
                "id": "error_rate",
                "label": "Errors",
              },
              Object {
                "data-test-subj": "throughput-toggle",
                "id": "throughput",
                "label": "Request rate",
              },
            ]
          }
        >
          <EuiPanel
            style={
              Object {
                "maxHeight": 560,
                "minHeight": 308,
                "minWidth": 433,
              }
            }
          >
            <div
              className="euiPanel euiPanel--paddingMedium euiPanel--borderRadiusMedium euiPanel--plain euiPanel--hasShadow"
              style={
                Object {
                  "maxHeight": 560,
                  "minHeight": 308,
                  "minWidth": 433,
                }
              }
            >
              <EuiFlexGroup
                gutterSize="xs"
                justifyContent="spaceBetween"
              >
                <div
                  className="euiFlexGroup euiFlexGroup--gutterExtraSmall euiFlexGroup--justifyContentSpaceBetween euiFlexGroup--directionRow euiFlexGroup--responsive"
                >
                  <PanelTitle
                    title="Trace error rate over time"
                  >
                    <EuiText
                      size="m"
                    >
                      <div
                        className="euiText euiText--medium"
                      >
                        <span
                          className="panel-title"
                        >
                          Trace error rate over time
                        </span>
                      </div>
                    </EuiText>
                  </PanelTitle>
                  <EuiButtonGroup
                    buttonSize="s"
                    color="text"
                    idSelected="error_rate"
                    onChange={[Function]}
                    options={
                      Array [
                        Object {
                          "data-test-subj": "errors-toggle",
                          "id": "error_rate",
                          "label": "Errors",
                        },
                        Object {
                          "data-test-subj": "throughput-toggle",
                          "id": "throughput",
                          "label": "Request rate",
                        },
                      ]
                    }
                  >
                    <fieldset
                      className="euiButtonGroup euiButtonGroup--small euiButtonGroup--text"
                      disabled={false}
                    >
                      <EuiScreenReaderOnly>
                        <legend
                          className="euiScreenReaderOnly"
                        />
                      </EuiScreenReaderOnly>
                      <div
                        className="euiButtonGroup__buttons"
                      >
                        <EuiButtonGroupButton
                          color="text"
                          data-test-subj="errors-toggle"
                          element="label"
                          id="error_rate"
                          isDisabled={false}
                          isIconOnly={false}
                          isSelected={true}
                          key="0"
                          label="Errors"
                          name="random_html_id"
                          onChange={[Function]}
                          size="s"
                        >
                          <EuiButtonDisplay
                            baseClassName="euiButtonGroupButton"
                            className="euiButtonGroupButton-isSelected"
                            color="text"
                            data-test-subj="errors-toggle"
                            element="label"
                            fill={true}
                            htmlFor="random_html_id"
                            isDisabled={false}
                            onClick={[Function]}
                            size="s"
                            textProps={
                              Object {
                                "className": "euiButtonGroupButton__textShift",
                                "data-text": "Errors",
                                "ref": [Function],
                                "title": "Errors",
                              }
                            }
                          >
                            <label
                              className="euiButtonGroupButton euiButtonGroupButton--text euiButtonGroupButton--small euiButtonGroupButton--fill euiButtonGroupButton-isSelected"
                              data-test-subj="errors-toggle"
                              disabled={false}
                              htmlFor="random_html_id"
                              onClick={[Function]}
                              style={
                                Object {
                                  "minWidth": undefined,
                                }
                              }
                            >
                              <EuiButtonContent
                                className="euiButton__content"
                                iconGap="m"
                                iconSide="left"
                                textProps={
                                  Object {
                                    "className": "euiButton__text euiButtonGroupButton__textShift",
                                    "data-text": "Errors",
                                    "ref": [Function],
                                    "title": "Errors",
                                  }
                                }
                              >
                                <span
                                  className="euiButtonContent euiButton__content"
                                >
                                  <span
                                    className="euiButton__text euiButtonGroupButton__textShift"
                                    data-text="Errors"
                                    title="Errors"
                                  >
                                    <input
                                      checked={true}
                                      className="euiScreenReaderOnly"
                                      data-test-subj="error_rate"
                                      disabled={false}
                                      id="random_html_id"
                                      name="random_html_id"
                                      onChange={[Function]}
                                      type="radio"
                                    />
                                    Errors
                                  </span>
                                </span>
                              </EuiButtonContent>
                            </label>
                          </EuiButtonDisplay>
                        </EuiButtonGroupButton>
                        <EuiButtonGroupButton
                          color="text"
                          data-test-subj="throughput-toggle"
                          element="label"
                          id="throughput"
                          isDisabled={false}
                          isIconOnly={false}
                          isSelected={false}
                          key="1"
                          label="Request rate"
                          name="random_html_id"
                          onChange={[Function]}
                          size="s"
                        >
                          <EuiButtonDisplay
                            baseClassName="euiButtonGroupButton"
                            className=""
                            color="text"
                            data-test-subj="throughput-toggle"
                            element="label"
                            fill={false}
                            htmlFor="random_html_id"
                            isDisabled={false}
                            onClick={[Function]}
                            size="s"
                            textProps={
                              Object {
                                "className": "euiButtonGroupButton__textShift",
                                "data-text": "Request rate",
                                "ref": [Function],
                                "title": "Request rate",
                              }
                            }
                          >
                            <label
                              className="euiButtonGroupButton euiButtonGroupButton--text euiButtonGroupButton--small"
                              data-test-subj="throughput-toggle"
                              disabled={false}
                              htmlFor="random_html_id"
                              onClick={[Function]}
                              style={
                                Object {
                                  "minWidth": undefined,
                                }
                              }
                            >
                              <EuiButtonContent
                                className="euiButton__content"
                                iconGap="m"
                                iconSide="left"
                                textProps={
                                  Object {
                                    "className": "euiButton__text euiButtonGroupButton__textShift",
                                    "data-text": "Request rate",
                                    "ref": [Function],
                                    "title": "Request rate",
                                  }
                                }
                              >
                                <span
                                  className="euiButtonContent euiButton__content"
                                >
                                  <span
                                    className="euiButton__text euiButtonGroupButton__textShift"
                                    data-text="Request rate"
                                    title="Request rate"
                                  >
                                    <input
                                      checked={false}
                                      className="euiScreenReaderOnly"
                                      data-test-subj="throughput"
                                      disabled={false}
                                      id="random_html_id"
                                      name="random_html_id"
                                      onChange={[Function]}
                                      type="radio"
                                    />
                                    Request rate
                                  </span>
                                </span>
                              </EuiButtonContent>
                            </label>
                          </EuiButtonDisplay>
                        </EuiButtonGroupButton>
                      </div>
                    </fieldset>
                  </EuiButtonGroup>
                </div>
              </EuiFlexGroup>
              <div
                className="center-loading-div"
              >
                <EuiLoadingChart
                  size="l"
                >
                  <span
                    className="euiLoadingChart euiLoadingChart--large"
                  >
                    <span
                      className="euiLoadingChart__bar"
                    />
                    <span
                      className="euiLoadingChart__bar"
                    />
                    <span
                      className="euiLoadingChart__bar"
                    />
                    <span
                      className="euiLoadingChart__bar"
                    />
                  </span>
                </EuiLoadingChart>
              </div>
            </div>
          </EuiPanel>
        </ErrorRatePlt>
        <ErrorRatesTable
          addFilter={[Function]}
          addFilters={[Function]}
          addPercentileFilter={[Function]}
          filters={Array []}
          isErrorRateTrendLoading={true}
          isThroughputTrendLoading={true}
          items={Array []}
          jaegerErrorRatePltItems={
            Object {
              "fixedInterval": "1h",
              "items": Array [],
            }
          }
          jaegerErrorTableItems={Array []}
          jaegerTableItems={Array []}
          loading={true}
          page="dashboard"
          setEndTime={[MockFunction]}
          setRedirect={[Function]}
          setStartTime={[MockFunction]}
          throughPutItems={
            Object {
              "fixedInterval": "1h",
              "items": Array [],
            }
          }
          title="Top 5 Service and Operation Errors"
        >
          <EuiPanel>
            <div
              className="euiPanel euiPanel--paddingMedium euiPanel--borderRadiusMedium euiPanel--plain euiPanel--hasShadow"
            >
              <EuiFlexGroup
                alignItems="center"
                gutterSize="s"
              >
                <div
                  className="euiFlexGroup euiFlexGroup--gutterSmall euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow euiFlexGroup--responsive"
                >
                  <EuiFlexItem
                    grow={10}
                  >
                    <div
                      className="euiFlexItem euiFlexItem--flexGrow10"
                    >
                      <PanelTitle
                        title="Top 5 Service and Operation Errors"
                        totalItems={0}
                      >
                        <EuiText
                          size="m"
                        >
                          <div
                            className="euiText euiText--medium"
                          >
                            <span
                              className="panel-title"
                            >
                              Top 5 Service and Operation Errors
                            </span>
                            <span
                              className="panel-title-count"
                            >
                               (0)
                            </span>
                          </div>
                        </EuiText>
                      </PanelTitle>
                    </div>
                  </EuiFlexItem>
                </div>
              </EuiFlexGroup>
              <EuiSpacer
                size="m"
              >
                <div
                  className="euiSpacer euiSpacer--m"
                />
              </EuiSpacer>
              <EuiHorizontalRule
                margin="none"
              >
                <hr
                  className="euiHorizontalRule euiHorizontalRule--full"
                />
              </EuiHorizontalRule>
              <EuiInMemoryTable
                columns={
                  Array [
                    Object {
                      "align": "left",
                      "field": "dashboard_trace_group_name",
                      "name": <EuiToolTip
                        content={
                          <EuiText
                            size="xs"
                          >
                            Traces of all requests that share a common API and operation at the start of distributed tracing instrumentation.
                          </EuiText>
                        }
                        delay="regular"
                        position="top"
                      >
                        <React.Fragment>
                          <div>
                            Service and Operation Name
                             
                            <EuiIcon
                              className="eui-alignTop"
                              color="subdued"
                              size="s"
                              type="questionInCircle"
                            />
                          </div>
                          <div>
                             
                          </div>
                        </React.Fragment>
                      </EuiToolTip>,
                      "render": [Function],
                      "sortable": true,
                    },
                    Object {
                      "align": "right",
                      "dataType": "number",
                      "field": "dashboard_average_latency",
                      "name": <EuiToolTip
                        content={
                          <EuiText
                            size="xs"
                          >
                            Average latency of traces within a trace group in the selected time range.
                          </EuiText>
                        }
                        delay="regular"
                        position="top"
                      >
                        <React.Fragment>
                          <div>
                            Average duration (ms)
                             
                            <EuiIcon
                              className="eui-alignTop"
                              color="subdued"
                              size="s"
                              type="questionInCircle"
                            />
                          </div>
                          <div>
                             
                          </div>
                        </React.Fragment>
                      </EuiToolTip>,
                      "render": [Function],
                      "sortable": true,
                    },
                    Object {
                      "align": "right",
                      "field": "dashboard_error_rate",
                      "name": <EuiToolTip
                        content={
                          <EuiText
                            size="xs"
                          >
                            Error rate based on count of trace errors within a trace group in the selected time range.
                          </EuiText>
                        }
                        delay="regular"
                        position="top"
                      >
                        <React.Fragment>
                          <div>
                            Error rate
                             
                            <EuiIcon
                              className="eui-alignTop"
                              color="subdued"
                              size="s"
                              type="questionInCircle"
                            />
                          </div>
                          <div>
                             
                          </div>
                        </React.Fragment>
                      </EuiToolTip>,
                      "render": [Function],
                      "sortable": false,
                    },
                    Object {
                      "align": "right",
                      "field": "dashboard_traces",
                      "name": <EuiToolTip
                        content={
                          <EuiText
                            size="xs"
                          >
                            Count of traces with unique trace identifiers in the selected time range.
                          </EuiText>
                        }
                        delay="regular"
                        position="top"
                      >
                        <React.Fragment>
                          <div>
                            Traces
                             
                            <EuiIcon
                              className="eui-alignTop"
                              color="subdued"
                              size="s"
                              type="questionInCircle"
                            />
                          </div>
                          <div>
                             
                          </div>
                        </React.Fragment>
                      </EuiToolTip>,
                      "render": [Function],
                      "sortable": true,
                    },
                  ]
                }
                data-test-subj="dashboardTable"
                items={Array []}
                loading={true}
                onTableChange={[Function]}
                pagination={
                  Object {
                    "initialPageSize": 5,
                    "pageSizeOptions": Array [
                      5,
                    ],
                  }
                }
                responsive={true}
                sorting={
                  Object {
                    "sort": Object {
                      "direction": "desc",
                      "field": "dashboard_latency_variance",
                    },
                  }
                }
                tableLayout="auto"
              >
                <EuiBasicTable
                  columns={
                    Array [
                      Object {
                        "align": "left",
                        "field": "dashboard_trace_group_name",
                        "name": <EuiToolTip
                          content={
                            <EuiText
                              size="xs"
                            >
                              Traces of all requests that share a common API and operation at the start of distributed tracing instrumentation.
                            </EuiText>
                          }
                          delay="regular"
                          position="top"
                        >
                          <React.Fragment>
                            <div>
                              Service and Operation Name
                               
                              <EuiIcon
                                className="eui-alignTop"
                                color="subdued"
                                size="s"
                                type="questionInCircle"
                              />
                            </div>
                            <div>
                               
                            </div>
                          </React.Fragment>
                        </EuiToolTip>,
                        "render": [Function],
                        "sortable": true,
                      },
                      Object {
                        "align": "right",
                        "dataType": "number",
                        "field": "dashboard_average_latency",
                        "name": <EuiToolTip
                          content={
                            <EuiText
                              size="xs"
                            >
                              Average latency of traces within a trace group in the selected time range.
                            </EuiText>
                          }
                          delay="regular"
                          position="top"
                        >
                          <React.Fragment>
                            <div>
                              Average duration (ms)
                               
                              <EuiIcon
                                className="eui-alignTop"
                                color="subdued"
                                size="s"
                                type="questionInCircle"
                              />
                            </div>
                            <div>
                               
                            </div>
                          </React.Fragment>
                        </EuiToolTip>,
                        "render": [Function],
                        "sortable": true,
                      },
                      Object {
                        "align": "right",
                        "field": "dashboard_error_rate",
                        "name": <EuiToolTip
                          content={
                            <EuiText
                              size="xs"
                            >
                              Error rate based on count of trace errors within a trace group in the selected time range.
                            </EuiText>
                          }
                          delay="regular"
                          position="top"
                        >
                          <React.Fragment>
                            <div>
                              Error rate
                               
                              <EuiIcon
                                className="eui-alignTop"
                                color="subdued"
                                size="s"
                                type="questionInCircle"
                              />
                            </div>
                            <div>
                               
                            </div>
                          </React.Fragment>
                        </EuiToolTip>,
                        "render": [Function],
                        "sortable": false,
                      },
                      Object {
                        "align": "right",
                        "field": "dashboard_traces",
                        "name": <EuiToolTip
                          content={
                            <EuiText
                              size="xs"
                            >
                              Count of traces with unique trace identifiers in the selected time range.
                            </EuiText>
                          }
                          delay="regular"
                          position="top"
                        >
                          <React.Fragment>
                            <div>
                              Traces
                               
                              <EuiIcon
                                className="eui-alignTop"
                                color="subdued"
                                size="s"
                                type="questionInCircle"
                              />
                            </div>
                            <div>
                               
                            </div>
                          </React.Fragment>
                        </EuiToolTip>,
                        "render": [Function],
                        "sortable": true,
                      },
                    ]
                  }
                  data-test-subj="dashboardTable"
                  items={Array []}
                  loading={true}
                  noItemsMessage="No items found"
                  onChange={[Function]}
                  pagination={
                    Object {
                      "hidePerPageOptions": undefined,
                      "pageIndex": 0,
                      "pageSize": 5,
                      "pageSizeOptions": Array [
                        5,
                      ],
                      "totalItemCount": 0,
                    }
                  }
                  responsive={true}
                  sorting={
                    Object {
                      "allowNeutralSort": true,
                      "sort": undefined,
                    }
                  }
                  tableLayout="auto"
                >
                  <div
                    className="euiBasicTable euiBasicTable-loading"
                    data-test-subj="dashboardTable"
                  >
                    <div>
                      <EuiTableHeaderMobile>
                        <div
                          className="euiTableHeaderMobile"
                        >
                          <EuiFlexGroup
                            alignItems="baseline"
                            justifyContent="spaceBetween"
                            responsive={false}
                          >
                            <div
                              className="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--alignItemsBaseline euiFlexGroup--justifyContentSpaceBetween euiFlexGroup--directionRow"
                            >
                              <EuiFlexItem
                                grow={false}
                              >
                                <div
                                  className="euiFlexItem euiFlexItem--flexGrowZero"
                                />
                              </EuiFlexItem>
                              <EuiFlexItem
                                grow={false}
                              >
                                <div
                                  className="euiFlexItem euiFlexItem--flexGrowZero"
                                >
                                  <EuiTableSortMobile
                                    items={
                                      Array [
                                        Object {
                                          "isSortAscending": undefined,
                                          "isSorted": false,
                                          "key": "_data_s_dashboard_trace_group_name_0",
                                          "name": <EuiToolTip
                                            content={
                                              <EuiText
                                                size="xs"
                                              >
                                                Traces of all requests that share a common API and operation at the start of distributed tracing instrumentation.
                                              </EuiText>
                                            }
                                            delay="regular"
                                            position="top"
                                          >
                                            <React.Fragment>
                                              <div>
                                                Service and Operation Name
                                                 
                                                <EuiIcon
                                                  className="eui-alignTop"
                                                  color="subdued"
                                                  size="s"
                                                  type="questionInCircle"
                                                />
                                              </div>
                                              <div>
                                                 
                                              </div>
                                            </React.Fragment>
                                          </EuiToolTip>,
                                          "onSort": [Function],
                                        },
                                        Object {
                                          "isSortAscending": undefined,
                                          "isSorted": false,
                                          "key": "_data_s_dashboard_average_latency_1",
                                          "name": <EuiToolTip
                                            content={
                                              <EuiText
                                                size="xs"
                                              >
                                                Average latency of traces within a trace group in the selected time range.
                                              </EuiText>
                                            }
                                            delay="regular"
                                            position="top"
                                          >
                                            <React.Fragment>
                                              <div>
                                                Average duration (ms)
                                                 
                                                <EuiIcon
                                                  className="eui-alignTop"
                                                  color="subdued"
                                                  size="s"
                                                  type="questionInCircle"
                                                />
                                              </div>
                                              <div>
                                                 
                                              </div>
                                            </React.Fragment>
                                          </EuiToolTip>,
                                          "onSort": [Function],
                                        },
                                        Object {
                                          "isSortAscending": undefined,
                                          "isSorted": false,
                                          "key": "_data_s_dashboard_traces_3",
                                          "name": <EuiToolTip
                                            content={
                                              <EuiText
                                                size="xs"
                                              >
                                                Count of traces with unique trace identifiers in the selected time range.
                                              </EuiText>
                                            }
                                            delay="regular"
                                            position="top"
                                          >
                                            <React.Fragment>
                                              <div>
                                                Traces
                                                 
                                                <EuiIcon
                                                  className="eui-alignTop"
                                                  color="subdued"
                                                  size="s"
                                                  type="questionInCircle"
                                                />
                                              </div>
                                              <div>
                                                 
                                              </div>
                                            </React.Fragment>
                                          </EuiToolTip>,
                                          "onSort": [Function],
                                        },
                                      ]
                                    }
                                  >
                                    <div
                                      className="euiTableSortMobile"
                                    >
                                      <EuiPopover
                                        anchorPosition="downRight"
                                        button={
                                          <EuiButtonEmpty
                                            flush="right"
                                            iconSide="right"
                                            iconType="arrowDown"
                                            onClick={[Function]}
                                            size="xs"
                                          >
                                            <EuiI18n
                                              default="Sorting"
                                              token="euiTableSortMobile.sorting"
                                            />
                                          </EuiButtonEmpty>
                                        }
                                        closePopover={[Function]}
                                        display="inlineBlock"
                                        hasArrow={true}
                                        isOpen={false}
                                        ownFocus={true}
                                        panelPaddingSize="none"
                                      >
                                        <div
                                          className="euiPopover euiPopover--anchorDownRight"
                                        >
                                          <div
                                            className="euiPopover__anchor"
                                          >
                                            <EuiButtonEmpty
                                              flush="right"
                                              iconSide="right"
                                              iconType="arrowDown"
                                              onClick={[Function]}
                                              size="xs"
                                            >
                                              <button
                                                className="euiButtonEmpty euiButtonEmpty--primary euiButtonEmpty--xSmall euiButtonEmpty--flushRight"
                                                disabled={false}
                                                onClick={[Function]}
                                                type="button"
                                              >
                                                <EuiButtonContent
                                                  className="euiButtonEmpty__content"
                                                  iconGap="m"
                                                  iconSide="right"
                                                  iconSize="s"
                                                  iconType="arrowDown"
                                                  textProps={
                                                    Object {
                                                      "className": "euiButtonEmpty__text",
                                                    }
                                                  }
                                                >
                                                  <span
                                                    className="euiButtonContent euiButtonContent--iconRight euiButtonEmpty__content"
                                                  >
                                                    <EuiIcon
                                                      className="euiButtonContent__icon"
                                                      color="inherit"
                                                      size="s"
                                                      type="arrowDown"
                                                    >
                                                      <EuiIconArrowDown
                                                        aria-hidden={true}
                                                        className="euiIcon euiIcon--small euiIcon--inherit euiButtonContent__icon"
                                                        focusable="false"
                                                        role="img"
                                                        style={null}
                                                      >
                                                        <svg
                                                          aria-hidden={true}
                                                          className="euiIcon euiIcon--small euiIcon--inherit euiButtonContent__icon"
                                                          focusable="false"
                                                          height={16}
                                                          role="img"
                                                          style={null}
                                                          viewBox="0 0 16 16"
                                                          width={16}
                                                          xmlns="http://www.w3.org/2000/svg"
                                                        >
                                                          <path
                                                            d="M13.069 5.157 8.384 9.768a.546.546 0 0 1-.768 0L2.93 5.158a.552.552 0 0 0-.771 0 .53.53 0 0 0 0 .759l4.684 4.61c.641.631 1.672.63 2.312 0l4.684-4.61a.53.53 0 0 0 0-.76.552.552 0 0 0-.771 0Z"
                                                            fillRule="non-zero"
                                                          />
                                                        </svg>
                                                      </EuiIconArrowDown>
                                                    </EuiIcon>
                                                    <span
                                                      className="euiButtonEmpty__text"
                                                    >
                                                      <EuiI18n
                                                        default="Sorting"
                                                        token="euiTableSortMobile.sorting"
                                                      >
                                                        Sorting
                                                      </EuiI18n>
                                                    </span>
                                                  </span>
                                                </EuiButtonContent>
                                              </button>
                                            </EuiButtonEmpty>
                                          </div>
                                        </div>
                                      </EuiPopover>
                                    </div>
                                  </EuiTableSortMobile>
                                </div>
                              </EuiFlexItem>
                            </div>
                          </EuiFlexGroup>
                        </div>
                      </EuiTableHeaderMobile>
                      <EuiTable
                        id="random_html_id"
                        responsive={true}
                        tableLayout="auto"
                      >
                        <table
                          className="euiTable euiTable--responsive euiTable--auto"
                          id="random_html_id"
                          tabIndex={-1}
                        >
                          <EuiScreenReaderOnly>
                            <caption
                              className="euiScreenReaderOnly euiTableCaption"
                            >
                              <EuiDelayRender
                                delay={500}
                              />
                            </caption>
                          </EuiScreenReaderOnly>
                          <EuiTableHeader>
                            <thead>
                              <tr>
                                <EuiTableHeaderCell
                                  align="left"
                                  data-test-subj="tableHeaderCell_dashboard_trace_group_name_0"
                                  isSorted={false}
                                  key="_data_h_dashboard_trace_group_name_0"
                                  onSort={[Function]}
                                >
                                  <th
                                    aria-live="polite"
                                    aria-sort="none"
                                    className="euiTableHeaderCell"
                                    data-test-subj="tableHeaderCell_dashboard_trace_group_name_0"
                                    role="columnheader"
                                    scope="col"
                                    style={
                                      Object {
                                        "width": undefined,
                                      }
                                    }
                                  >
                                    <button
                                      className="euiTableHeaderButton"
                                      data-test-subj="tableHeaderSortButton"
                                      onClick={[Function]}
                                      type="button"
                                    >
                                      <CellContents
                                        className="euiTableCellContent"
                                        isSorted={false}
                                        showSortMsg={true}
                                      >
                                        <span
                                          className="euiTableCellContent"
                                        >
                                          <EuiInnerText>
                                            <EuiI18n
                                              default="{innerText}; {description}"
                                              token="euiTableHeaderCell.titleTextWithDesc"
                                              values={
                                                Object {
                                                  "description": undefined,
                                                  "innerText": "Service and Operation Name  ",
                                                }
                                              }
                                            >
                                              <span
                                                className="euiTableCellContent__text"
                                                title="Service and Operation Name  "
                                              >
                                                <EuiToolTip
                                                  content={
                                                    <EuiText
                                                      size="xs"
                                                    >
                                                      Traces of all requests that share a common API and operation at the start of distributed tracing instrumentation.
                                                    </EuiText>
                                                  }
                                                  delay="regular"
                                                  position="top"
                                                >
                                                  <span
                                                    className="euiToolTipAnchor"
                                                    onKeyUp={[Function]}
                                                    onMouseOut={[Function]}
                                                    onMouseOver={[Function]}
                                                  >
                                                    <div>
                                                      Service and Operation Name
                                                       
                                                      <EuiIcon
                                                        className="eui-alignTop"
                                                        color="subdued"
                                                        size="s"
                                                        type="questionInCircle"
                                                      >
                                                        <EuiIconQuestionInCircle
                                                          aria-hidden={true}
                                                          className="euiIcon euiIcon--small euiIcon--subdued eui-alignTop"
                                                          focusable="false"
                                                          role="img"
                                                          style={null}
                                                        >
                                                          <svg
                                                            aria-hidden={true}
                                                            className="euiIcon euiIcon--small euiIcon--subdued eui-alignTop"
                                                            focusable="false"
                                                            height={16}
                                                            role="img"
                                                            style={null}
                                                            viewBox="0 0 16 16"
                                                            width={16}
                                                            xmlns="http://www.w3.org/2000/svg"
                                                          >
                                                            <path
                                                              d="M8 14A6 6 0 1 1 8 2a6 6 0 0 1 0 12Zm0-1A5 5 0 1 0 8 3a5 5 0 0 0 0 10Zm-.186-1.065A.785.785 0 0 1 7 11.12c0-.48.34-.82.814-.82.475 0 .809.34.809.82 0 .475-.334.815-.809.815ZM5.9 6.317C5.96 5.168 6.755 4.4 8.048 4.4c1.218 0 2.091.759 2.091 1.8 0 .736-.36 1.304-1.03 1.707-.56.33-.717.56-.717 1.022v.305l-.1.1H7.47l-.1-.1v-.431c-.005-.646.302-1.104.987-1.514.527-.322.708-.59.708-1.047 0-.536-.416-.91-1.05-.91-.652 0-1.064.374-1.112.998l-.1.092H6l-.1-.105Z"
                                                            />
                                                          </svg>
                                                        </EuiIconQuestionInCircle>
                                                      </EuiIcon>
                                                    </div>
                                                    <div>
                                                       
                                                    </div>
                                                  </span>
                                                </EuiToolTip>
                                              </span>
                                            </EuiI18n>
                                          </EuiInnerText>
                                        </span>
                                      </CellContents>
                                    </button>
                                  </th>
                                </EuiTableHeaderCell>
                                <EuiTableHeaderCell
                                  align="right"
                                  data-test-subj="tableHeaderCell_dashboard_average_latency_1"
                                  isSorted={false}
                                  key="_data_h_dashboard_average_latency_1"
                                  onSort={[Function]}
                                >
                                  <th
                                    aria-live="polite"
                                    aria-sort="none"
                                    className="euiTableHeaderCell"
                                    data-test-subj="tableHeaderCell_dashboard_average_latency_1"
                                    role="columnheader"
                                    scope="col"
                                    style={
                                      Object {
                                        "width": undefined,
                                      }
                                    }
                                  >
                                    <button
                                      className="euiTableHeaderButton"
                                      data-test-subj="tableHeaderSortButton"
                                      onClick={[Function]}
                                      type="button"
                                    >
                                      <CellContents
                                        className="euiTableCellContent euiTableCellContent--alignRight"
                                        isSorted={false}
                                        showSortMsg={true}
                                      >
                                        <span
                                          className="euiTableCellContent euiTableCellContent--alignRight"
                                        >
                                          <EuiInnerText>
                                            <EuiI18n
                                              default="{innerText}; {description}"
                                              token="euiTableHeaderCell.titleTextWithDesc"
                                              values={
                                                Object {
                                                  "description": undefined,
                                                  "innerText": "Average duration (ms)  ",
                                                }
                                              }
                                            >
                                              <span
                                                className="euiTableCellContent__text"
                                                title="Average duration (ms)  "
                                              >
                                                <EuiToolTip
                                                  content={
                                                    <EuiText
                                                      size="xs"
                                                    >
                                                      Average latency of traces within a trace group in the selected time range.
                                                    </EuiText>
                                                  }
                                                  delay="regular"
                                                  position="top"
                                                >
                                                  <span
                                                    className="euiToolTipAnchor"
                                                    onKeyUp={[Function]}
                                                    onMouseOut={[Function]}
                                                    onMouseOver={[Function]}
                                                  >
                                                    <div>
                                                      Average duration (ms)
                                                       
                                                      <EuiIcon
                                                        className="eui-alignTop"
                                                        color="subdued"
                                                        size="s"
                                                        type="questionInCircle"
                                                      >
                                                        <EuiIconQuestionInCircle
                                                          aria-hidden={true}
                                                          className="euiIcon euiIcon--small euiIcon--subdued eui-alignTop"
                                                          focusable="false"
                                                          role="img"
                                                          style={null}
                                                        >
                                                          <svg
                                                            aria-hidden={true}
                                                            className="euiIcon euiIcon--small euiIcon--subdued eui-alignTop"
                                                            focusable="false"
                                                            height={16}
                                                            role="img"
                                                            style={null}
                                                            viewBox="0 0 16 16"
                                                            width={16}
                                                            xmlns="http://www.w3.org/2000/svg"
                                                          >
                                                            <path
                                                              d="M8 14A6 6 0 1 1 8 2a6 6 0 0 1 0 12Zm0-1A5 5 0 1 0 8 3a5 5 0 0 0 0 10Zm-.186-1.065A.785.785 0 0 1 7 11.12c0-.48.34-.82.814-.82.475 0 .809.34.809.82 0 .475-.334.815-.809.815ZM5.9 6.317C5.96 5.168 6.755 4.4 8.048 4.4c1.218 0 2.091.759 2.091 1.8 0 .736-.36 1.304-1.03 1.707-.56.33-.717.56-.717 1.022v.305l-.1.1H7.47l-.1-.1v-.431c-.005-.646.302-1.104.987-1.514.527-.322.708-.59.708-1.047 0-.536-.416-.91-1.05-.91-.652 0-1.064.374-1.112.998l-.1.092H6l-.1-.105Z"
                                                            />
                                                          </svg>
                                                        </EuiIconQuestionInCircle>
                                                      </EuiIcon>
                                                    </div>
                                                    <div>
                                                       
                                                    </div>
                                                  </span>
                                                </EuiToolTip>
                                              </span>
                                            </EuiI18n>
                                          </EuiInnerText>
                                        </span>
                                      </CellContents>
                                    </button>
                                  </th>
                                </EuiTableHeaderCell>
                                <EuiTableHeaderCell
                                  align="right"
                                  data-test-subj="tableHeaderCell_dashboard_error_rate_2"
                                  key="_data_h_dashboard_error_rate_2"
                                >
                                  <th
                                    className="euiTableHeaderCell"
                                    data-test-subj="tableHeaderCell_dashboard_error_rate_2"
                                    role="columnheader"
                                    scope="col"
                                    style={
                                      Object {
                                        "width": undefined,
                                      }
                                    }
                                  >
                                    <CellContents
                                      className="euiTableCellContent euiTableCellContent--alignRight"
                                      showSortMsg={false}
                                    >
                                      <span
                                        className="euiTableCellContent euiTableCellContent--alignRight"
                                      >
                                        <EuiInnerText>
                                          <EuiI18n
                                            default="{innerText}; {description}"
                                            token="euiTableHeaderCell.titleTextWithDesc"
                                            values={
                                              Object {
                                                "description": undefined,
                                                "innerText": "Error rate  ",
                                              }
                                            }
                                          >
                                            <span
                                              className="euiTableCellContent__text"
                                              title="Error rate  "
                                            >
                                              <EuiToolTip
                                                content={
                                                  <EuiText
                                                    size="xs"
                                                  >
                                                    Error rate based on count of trace errors within a trace group in the selected time range.
                                                  </EuiText>
                                                }
                                                delay="regular"
                                                position="top"
                                              >
                                                <span
                                                  className="euiToolTipAnchor"
                                                  onKeyUp={[Function]}
                                                  onMouseOut={[Function]}
                                                  onMouseOver={[Function]}
                                                >
                                                  <div>
                                                    Error rate
                                                     
                                                    <EuiIcon
                                                      className="eui-alignTop"
                                                      color="subdued"
                                                      size="s"
                                                      type="questionInCircle"
                                                    >
                                                      <EuiIconQuestionInCircle
                                                        aria-hidden={true}
                                                        className="euiIcon euiIcon--small euiIcon--subdued eui-alignTop"
                                                        focusable="false"
                                                        role="img"
                                                        style={null}
                                                      >
                                                        <svg
                                                          aria-hidden={true}
                                                          className="euiIcon euiIcon--small euiIcon--subdued eui-alignTop"
                                                          focusable="false"
                                                          height={16}
                                                          role="img"
                                                          style={null}
                                                          viewBox="0 0 16 16"
                                                          width={16}
                                                          xmlns="http://www.w3.org/2000/svg"
                                                        >
                                                          <path
                                                            d="M8 14A6 6 0 1 1 8 2a6 6 0 0 1 0 12Zm0-1A5 5 0 1 0 8 3a5 5 0 0 0 0 10Zm-.186-1.065A.785.785 0 0 1 7 11.12c0-.48.34-.82.814-.82.475 0 .809.34.809.82 0 .475-.334.815-.809.815ZM5.9 6.317C5.96 5.168 6.755 4.4 8.048 4.4c1.218 0 2.091.759 2.091 1.8 0 .736-.36 1.304-1.03 1.707-.56.33-.717.56-.717 1.022v.305l-.1.1H7.47l-.1-.1v-.431c-.005-.646.302-1.104.987-1.514.527-.322.708-.59.708-1.047 0-.536-.416-.91-1.05-.91-.652 0-1.064.374-1.112.998l-.1.092H6l-.1-.105Z"
                                                          />
                                                        </svg>
                                                      </EuiIconQuestionInCircle>
                                                    </EuiIcon>
                                                  </div>
                                                  <div>
                                                     
                                                  </div>
                                                </span>
                                              </EuiToolTip>
                                            </span>
                                          </EuiI18n>
                                        </EuiInnerText>
                                      </span>
                                    </CellContents>
                                  </th>
                                </EuiTableHeaderCell>
                                <EuiTableHeaderCell
                                  align="right"
                                  data-test-subj="tableHeaderCell_dashboard_traces_3"
                                  isSorted={false}
                                  key="_data_h_dashboard_traces_3"
                                  onSort={[Function]}
                                >
                                  <th
                                    aria-live="polite"
                                    aria-sort="none"
                                    className="euiTableHeaderCell"
                                    data-test-subj="tableHeaderCell_dashboard_traces_3"
                                    role="columnheader"
                                    scope="col"
                                    style={
                                      Object {
                                        "width": undefined,
                                      }
                                    }
                                  >
                                    <button
                                      className="euiTableHeaderButton"
                                      data-test-subj="tableHeaderSortButton"
                                      onClick={[Function]}
                                      type="button"
                                    >
                                      <CellContents
                                        className="euiTableCellContent euiTableCellContent--alignRight"
                                        isSorted={false}
                                        showSortMsg={true}
                                      >
                                        <span
                                          className="euiTableCellContent euiTableCellContent--alignRight"
                                        >
                                          <EuiInnerText>
                                            <EuiI18n
                                              default="{innerText}; {description}"
                                              token="euiTableHeaderCell.titleTextWithDesc"
                                              values={
                                                Object {
                                                  "description": undefined,
                                                  "innerText": "Traces  ",
                                                }
                                              }
                                            >
                                              <span
                                                className="euiTableCellContent__text"
                                                title="Traces  "
                                              >
                                                <EuiToolTip
                                                  content={
                                                    <EuiText
                                                      size="xs"
                                                    >
                                                      Count of traces with unique trace identifiers in the selected time range.
                                                    </EuiText>
                                                  }
                                                  delay="regular"
                                                  position="top"
                                                >
                                                  <span
                                                    className="euiToolTipAnchor"
                                                    onKeyUp={[Function]}
                                                    onMouseOut={[Function]}
                                                    onMouseOver={[Function]}
                                                  >
                                                    <div>
                                                      Traces
                                                       
                                                      <EuiIcon
                                                        className="eui-alignTop"
                                                        color="subdued"
                                                        size="s"
                                                        type="questionInCircle"
                                                      >
                                                        <EuiIconQuestionInCircle
                                                          aria-hidden={true}
                                                          className="euiIcon euiIcon--small euiIcon--subdued eui-alignTop"
                                                          focusable="false"
                                                          role="img"
                                                          style={null}
                                                        >
                                                          <svg
                                                            aria-hidden={true}
                                                            className="euiIcon euiIcon--small euiIcon--subdued eui-alignTop"
                                                            focusable="false"
                                                            height={16}
                                                            role="img"
                                                            style={null}
                                                            viewBox="0 0 16 16"
                                                            width={16}
                                                            xmlns="http://www.w3.org/2000/svg"
                                                          >
                                                            <path
                                                              d="M8 14A6 6 0 1 1 8 2a6 6 0 0 1 0 12Zm0-1A5 5 0 1 0 8 3a5 5 0 0 0 0 10Zm-.186-1.065A.785.785 0 0 1 7 11.12c0-.48.34-.82.814-.82.475 0 .809.34.809.82 0 .475-.334.815-.809.815ZM5.9 6.317C5.96 5.168 6.755 4.4 8.048 4.4c1.218 0 2.091.759 2.091 1.8 0 .736-.36 1.304-1.03 1.707-.56.33-.717.56-.717 1.022v.305l-.1.1H7.47l-.1-.1v-.431c-.005-.646.302-1.104.987-1.514.527-.322.708-.59.708-1.047 0-.536-.416-.91-1.05-.91-.652 0-1.064.374-1.112.998l-.1.092H6l-.1-.105Z"
                                                            />
                                                          </svg>
                                                        </EuiIconQuestionInCircle>
                                                      </EuiIcon>
                                                    </div>
                                                    <div>
                                                       
                                                    </div>
                                                  </span>
                                                </EuiToolTip>
                                              </span>
                                            </EuiI18n>
                                          </EuiInnerText>
                                        </span>
                                      </CellContents>
                                    </button>
                                  </th>
                                </EuiTableHeaderCell>
                              </tr>
                            </thead>
                          </EuiTableHeader>
                          <EuiTableBody>
                            <tbody>
                              <EuiTableRow>
                                <tr
                                  className="euiTableRow"
                                >
                                  <EuiTableRowCell
                                    align="center"
                                    colSpan={4}
                                    isMobileFullWidth={true}
                                  >
                                    <td
                                      className="euiTableRowCell euiTableRowCell--isMobileFullWidth"
                                      colSpan={4}
                                      style={
                                        Object {
                                          "width": undefined,
                                        }
                                      }
                                    >
                                      <div
                                        className="euiTableCellContent euiTableCellContent--alignCenter"
                                      >
                                        <span
                                          className="euiTableCellContent__text"
                                        >
                                          No items found
                                        </span>
                                      </div>
                                    </td>
                                  </EuiTableRowCell>
                                </tr>
                              </EuiTableRow>
                            </tbody>
                          </EuiTableBody>
                        </table>
                      </EuiTable>
                    </div>
                  </div>
                </EuiBasicTable>
              </EuiInMemoryTable>
            </div>
          </EuiPanel>
        </ErrorRatesTable>
      </TopGroupsPage>
    </div>
  </DashboardContent>
</Dashboard>
`;
