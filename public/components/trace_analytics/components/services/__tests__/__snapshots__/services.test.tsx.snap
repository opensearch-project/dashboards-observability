// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Services component renders empty services page 1`] = `
<Services
  appConfigs={Array []}
  attributesFilterFields={Array []}
  childBreadcrumbs={
    Array [
      Object {
        "href": "#/trace_analytics/home",
        "text": "Trace analytics",
      },
      Object {
        "href": "#/trace_analytics/services",
        "text": "Services",
      },
    ]
  }
  chrome={
    Object {
      "addApplicationClass": [MockFunction],
      "docTitle": Object {
        "change": [MockFunction],
        "reset": [MockFunction],
      },
      "getApplicationClasses$": [MockFunction],
      "getBadge$": [MockFunction],
      "getBreadcrumbs$": [MockFunction],
      "getBreadcrumbsEnricher$": [MockFunction],
      "getCustomNavLink$": [MockFunction],
      "getHeaderComponent": [MockFunction],
      "getHeaderVariant$": [MockFunction],
      "getHelpExtension$": [MockFunction],
      "getIsNavDrawerLocked$": [MockFunction],
      "getIsVisible$": [MockFunction],
      "globalSearch": Object {
        "getAllSearchCommands": [MockFunction],
      },
      "logos": Object {
        "AnimatedMark": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_spinner_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_spinner_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_spinner_on_light.svg",
        },
        "Application": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_dashboards_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_dashboards_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_dashboards_on_light.svg",
        },
        "CenterMark": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_center_mark_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_center_mark_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_center_mark_on_light.svg",
        },
        "Mark": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_mark_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_mark_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_mark_on_light.svg",
        },
        "OpenSearch": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_on_light.svg",
        },
        "colorScheme": "light",
      },
      "navControls": Object {
        "getCenter$": [MockFunction],
        "getLeft$": [MockFunction],
        "getLeftBottom$": [MockFunction],
        "getRight$": [MockFunction],
        "registerCenter": [MockFunction],
        "registerLeft": [MockFunction],
        "registerLeftBottom": [MockFunction],
        "registerRight": [MockFunction],
      },
      "navGroup": Object {
        "getCurrentNavGroup$": [MockFunction],
        "getNavGroupEnabled": [MockFunction] {
          "calls": Array [
            Array [],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        },
        "getNavGroupsMap$": [MockFunction],
        "setCurrentNavGroup": [MockFunction],
      },
      "navLinks": Object {
        "enableForcedAppSwitcherNavigation": [MockFunction],
        "get": [MockFunction],
        "getAll": [MockFunction],
        "getForceAppSwitcherNavigation$": [MockFunction],
        "getNavLinks$": [MockFunction],
        "has": [MockFunction],
        "showOnly": [MockFunction],
        "update": [MockFunction],
      },
      "recentlyAccessed": Object {
        "add": [MockFunction],
        "get": [MockFunction],
        "get$": [MockFunction],
      },
      "removeApplicationClass": [MockFunction],
      "setAppTitle": [MockFunction],
      "setBadge": [MockFunction],
      "setBreadcrumbs": [MockFunction] {
        "calls": Array [
          Array [
            Array [
              Object {
                "href": "test#/",
                "text": "test",
              },
              Object {
                "href": "#/trace_analytics/home",
                "text": "Trace analytics",
              },
              Object {
                "href": "#/trace_analytics/services",
                "text": "Services",
              },
            ],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
      "setBreadcrumbsEnricher": [MockFunction],
      "setCustomNavLink": [MockFunction],
      "setHeaderVariant": [MockFunction],
      "setHelpExtension": [MockFunction],
      "setHelpSupportUrl": [MockFunction],
      "setIsVisible": [MockFunction],
    }
  }
  dataPrepperIndicesExist={true}
  dataSourceMDSId={
    Array [
      Object {
        "id": "",
        "label": "",
      },
    ]
  }
  endTime="now"
  filters={Array []}
  http={[MockFunction]}
  mode="data_prepper"
  modes={
    Array [
      Object {
        "id": "jaeger",
        "title": "Jaeger",
      },
      Object {
        "id": "data_prepper",
        "title": "Data Prepper",
      },
    ]
  }
  nameColumnAction={[Function]}
  page="services"
  parentBreadcrumb={
    Object {
      "href": "test#/",
      "text": "test",
    }
  }
  query=""
  setEndTime={[MockFunction]}
  setFilters={
    [MockFunction] {
      "calls": Array [
        Array [
          Array [],
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  setQuery={[MockFunction]}
  setStartTime={[MockFunction]}
  startTime="now-5m"
  traceColumnAction={[Function]}
>
  <ServicesContent
    appConfigs={Array []}
    attributesFilterFields={Array []}
    childBreadcrumbs={
      Array [
        Object {
          "href": "#/trace_analytics/home",
          "text": "Trace analytics",
        },
        Object {
          "href": "#/trace_analytics/services",
          "text": "Services",
        },
      ]
    }
    chrome={
      Object {
        "addApplicationClass": [MockFunction],
        "docTitle": Object {
          "change": [MockFunction],
          "reset": [MockFunction],
        },
        "getApplicationClasses$": [MockFunction],
        "getBadge$": [MockFunction],
        "getBreadcrumbs$": [MockFunction],
        "getBreadcrumbsEnricher$": [MockFunction],
        "getCustomNavLink$": [MockFunction],
        "getHeaderComponent": [MockFunction],
        "getHeaderVariant$": [MockFunction],
        "getHelpExtension$": [MockFunction],
        "getIsNavDrawerLocked$": [MockFunction],
        "getIsVisible$": [MockFunction],
        "globalSearch": Object {
          "getAllSearchCommands": [MockFunction],
        },
        "logos": Object {
          "AnimatedMark": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_spinner_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_spinner_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_spinner_on_light.svg",
          },
          "Application": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_dashboards_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_dashboards_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_dashboards_on_light.svg",
          },
          "CenterMark": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_center_mark_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_center_mark_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_center_mark_on_light.svg",
          },
          "Mark": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_mark_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_mark_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_mark_on_light.svg",
          },
          "OpenSearch": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_on_light.svg",
          },
          "colorScheme": "light",
        },
        "navControls": Object {
          "getCenter$": [MockFunction],
          "getLeft$": [MockFunction],
          "getLeftBottom$": [MockFunction],
          "getRight$": [MockFunction],
          "registerCenter": [MockFunction],
          "registerLeft": [MockFunction],
          "registerLeftBottom": [MockFunction],
          "registerRight": [MockFunction],
        },
        "navGroup": Object {
          "getCurrentNavGroup$": [MockFunction],
          "getNavGroupEnabled": [MockFunction] {
            "calls": Array [
              Array [],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": undefined,
              },
            ],
          },
          "getNavGroupsMap$": [MockFunction],
          "setCurrentNavGroup": [MockFunction],
        },
        "navLinks": Object {
          "enableForcedAppSwitcherNavigation": [MockFunction],
          "get": [MockFunction],
          "getAll": [MockFunction],
          "getForceAppSwitcherNavigation$": [MockFunction],
          "getNavLinks$": [MockFunction],
          "has": [MockFunction],
          "showOnly": [MockFunction],
          "update": [MockFunction],
        },
        "recentlyAccessed": Object {
          "add": [MockFunction],
          "get": [MockFunction],
          "get$": [MockFunction],
        },
        "removeApplicationClass": [MockFunction],
        "setAppTitle": [MockFunction],
        "setBadge": [MockFunction],
        "setBreadcrumbs": [MockFunction] {
          "calls": Array [
            Array [
              Array [
                Object {
                  "href": "test#/",
                  "text": "test",
                },
                Object {
                  "href": "#/trace_analytics/home",
                  "text": "Trace analytics",
                },
                Object {
                  "href": "#/trace_analytics/services",
                  "text": "Services",
                },
              ],
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        },
        "setBreadcrumbsEnricher": [MockFunction],
        "setCustomNavLink": [MockFunction],
        "setHeaderVariant": [MockFunction],
        "setHelpExtension": [MockFunction],
        "setHelpSupportUrl": [MockFunction],
        "setIsVisible": [MockFunction],
      }
    }
    dataPrepperIndicesExist={true}
    dataSourceMDSId={
      Array [
        Object {
          "id": "",
          "label": "",
        },
      ]
    }
    endTime="now"
    filters={Array []}
    http={[MockFunction]}
    mode="data_prepper"
    modes={
      Array [
        Object {
          "id": "jaeger",
          "title": "Jaeger",
        },
        Object {
          "id": "data_prepper",
          "title": "Data Prepper",
        },
      ]
    }
    nameColumnAction={[Function]}
    page="services"
    parentBreadcrumb={
      Object {
        "href": "test#/",
        "text": "test",
      }
    }
    query=""
    setEndTime={[MockFunction]}
    setFilters={
      [MockFunction] {
        "calls": Array [
          Array [
            Array [],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    setQuery={[MockFunction]}
    setStartTime={[MockFunction]}
    startTime="now-5m"
    traceColumnAction={[Function]}
  >
    <EuiPage
      paddingSize="m"
    >
      <div
        className="euiPage euiPage--paddingMedium euiPage--grow"
      >
        <EuiPageBody>
          <div
            className="euiPageBody euiPageBody--borderRadiusNone"
          >
            <EuiFlexGroup
              alignItems="center"
              gutterSize="s"
              justifyContent="spaceBetween"
            >
              <div
                className="euiFlexGroup euiFlexGroup--gutterSmall euiFlexGroup--alignItemsCenter euiFlexGroup--justifyContentSpaceBetween euiFlexGroup--directionRow euiFlexGroup--responsive"
              >
                <EuiFlexItem
                  grow={false}
                >
                  <div
                    className="euiFlexItem euiFlexItem--flexGrowZero"
                  >
                    <DataSourcePicker
                      modes={
                        Array [
                          Object {
                            "id": "jaeger",
                            "title": "Jaeger",
                          },
                          Object {
                            "id": "data_prepper",
                            "title": "Data Prepper",
                          },
                        ]
                      }
                      selectedMode="data_prepper"
                    >
                      <EuiPopover
                        anchorClassName="eui-textTruncate"
                        anchorPosition="downCenter"
                        button={
                          <EuiSmallButtonEmpty
                            className="dscIndexPattern__triggerButton"
                            color="text"
                            data-test-subj="indexPattern-switch-link"
                            flush="left"
                            iconSide="right"
                            iconType="arrowDown"
                            onClick={[Function]}
                            title="data_prepper"
                          >
                            Data Prepper
                          </EuiSmallButtonEmpty>
                        }
                        className="eui-textTruncate"
                        closePopover={[Function]}
                        display="inlineBlock"
                        hasArrow={true}
                        isOpen={false}
                        ownFocus={true}
                        panelPaddingSize="s"
                      >
                        <div
                          className="euiPopover euiPopover--anchorDownCenter eui-textTruncate"
                        >
                          <div
                            className="euiPopover__anchor eui-textTruncate"
                          >
                            <EuiSmallButtonEmpty
                              className="dscIndexPattern__triggerButton"
                              color="text"
                              data-test-subj="indexPattern-switch-link"
                              flush="left"
                              iconSide="right"
                              iconType="arrowDown"
                              onClick={[Function]}
                              title="data_prepper"
                            >
                              <EuiButtonEmpty
                                className="dscIndexPattern__triggerButton"
                                color="text"
                                data-test-subj="indexPattern-switch-link"
                                flush="left"
                                iconSide="right"
                                iconType="arrowDown"
                                onClick={[Function]}
                                size="s"
                                title="data_prepper"
                              >
                                <button
                                  className="euiButtonEmpty euiButtonEmpty--text euiButtonEmpty--small euiButtonEmpty--flushLeft dscIndexPattern__triggerButton"
                                  data-test-subj="indexPattern-switch-link"
                                  disabled={false}
                                  onClick={[Function]}
                                  title="data_prepper"
                                  type="button"
                                >
                                  <EuiButtonContent
                                    className="euiButtonEmpty__content"
                                    iconGap="m"
                                    iconSide="right"
                                    iconSize="m"
                                    iconType="arrowDown"
                                    textProps={
                                      Object {
                                        "className": "euiButtonEmpty__text",
                                      }
                                    }
                                  >
                                    <span
                                      className="euiButtonContent euiButtonContent--iconRight euiButtonEmpty__content"
                                    >
                                      <EuiIcon
                                        className="euiButtonContent__icon"
                                        color="inherit"
                                        size="m"
                                        type="arrowDown"
                                      >
                                        <EuiIconBeaker
                                          aria-hidden={true}
                                          className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonContent__icon"
                                          focusable="false"
                                          role="img"
                                          style={null}
                                        >
                                          <svg
                                            aria-hidden={true}
                                            className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonContent__icon"
                                            focusable="false"
                                            height={16}
                                            role="img"
                                            style={null}
                                            viewBox="0 0 16 16"
                                            width={16}
                                            xmlns="http://www.w3.org/2000/svg"
                                          >
                                            <path
                                              d="M5.277 10.088c.02.014.04.03.057.047.582.55 1.134.812 1.666.812.586 0 1.84-.293 3.713-.88L9 6.212V2H7v4.212l-1.723 3.876Zm-.438.987L3.539 14h8.922l-1.32-2.969C9.096 11.677 7.733 12 7 12c-.74 0-1.463-.315-2.161-.925ZM6 2H5V1h6v1h-1v4l3.375 7.594A1 1 0 0 1 12.461 15H3.54a1 1 0 0 1-.914-1.406L6 6V2Z"
                                            />
                                          </svg>
                                        </EuiIconBeaker>
                                      </EuiIcon>
                                      <span
                                        className="euiButtonEmpty__text"
                                      >
                                        Data Prepper
                                      </span>
                                    </span>
                                  </EuiButtonContent>
                                </button>
                              </EuiButtonEmpty>
                            </EuiSmallButtonEmpty>
                          </div>
                        </div>
                      </EuiPopover>
                      <CustomIndexFlyout
                        isFlyoutVisible={false}
                        setIsFlyoutVisible={[Function]}
                      >
                        <div />
                      </CustomIndexFlyout>
                    </DataSourcePicker>
                  </div>
                </EuiFlexItem>
                <EuiFlexItem
                  grow={true}
                >
                  <div
                    className="euiFlexItem"
                  >
                    <ForwardRef
                      attributesFilterFields={Array []}
                      endTime="now"
                      filters={Array []}
                      mode="data_prepper"
                      page="services"
                      query=""
                      refresh={[Function]}
                      setEndTime={[MockFunction]}
                      setFilters={
                        [MockFunction] {
                          "calls": Array [
                            Array [
                              Array [],
                            ],
                          ],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        }
                      }
                      setQuery={[MockFunction]}
                      setStartTime={[MockFunction]}
                      startTime="now-5m"
                    >
                      <EuiFlexGroup
                        alignItems="center"
                        gutterSize="s"
                      >
                        <div
                          className="euiFlexGroup euiFlexGroup--gutterSmall euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow euiFlexGroup--responsive"
                        >
                          <EuiFlexItem>
                            <div
                              className="euiFlexItem"
                            >
                              <EuiCompressedFieldSearch
                                compressed={true}
                                data-test-subj="search-bar-input-box"
                                fullWidth={true}
                                incremental={false}
                                isClearable={false}
                                isLoading={false}
                                onChange={[Function]}
                                onSearch={[Function]}
                                placeholder="Trace ID, trace group name, service name"
                                prepend={
                                  <GlobalFilterButton
                                    filters={Array []}
                                    setFilters={
                                      [MockFunction] {
                                        "calls": Array [
                                          Array [
                                            Array [],
                                          ],
                                        ],
                                        "results": Array [
                                          Object {
                                            "type": "return",
                                            "value": undefined,
                                          },
                                        ],
                                      }
                                    }
                                  />
                                }
                                value=""
                              >
                                <EuiFormControlLayout
                                  compressed={true}
                                  fullWidth={true}
                                  icon="search"
                                  isLoading={false}
                                  prepend={
                                    <GlobalFilterButton
                                      filters={Array []}
                                      setFilters={
                                        [MockFunction] {
                                          "calls": Array [
                                            Array [
                                              Array [],
                                            ],
                                          ],
                                          "results": Array [
                                            Object {
                                              "type": "return",
                                              "value": undefined,
                                            },
                                          ],
                                        }
                                      }
                                    />
                                  }
                                >
                                  <div
                                    className="euiFormControlLayout euiFormControlLayout--fullWidth euiFormControlLayout--compressed euiFormControlLayout--group"
                                  >
                                    <GlobalFilterButton
                                      className="euiFormControlLayout__prepend"
                                      filters={Array []}
                                      key="0/.0"
                                      setFilters={
                                        [MockFunction] {
                                          "calls": Array [
                                            Array [
                                              Array [],
                                            ],
                                          ],
                                          "results": Array [
                                            Object {
                                              "type": "return",
                                              "value": undefined,
                                            },
                                          ],
                                        }
                                      }
                                    >
                                      <EuiPopover
                                        anchorPosition="rightUp"
                                        button={
                                          <EuiSmallButtonIcon
                                            aria-label="Change all filters"
                                            iconType="filter"
                                            onClick={[Function]}
                                            title="Change all filters"
                                          />
                                        }
                                        closePopover={[Function]}
                                        data-test-subj="global-filter-button"
                                        display="inlineBlock"
                                        hasArrow={true}
                                        isOpen={false}
                                        ownFocus={true}
                                        panelPaddingSize="none"
                                      >
                                        <div
                                          className="euiPopover euiPopover--anchorRightUp"
                                          data-test-subj="global-filter-button"
                                        >
                                          <div
                                            className="euiPopover__anchor"
                                          >
                                            <EuiSmallButtonIcon
                                              aria-label="Change all filters"
                                              iconType="filter"
                                              onClick={[Function]}
                                              title="Change all filters"
                                            >
                                              <EuiButtonIcon
                                                aria-label="Change all filters"
                                                iconType="filter"
                                                onClick={[Function]}
                                                size="s"
                                                title="Change all filters"
                                              >
                                                <button
                                                  aria-label="Change all filters"
                                                  className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--small"
                                                  disabled={false}
                                                  onClick={[Function]}
                                                  title="Change all filters"
                                                  type="button"
                                                >
                                                  <EuiIcon
                                                    aria-hidden="true"
                                                    className="euiButtonIcon__icon"
                                                    color="inherit"
                                                    size="m"
                                                    type="filter"
                                                  >
                                                    <EuiIconBeaker
                                                      aria-hidden={true}
                                                      className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                                                      focusable="false"
                                                      role="img"
                                                      style={null}
                                                    >
                                                      <svg
                                                        aria-hidden={true}
                                                        className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                                                        focusable="false"
                                                        height={16}
                                                        role="img"
                                                        style={null}
                                                        viewBox="0 0 16 16"
                                                        width={16}
                                                        xmlns="http://www.w3.org/2000/svg"
                                                      >
                                                        <path
                                                          d="M5.277 10.088c.02.014.04.03.057.047.582.55 1.134.812 1.666.812.586 0 1.84-.293 3.713-.88L9 6.212V2H7v4.212l-1.723 3.876Zm-.438.987L3.539 14h8.922l-1.32-2.969C9.096 11.677 7.733 12 7 12c-.74 0-1.463-.315-2.161-.925ZM6 2H5V1h6v1h-1v4l3.375 7.594A1 1 0 0 1 12.461 15H3.54a1 1 0 0 1-.914-1.406L6 6V2Z"
                                                        />
                                                      </svg>
                                                    </EuiIconBeaker>
                                                  </EuiIcon>
                                                </button>
                                              </EuiButtonIcon>
                                            </EuiSmallButtonIcon>
                                          </div>
                                        </div>
                                      </EuiPopover>
                                    </GlobalFilterButton>
                                    <div
                                      className="euiFormControlLayout__childrenWrapper"
                                    >
                                      <EuiValidatableControl>
                                        <input
                                          className="euiFieldSearch euiFieldSearch--fullWidth euiFieldSearch--compressed euiFieldSearch--inGroup"
                                          data-test-subj="search-bar-input-box"
                                          onChange={[Function]}
                                          onKeyUp={[Function]}
                                          placeholder="Trace ID, trace group name, service name"
                                          type="search"
                                          value=""
                                        />
                                      </EuiValidatableControl>
                                      <EuiFormControlLayoutIcons
                                        compressed={true}
                                        icon="search"
                                        isLoading={false}
                                      >
                                        <div
                                          className="euiFormControlLayoutIcons"
                                        >
                                          <EuiFormControlLayoutCustomIcon
                                            size="s"
                                            type="search"
                                          >
                                            <span
                                              className="euiFormControlLayoutCustomIcon"
                                            >
                                              <EuiIcon
                                                aria-hidden="true"
                                                className="euiFormControlLayoutCustomIcon__icon"
                                                size="s"
                                                type="search"
                                              >
                                                <EuiIconBeaker
                                                  aria-hidden={true}
                                                  className="euiIcon euiIcon--small euiIcon-isLoading euiFormControlLayoutCustomIcon__icon"
                                                  focusable="false"
                                                  role="img"
                                                  style={null}
                                                >
                                                  <svg
                                                    aria-hidden={true}
                                                    className="euiIcon euiIcon--small euiIcon-isLoading euiFormControlLayoutCustomIcon__icon"
                                                    focusable="false"
                                                    height={16}
                                                    role="img"
                                                    style={null}
                                                    viewBox="0 0 16 16"
                                                    width={16}
                                                    xmlns="http://www.w3.org/2000/svg"
                                                  >
                                                    <path
                                                      d="M5.277 10.088c.02.014.04.03.057.047.582.55 1.134.812 1.666.812.586 0 1.84-.293 3.713-.88L9 6.212V2H7v4.212l-1.723 3.876Zm-.438.987L3.539 14h8.922l-1.32-2.969C9.096 11.677 7.733 12 7 12c-.74 0-1.463-.315-2.161-.925ZM6 2H5V1h6v1h-1v4l3.375 7.594A1 1 0 0 1 12.461 15H3.54a1 1 0 0 1-.914-1.406L6 6V2Z"
                                                    />
                                                  </svg>
                                                </EuiIconBeaker>
                                              </EuiIcon>
                                            </span>
                                          </EuiFormControlLayoutCustomIcon>
                                        </div>
                                      </EuiFormControlLayoutIcons>
                                    </div>
                                  </div>
                                </EuiFormControlLayout>
                              </EuiCompressedFieldSearch>
                            </div>
                          </EuiFlexItem>
                          <EuiFlexItem
                            grow={false}
                            style={
                              Object {
                                "maxWidth": "30vw",
                              }
                            }
                          >
                            <div
                              className="euiFlexItem euiFlexItem--flexGrowZero"
                              style={
                                Object {
                                  "maxWidth": "30vw",
                                }
                              }
                            >
                              <EuiSuperDatePicker
                                commonlyUsedRanges={
                                  Array [
                                    Object {
                                      "end": "now/d",
                                      "label": "Today",
                                      "start": "now/d",
                                    },
                                    Object {
                                      "end": "now/w",
                                      "label": "This week",
                                      "start": "now/w",
                                    },
                                    Object {
                                      "end": "now/M",
                                      "label": "This month",
                                      "start": "now/M",
                                    },
                                    Object {
                                      "end": "now/y",
                                      "label": "This year",
                                      "start": "now/y",
                                    },
                                    Object {
                                      "end": "now-1d/d",
                                      "label": "Yesterday",
                                      "start": "now-1d/d",
                                    },
                                    Object {
                                      "end": "now",
                                      "label": "Week to date",
                                      "start": "now/w",
                                    },
                                    Object {
                                      "end": "now",
                                      "label": "Month to date",
                                      "start": "now/M",
                                    },
                                    Object {
                                      "end": "now",
                                      "label": "Year to date",
                                      "start": "now/y",
                                    },
                                  ]
                                }
                                compressed={true}
                                dateFormat="MMM D, YYYY @ HH:mm:ss.SSS"
                                end="now"
                                isAutoRefreshOnly={false}
                                isDisabled={false}
                                isPaused={true}
                                onTimeChange={[Function]}
                                recentlyUsedRanges={Array []}
                                refreshInterval={0}
                                showUpdateButton={false}
                                start="now-5m"
                                timeFormat="HH:mm"
                              >
                                <EuiFlexGroup
                                  className="euiSuperDatePicker__flexWrapper euiSuperDatePicker__flexWrapper--noUpdateButton"
                                  gutterSize="s"
                                  responsive={false}
                                >
                                  <div
                                    className="euiFlexGroup euiFlexGroup--gutterSmall euiFlexGroup--directionRow euiSuperDatePicker__flexWrapper euiSuperDatePicker__flexWrapper--noUpdateButton"
                                  >
                                    <EuiFlexItem>
                                      <div
                                        className="euiFlexItem"
                                      >
                                        <EuiFormControlLayout
                                          className="euiSuperDatePicker"
                                          compressed={true}
                                          isDisabled={false}
                                          prepend={
                                            <EuiQuickSelectPopover
                                              applyTime={[Function]}
                                              commonlyUsedRanges={
                                                Array [
                                                  Object {
                                                    "end": "now/d",
                                                    "label": "Today",
                                                    "start": "now/d",
                                                  },
                                                  Object {
                                                    "end": "now/w",
                                                    "label": "This week",
                                                    "start": "now/w",
                                                  },
                                                  Object {
                                                    "end": "now/M",
                                                    "label": "This month",
                                                    "start": "now/M",
                                                  },
                                                  Object {
                                                    "end": "now/y",
                                                    "label": "This year",
                                                    "start": "now/y",
                                                  },
                                                  Object {
                                                    "end": "now-1d/d",
                                                    "label": "Yesterday",
                                                    "start": "now-1d/d",
                                                  },
                                                  Object {
                                                    "end": "now",
                                                    "label": "Week to date",
                                                    "start": "now/w",
                                                  },
                                                  Object {
                                                    "end": "now",
                                                    "label": "Month to date",
                                                    "start": "now/M",
                                                  },
                                                  Object {
                                                    "end": "now",
                                                    "label": "Year to date",
                                                    "start": "now/y",
                                                  },
                                                ]
                                              }
                                              dateFormat="MMM D, YYYY @ HH:mm:ss.SSS"
                                              end="now"
                                              isAutoRefreshOnly={false}
                                              isDisabled={false}
                                              isPaused={true}
                                              recentlyUsedRanges={Array []}
                                              refreshInterval={0}
                                              start="now-5m"
                                            />
                                          }
                                        >
                                          <div
                                            className="euiFormControlLayout euiFormControlLayout--compressed euiFormControlLayout--group euiSuperDatePicker"
                                          >
                                            <EuiQuickSelectPopover
                                              applyTime={[Function]}
                                              className="euiFormControlLayout__prepend"
                                              commonlyUsedRanges={
                                                Array [
                                                  Object {
                                                    "end": "now/d",
                                                    "label": "Today",
                                                    "start": "now/d",
                                                  },
                                                  Object {
                                                    "end": "now/w",
                                                    "label": "This week",
                                                    "start": "now/w",
                                                  },
                                                  Object {
                                                    "end": "now/M",
                                                    "label": "This month",
                                                    "start": "now/M",
                                                  },
                                                  Object {
                                                    "end": "now/y",
                                                    "label": "This year",
                                                    "start": "now/y",
                                                  },
                                                  Object {
                                                    "end": "now-1d/d",
                                                    "label": "Yesterday",
                                                    "start": "now-1d/d",
                                                  },
                                                  Object {
                                                    "end": "now",
                                                    "label": "Week to date",
                                                    "start": "now/w",
                                                  },
                                                  Object {
                                                    "end": "now",
                                                    "label": "Month to date",
                                                    "start": "now/M",
                                                  },
                                                  Object {
                                                    "end": "now",
                                                    "label": "Year to date",
                                                    "start": "now/y",
                                                  },
                                                ]
                                              }
                                              dateFormat="MMM D, YYYY @ HH:mm:ss.SSS"
                                              end="now"
                                              isAutoRefreshOnly={false}
                                              isDisabled={false}
                                              isPaused={true}
                                              key="0/.0"
                                              recentlyUsedRanges={Array []}
                                              refreshInterval={0}
                                              start="now-5m"
                                            >
                                              <EuiPopover
                                                anchorClassName="euiQuickSelectPopover__anchor"
                                                anchorPosition="downLeft"
                                                button={
                                                  <EuiButtonEmpty
                                                    aria-label="Date quick select"
                                                    className="euiFormControlLayout__prepend"
                                                    data-test-subj="superDatePickerToggleQuickMenuButton"
                                                    iconSide="right"
                                                    iconType="arrowDown"
                                                    isDisabled={false}
                                                    onClick={[Function]}
                                                    size="xs"
                                                    textProps={
                                                      Object {
                                                        "className": "euiQuickSelectPopover__buttonText",
                                                      }
                                                    }
                                                  >
                                                    <EuiIcon
                                                      type="calendar"
                                                    />
                                                  </EuiButtonEmpty>
                                                }
                                                closePopover={[Function]}
                                                display="inlineBlock"
                                                hasArrow={true}
                                                isOpen={false}
                                                ownFocus={true}
                                                panelPaddingSize="s"
                                              >
                                                <div
                                                  className="euiPopover euiPopover--anchorDownLeft"
                                                >
                                                  <div
                                                    className="euiPopover__anchor euiQuickSelectPopover__anchor"
                                                  >
                                                    <EuiButtonEmpty
                                                      aria-label="Date quick select"
                                                      className="euiFormControlLayout__prepend"
                                                      data-test-subj="superDatePickerToggleQuickMenuButton"
                                                      iconSide="right"
                                                      iconType="arrowDown"
                                                      isDisabled={false}
                                                      onClick={[Function]}
                                                      size="xs"
                                                      textProps={
                                                        Object {
                                                          "className": "euiQuickSelectPopover__buttonText",
                                                        }
                                                      }
                                                    >
                                                      <button
                                                        aria-label="Date quick select"
                                                        className="euiButtonEmpty euiButtonEmpty--primary euiButtonEmpty--xSmall euiFormControlLayout__prepend"
                                                        data-test-subj="superDatePickerToggleQuickMenuButton"
                                                        disabled={false}
                                                        onClick={[Function]}
                                                        type="button"
                                                      >
                                                        <EuiButtonContent
                                                          className="euiButtonEmpty__content"
                                                          iconGap="m"
                                                          iconSide="right"
                                                          iconSize="s"
                                                          iconType="arrowDown"
                                                          textProps={
                                                            Object {
                                                              "className": "euiButtonEmpty__text euiQuickSelectPopover__buttonText",
                                                            }
                                                          }
                                                        >
                                                          <span
                                                            className="euiButtonContent euiButtonContent--iconRight euiButtonEmpty__content"
                                                          >
                                                            <EuiIcon
                                                              className="euiButtonContent__icon"
                                                              color="inherit"
                                                              size="s"
                                                              type="arrowDown"
                                                            >
                                                              <EuiIconBeaker
                                                                aria-hidden={true}
                                                                className="euiIcon euiIcon--small euiIcon--inherit euiIcon-isLoading euiButtonContent__icon"
                                                                focusable="false"
                                                                role="img"
                                                                style={null}
                                                              >
                                                                <svg
                                                                  aria-hidden={true}
                                                                  className="euiIcon euiIcon--small euiIcon--inherit euiIcon-isLoading euiButtonContent__icon"
                                                                  focusable="false"
                                                                  height={16}
                                                                  role="img"
                                                                  style={null}
                                                                  viewBox="0 0 16 16"
                                                                  width={16}
                                                                  xmlns="http://www.w3.org/2000/svg"
                                                                >
                                                                  <path
                                                                    d="M5.277 10.088c.02.014.04.03.057.047.582.55 1.134.812 1.666.812.586 0 1.84-.293 3.713-.88L9 6.212V2H7v4.212l-1.723 3.876Zm-.438.987L3.539 14h8.922l-1.32-2.969C9.096 11.677 7.733 12 7 12c-.74 0-1.463-.315-2.161-.925ZM6 2H5V1h6v1h-1v4l3.375 7.594A1 1 0 0 1 12.461 15H3.54a1 1 0 0 1-.914-1.406L6 6V2Z"
                                                                  />
                                                                </svg>
                                                              </EuiIconBeaker>
                                                            </EuiIcon>
                                                            <span
                                                              className="euiButtonEmpty__text euiQuickSelectPopover__buttonText"
                                                            >
                                                              <EuiIcon
                                                                type="calendar"
                                                              >
                                                                <EuiIconBeaker
                                                                  aria-hidden={true}
                                                                  className="euiIcon euiIcon--medium euiIcon-isLoading"
                                                                  focusable="false"
                                                                  role="img"
                                                                  style={null}
                                                                >
                                                                  <svg
                                                                    aria-hidden={true}
                                                                    className="euiIcon euiIcon--medium euiIcon-isLoading"
                                                                    focusable="false"
                                                                    height={16}
                                                                    role="img"
                                                                    style={null}
                                                                    viewBox="0 0 16 16"
                                                                    width={16}
                                                                    xmlns="http://www.w3.org/2000/svg"
                                                                  >
                                                                    <path
                                                                      d="M5.277 10.088c.02.014.04.03.057.047.582.55 1.134.812 1.666.812.586 0 1.84-.293 3.713-.88L9 6.212V2H7v4.212l-1.723 3.876Zm-.438.987L3.539 14h8.922l-1.32-2.969C9.096 11.677 7.733 12 7 12c-.74 0-1.463-.315-2.161-.925ZM6 2H5V1h6v1h-1v4l3.375 7.594A1 1 0 0 1 12.461 15H3.54a1 1 0 0 1-.914-1.406L6 6V2Z"
                                                                    />
                                                                  </svg>
                                                                </EuiIconBeaker>
                                                              </EuiIcon>
                                                            </span>
                                                          </span>
                                                        </EuiButtonContent>
                                                      </button>
                                                    </EuiButtonEmpty>
                                                  </div>
                                                </div>
                                              </EuiPopover>
                                            </EuiQuickSelectPopover>
                                            <div
                                              className="euiFormControlLayout__childrenWrapper"
                                            >
                                              <EuiDatePickerRange
                                                className="euiDatePickerRange--inGroup"
                                                endDateControl={<div />}
                                                iconType={false}
                                                isCustom={true}
                                                startDateControl={<div />}
                                              >
                                                <div
                                                  className="euiDatePickerRange euiDatePickerRange--inGroup"
                                                >
                                                  <button
                                                    className="euiSuperDatePicker__prettyFormat euiSuperDatePicker__prettyFormat--compressed"
                                                    data-test-subj="superDatePickerShowDatesButton"
                                                    disabled={false}
                                                    onClick={[Function]}
                                                  >
                                                    Last 5 minutes
                                                    <span
                                                      className="euiSuperDatePicker__prettyFormatLink"
                                                    >
                                                      <EuiI18n
                                                        default="Show dates"
                                                        token="euiSuperDatePicker.showDatesButtonLabel"
                                                      >
                                                        Show dates
                                                      </EuiI18n>
                                                    </span>
                                                  </button>
                                                </div>
                                              </EuiDatePickerRange>
                                              <EuiFormControlLayoutIcons
                                                compressed={true}
                                              />
                                            </div>
                                          </div>
                                        </EuiFormControlLayout>
                                      </div>
                                    </EuiFlexItem>
                                  </div>
                                </EuiFlexGroup>
                              </EuiSuperDatePicker>
                            </div>
                          </EuiFlexItem>
                          <EuiFlexItem
                            grow={false}
                          >
                            <div
                              className="euiFlexItem euiFlexItem--flexGrowZero"
                            >
                              <EuiButtonIcon
                                aria-label="Refresh"
                                data-click-metric-element="trace_analytics.refresh_button"
                                data-test-subj="superDatePickerApplyTimeButton"
                                display="base"
                                iconType="refresh"
                                onClick={[Function]}
                                size="s"
                              >
                                <button
                                  aria-label="Refresh"
                                  className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--small"
                                  data-click-metric-element="trace_analytics.refresh_button"
                                  data-test-subj="superDatePickerApplyTimeButton"
                                  disabled={false}
                                  onClick={[Function]}
                                  type="button"
                                >
                                  <EuiIcon
                                    aria-hidden="true"
                                    className="euiButtonIcon__icon"
                                    color="inherit"
                                    size="m"
                                    type="refresh"
                                  >
                                    <EuiIconBeaker
                                      aria-hidden={true}
                                      className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                                      focusable="false"
                                      role="img"
                                      style={null}
                                    >
                                      <svg
                                        aria-hidden={true}
                                        className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                                        focusable="false"
                                        height={16}
                                        role="img"
                                        style={null}
                                        viewBox="0 0 16 16"
                                        width={16}
                                        xmlns="http://www.w3.org/2000/svg"
                                      >
                                        <path
                                          d="M5.277 10.088c.02.014.04.03.057.047.582.55 1.134.812 1.666.812.586 0 1.84-.293 3.713-.88L9 6.212V2H7v4.212l-1.723 3.876Zm-.438.987L3.539 14h8.922l-1.32-2.969C9.096 11.677 7.733 12 7 12c-.74 0-1.463-.315-2.161-.925ZM6 2H5V1h6v1h-1v4l3.375 7.594A1 1 0 0 1 12.461 15H3.54a1 1 0 0 1-.914-1.406L6 6V2Z"
                                        />
                                      </svg>
                                    </EuiIconBeaker>
                                  </EuiIcon>
                                </button>
                              </EuiButtonIcon>
                            </div>
                          </EuiFlexItem>
                        </div>
                      </EuiFlexGroup>
                    </ForwardRef>
                  </div>
                </EuiFlexItem>
              </div>
            </EuiFlexGroup>
            <Filters
              appConfigs={Array []}
              attributesFilterFields={Array []}
              filters={Array []}
              mode="data_prepper"
              page="services"
              setFilters={
                [MockFunction] {
                  "calls": Array [
                    Array [
                      Array [],
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": undefined,
                    },
                  ],
                }
              }
            >
              <EuiFlexGroup
                alignItems="center"
                gutterSize="xs"
                responsive={false}
              >
                <div
                  className="euiFlexGroup euiFlexGroup--gutterExtraSmall euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow"
                >
                  <EuiFlexItem
                    grow={false}
                  >
                    <div
                      className="euiFlexItem euiFlexItem--flexGrowZero"
                    >
                      <AddFilterButton>
                        <EuiPopover
                          anchorPosition="downLeft"
                          button={
                            <EuiButtonEmpty
                              flush="left"
                              onClick={[Function]}
                              size="xs"
                            >
                              + Add filter
                            </EuiButtonEmpty>
                          }
                          closePopover={[Function]}
                          data-test-subj="addfilter"
                          display="inlineBlock"
                          hasArrow={true}
                          isOpen={false}
                          ownFocus={true}
                          panelPaddingSize="m"
                        >
                          <div
                            className="euiPopover euiPopover--anchorDownLeft"
                            data-test-subj="addfilter"
                          >
                            <div
                              className="euiPopover__anchor"
                            >
                              <EuiButtonEmpty
                                flush="left"
                                onClick={[Function]}
                                size="xs"
                              >
                                <button
                                  className="euiButtonEmpty euiButtonEmpty--primary euiButtonEmpty--xSmall euiButtonEmpty--flushLeft"
                                  disabled={false}
                                  onClick={[Function]}
                                  type="button"
                                >
                                  <EuiButtonContent
                                    className="euiButtonEmpty__content"
                                    iconGap="m"
                                    iconSide="left"
                                    iconSize="s"
                                    textProps={
                                      Object {
                                        "className": "euiButtonEmpty__text",
                                      }
                                    }
                                  >
                                    <span
                                      className="euiButtonContent euiButtonEmpty__content"
                                    >
                                      <span
                                        className="euiButtonEmpty__text"
                                      >
                                        + Add filter
                                      </span>
                                    </span>
                                  </EuiButtonContent>
                                </button>
                              </EuiButtonEmpty>
                            </div>
                          </div>
                        </EuiPopover>
                      </AddFilterButton>
                    </div>
                  </EuiFlexItem>
                </div>
              </EuiFlexGroup>
            </Filters>
            <EuiSpacer
              size="s"
            >
              <div
                className="euiSpacer euiSpacer--s"
              />
            </EuiSpacer>
            <ServicesTable
              addFilter={[Function]}
              addServicesGroupFilter={[Function]}
              dataPrepperIndicesExist={true}
              isServiceTrendEnabled={false}
              items={Array []}
              loading={true}
              mode="data_prepper"
              selectedItems={Array []}
              serviceTrends={Object {}}
              setIsServiceTrendEnabled={[Function]}
              setRedirect={[Function]}
              setSelectedItems={[Function]}
              traceColumnAction={[Function]}
            >
              <EuiPanel>
                <div
                  className="euiPanel euiPanel--paddingMedium euiPanel--borderRadiusMedium euiPanel--plain euiPanel--hasShadow"
                >
                  <EuiFlexGroup
                    justifyContent="spaceBetween"
                  >
                    <div
                      className="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--justifyContentSpaceBetween euiFlexGroup--directionRow euiFlexGroup--responsive"
                    >
                      <EuiFlexItem
                        grow={false}
                      >
                        <div
                          className="euiFlexItem euiFlexItem--flexGrowZero"
                        >
                          <PanelTitle
                            title="Services"
                            totalItems={0}
                          >
                            <EuiText
                              size="m"
                            >
                              <div
                                className="euiText euiText--medium"
                              >
                                <span
                                  className="panel-title"
                                >
                                  Services
                                </span>
                                <span
                                  className="panel-title-count"
                                >
                                   (0)
                                </span>
                              </div>
                            </EuiText>
                          </PanelTitle>
                        </div>
                      </EuiFlexItem>
                      <EuiFlexItem
                        grow={false}
                      >
                        <div
                          className="euiFlexItem euiFlexItem--flexGrowZero"
                        >
                          <EuiFlexGroup>
                            <div
                              className="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--directionRow euiFlexGroup--responsive"
                            >
                              <EuiFlexItem>
                                <div
                                  className="euiFlexItem"
                                >
                                  <EuiToolTip
                                    content="Select services to filter"
                                    delay="regular"
                                    position="top"
                                  >
                                    <span
                                      className="euiToolTipAnchor"
                                      onKeyUp={[Function]}
                                      onMouseOut={[Function]}
                                      onMouseOver={[Function]}
                                    >
                                      <EuiButtonEmpty
                                        isDisabled={true}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onFocus={[Function]}
                                        size="xs"
                                      >
                                        <button
                                          className="euiButtonEmpty euiButtonEmpty--primary euiButtonEmpty--xSmall euiButtonEmpty-isDisabled"
                                          disabled={true}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onFocus={[Function]}
                                          type="button"
                                        >
                                          <EuiButtonContent
                                            className="euiButtonEmpty__content"
                                            iconGap="m"
                                            iconSide="left"
                                            iconSize="s"
                                            textProps={
                                              Object {
                                                "className": "euiButtonEmpty__text",
                                              }
                                            }
                                          >
                                            <span
                                              className="euiButtonContent euiButtonEmpty__content"
                                            >
                                              <span
                                                className="euiButtonEmpty__text"
                                              >
                                                Filter services
                                              </span>
                                            </span>
                                          </EuiButtonContent>
                                        </button>
                                      </EuiButtonEmpty>
                                    </span>
                                  </EuiToolTip>
                                </div>
                              </EuiFlexItem>
                              <EuiFlexItem>
                                <div
                                  className="euiFlexItem"
                                >
                                  <EuiButtonEmpty
                                    onClick={[Function]}
                                    size="xs"
                                  >
                                    <button
                                      className="euiButtonEmpty euiButtonEmpty--primary euiButtonEmpty--xSmall"
                                      disabled={false}
                                      onClick={[Function]}
                                      type="button"
                                    >
                                      <EuiButtonContent
                                        className="euiButtonEmpty__content"
                                        iconGap="m"
                                        iconSide="left"
                                        iconSize="s"
                                        textProps={
                                          Object {
                                            "className": "euiButtonEmpty__text",
                                          }
                                        }
                                      >
                                        <span
                                          className="euiButtonContent euiButtonEmpty__content"
                                        >
                                          <span
                                            className="euiButtonEmpty__text"
                                          >
                                            Show 24 hour trends
                                          </span>
                                        </span>
                                      </EuiButtonContent>
                                    </button>
                                  </EuiButtonEmpty>
                                </div>
                              </EuiFlexItem>
                            </div>
                          </EuiFlexGroup>
                        </div>
                      </EuiFlexItem>
                    </div>
                  </EuiFlexGroup>
                  <EuiSpacer
                    size="m"
                  >
                    <div
                      className="euiSpacer euiSpacer--m"
                    />
                  </EuiSpacer>
                  <EuiHorizontalRule
                    margin="none"
                  >
                    <hr
                      className="euiHorizontalRule euiHorizontalRule--full"
                    />
                  </EuiHorizontalRule>
                  <NoMatchMessage
                    size="xl"
                  >
                    <EuiSpacer
                      size="xl"
                    >
                      <div
                        className="euiSpacer euiSpacer--xl"
                      />
                    </EuiSpacer>
                    <EuiEmptyPrompt
                      body={
                        <EuiText
                          size="s"
                        >
                          No data matches the selected filter. Clear the filter and/or increase the time range to see more results.
                        </EuiText>
                      }
                      title={
                        <h2>
                          No matches
                        </h2>
                      }
                    >
                      <div
                        className="euiEmptyPrompt"
                      >
                        <EuiTitle
                          size="m"
                        >
                          <h2
                            className="euiTitle euiTitle--medium"
                          >
                            No matches
                          </h2>
                        </EuiTitle>
                        <EuiTextColor
                          color="subdued"
                        >
                          <span
                            className="euiTextColor euiTextColor--subdued"
                          >
                            <EuiSpacer
                              size="m"
                            >
                              <div
                                className="euiSpacer euiSpacer--m"
                              />
                            </EuiSpacer>
                            <EuiText>
                              <div
                                className="euiText euiText--medium"
                              >
                                <EuiText
                                  size="s"
                                >
                                  <div
                                    className="euiText euiText--small"
                                  >
                                    No data matches the selected filter. Clear the filter and/or increase the time range to see more results.
                                  </div>
                                </EuiText>
                              </div>
                            </EuiText>
                          </span>
                        </EuiTextColor>
                      </div>
                    </EuiEmptyPrompt>
                    <EuiSpacer
                      size="xl"
                    >
                      <div
                        className="euiSpacer euiSpacer--xl"
                      />
                    </EuiSpacer>
                  </NoMatchMessage>
                </div>
              </EuiPanel>
            </ServicesTable>
            <EuiSpacer
              size="s"
            >
              <div
                className="euiSpacer euiSpacer--s"
              />
            </EuiSpacer>
            <ServiceMap
              addFilter={[Function]}
              currService=""
              idSelected="latency"
              page="services"
              serviceMap={Object {}}
              setIdSelected={[Function]}
            >
              <EuiPanel>
                <div
                  className="euiPanel euiPanel--paddingMedium euiPanel--borderRadiusMedium euiPanel--plain euiPanel--hasShadow"
                >
                  <PanelTitle
                    title="Service map"
                  >
                    <EuiText
                      size="m"
                    >
                      <div
                        className="euiText euiText--medium"
                      >
                        <span
                          className="panel-title"
                        >
                          Service map
                        </span>
                      </div>
                    </EuiText>
                  </PanelTitle>
                  <EuiSpacer
                    size="m"
                  >
                    <div
                      className="euiSpacer euiSpacer--m"
                    />
                  </EuiSpacer>
                  <EuiButtonGroup
                    buttonSize="s"
                    color="text"
                    idSelected="latency"
                    onChange={[Function]}
                    options={
                      Array [
                        Object {
                          "id": "latency",
                          "label": "Duration",
                        },
                        Object {
                          "id": "error_rate",
                          "label": "Errors",
                        },
                        Object {
                          "id": "throughput",
                          "label": "Request Rate",
                        },
                      ]
                    }
                  >
                    <fieldset
                      className="euiButtonGroup euiButtonGroup--small euiButtonGroup--text"
                      disabled={false}
                    >
                      <EuiScreenReaderOnly>
                        <legend
                          className="euiScreenReaderOnly"
                        />
                      </EuiScreenReaderOnly>
                      <div
                        className="euiButtonGroup__buttons"
                      >
                        <EuiButtonGroupButton
                          color="text"
                          element="label"
                          id="latency"
                          isDisabled={false}
                          isIconOnly={false}
                          isSelected={true}
                          key="0"
                          label="Duration"
                          name="random_html_id"
                          onChange={[Function]}
                          size="s"
                        >
                          <EuiButtonDisplay
                            baseClassName="euiButtonGroupButton"
                            className="euiButtonGroupButton-isSelected"
                            color="text"
                            element="label"
                            fill={true}
                            htmlFor="random_html_id"
                            isDisabled={false}
                            onClick={[Function]}
                            size="s"
                            textProps={
                              Object {
                                "className": "euiButtonGroupButton__textShift",
                                "data-text": "Duration",
                                "ref": [Function],
                                "title": "Duration",
                              }
                            }
                          >
                            <label
                              className="euiButtonGroupButton euiButtonGroupButton--text euiButtonGroupButton--small euiButtonGroupButton--fill euiButtonGroupButton-isSelected"
                              disabled={false}
                              htmlFor="random_html_id"
                              onClick={[Function]}
                              style={
                                Object {
                                  "minWidth": undefined,
                                }
                              }
                            >
                              <EuiButtonContent
                                className="euiButton__content"
                                iconGap="m"
                                iconSide="left"
                                textProps={
                                  Object {
                                    "className": "euiButton__text euiButtonGroupButton__textShift",
                                    "data-text": "Duration",
                                    "ref": [Function],
                                    "title": "Duration",
                                  }
                                }
                              >
                                <span
                                  className="euiButtonContent euiButton__content"
                                >
                                  <span
                                    className="euiButton__text euiButtonGroupButton__textShift"
                                    data-text="Duration"
                                    title="Duration"
                                  >
                                    <input
                                      checked={true}
                                      className="euiScreenReaderOnly"
                                      data-test-subj="latency"
                                      disabled={false}
                                      id="random_html_id"
                                      name="random_html_id"
                                      onChange={[Function]}
                                      type="radio"
                                    />
                                    Duration
                                  </span>
                                </span>
                              </EuiButtonContent>
                            </label>
                          </EuiButtonDisplay>
                        </EuiButtonGroupButton>
                        <EuiButtonGroupButton
                          color="text"
                          element="label"
                          id="error_rate"
                          isDisabled={false}
                          isIconOnly={false}
                          isSelected={false}
                          key="1"
                          label="Errors"
                          name="random_html_id"
                          onChange={[Function]}
                          size="s"
                        >
                          <EuiButtonDisplay
                            baseClassName="euiButtonGroupButton"
                            className=""
                            color="text"
                            element="label"
                            fill={false}
                            htmlFor="random_html_id"
                            isDisabled={false}
                            onClick={[Function]}
                            size="s"
                            textProps={
                              Object {
                                "className": "euiButtonGroupButton__textShift",
                                "data-text": "Errors",
                                "ref": [Function],
                                "title": "Errors",
                              }
                            }
                          >
                            <label
                              className="euiButtonGroupButton euiButtonGroupButton--text euiButtonGroupButton--small"
                              disabled={false}
                              htmlFor="random_html_id"
                              onClick={[Function]}
                              style={
                                Object {
                                  "minWidth": undefined,
                                }
                              }
                            >
                              <EuiButtonContent
                                className="euiButton__content"
                                iconGap="m"
                                iconSide="left"
                                textProps={
                                  Object {
                                    "className": "euiButton__text euiButtonGroupButton__textShift",
                                    "data-text": "Errors",
                                    "ref": [Function],
                                    "title": "Errors",
                                  }
                                }
                              >
                                <span
                                  className="euiButtonContent euiButton__content"
                                >
                                  <span
                                    className="euiButton__text euiButtonGroupButton__textShift"
                                    data-text="Errors"
                                    title="Errors"
                                  >
                                    <input
                                      checked={false}
                                      className="euiScreenReaderOnly"
                                      data-test-subj="error_rate"
                                      disabled={false}
                                      id="random_html_id"
                                      name="random_html_id"
                                      onChange={[Function]}
                                      type="radio"
                                    />
                                    Errors
                                  </span>
                                </span>
                              </EuiButtonContent>
                            </label>
                          </EuiButtonDisplay>
                        </EuiButtonGroupButton>
                        <EuiButtonGroupButton
                          color="text"
                          element="label"
                          id="throughput"
                          isDisabled={false}
                          isIconOnly={false}
                          isSelected={false}
                          key="2"
                          label="Request Rate"
                          name="random_html_id"
                          onChange={[Function]}
                          size="s"
                        >
                          <EuiButtonDisplay
                            baseClassName="euiButtonGroupButton"
                            className=""
                            color="text"
                            element="label"
                            fill={false}
                            htmlFor="random_html_id"
                            isDisabled={false}
                            onClick={[Function]}
                            size="s"
                            textProps={
                              Object {
                                "className": "euiButtonGroupButton__textShift",
                                "data-text": "Request Rate",
                                "ref": [Function],
                                "title": "Request Rate",
                              }
                            }
                          >
                            <label
                              className="euiButtonGroupButton euiButtonGroupButton--text euiButtonGroupButton--small"
                              disabled={false}
                              htmlFor="random_html_id"
                              onClick={[Function]}
                              style={
                                Object {
                                  "minWidth": undefined,
                                }
                              }
                            >
                              <EuiButtonContent
                                className="euiButton__content"
                                iconGap="m"
                                iconSide="left"
                                textProps={
                                  Object {
                                    "className": "euiButton__text euiButtonGroupButton__textShift",
                                    "data-text": "Request Rate",
                                    "ref": [Function],
                                    "title": "Request Rate",
                                  }
                                }
                              >
                                <span
                                  className="euiButtonContent euiButton__content"
                                >
                                  <span
                                    className="euiButton__text euiButtonGroupButton__textShift"
                                    data-text="Request Rate"
                                    title="Request Rate"
                                  >
                                    <input
                                      checked={false}
                                      className="euiScreenReaderOnly"
                                      data-test-subj="throughput"
                                      disabled={false}
                                      id="random_html_id"
                                      name="random_html_id"
                                      onChange={[Function]}
                                      type="radio"
                                    />
                                    Request Rate
                                  </span>
                                </span>
                              </EuiButtonContent>
                            </label>
                          </EuiButtonDisplay>
                        </EuiButtonGroupButton>
                      </div>
                    </fieldset>
                  </EuiButtonGroup>
                  <EuiHorizontalRule
                    margin="m"
                  >
                    <hr
                      className="euiHorizontalRule euiHorizontalRule--full euiHorizontalRule--marginMedium"
                    />
                  </EuiHorizontalRule>
                  <EuiFlexGroup
                    justifyContent="spaceBetween"
                  >
                    <div
                      className="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--justifyContentSpaceBetween euiFlexGroup--directionRow euiFlexGroup--responsive"
                    >
                      <EuiFlexItem
                        grow={7}
                      >
                        <div
                          className="euiFlexItem euiFlexItem--flexGrow7"
                        >
                          <EuiCompressedFieldSearch
                            compressed={true}
                            fullWidth={false}
                            incremental={false}
                            isClearable={true}
                            isInvalid={false}
                            isLoading={false}
                            onChange={[Function]}
                            onSearch={[Function]}
                            placeholder="Service name"
                            prepend="Focus on"
                            value=""
                          >
                            <EuiFormControlLayout
                              compressed={true}
                              fullWidth={false}
                              icon="search"
                              isLoading={false}
                              prepend="Focus on"
                            >
                              <div
                                className="euiFormControlLayout euiFormControlLayout--compressed euiFormControlLayout--group"
                              >
                                <EuiFormLabel
                                  className="euiFormControlLayout__prepend"
                                >
                                  <label
                                    className="euiFormLabel euiFormControlLayout__prepend"
                                  >
                                    Focus on
                                  </label>
                                </EuiFormLabel>
                                <div
                                  className="euiFormControlLayout__childrenWrapper"
                                >
                                  <EuiValidatableControl
                                    isInvalid={false}
                                  >
                                    <input
                                      className="euiFieldSearch euiFieldSearch--compressed euiFieldSearch--inGroup"
                                      onChange={[Function]}
                                      onKeyUp={[Function]}
                                      placeholder="Service name"
                                      type="search"
                                      value=""
                                    />
                                  </EuiValidatableControl>
                                  <EuiFormControlLayoutIcons
                                    compressed={true}
                                    icon="search"
                                    isLoading={false}
                                  >
                                    <div
                                      className="euiFormControlLayoutIcons"
                                    >
                                      <EuiFormControlLayoutCustomIcon
                                        size="s"
                                        type="search"
                                      >
                                        <span
                                          className="euiFormControlLayoutCustomIcon"
                                        >
                                          <EuiIcon
                                            aria-hidden="true"
                                            className="euiFormControlLayoutCustomIcon__icon"
                                            size="s"
                                            type="search"
                                          >
                                            <EuiIconBeaker
                                              aria-hidden={true}
                                              className="euiIcon euiIcon--small euiIcon-isLoading euiFormControlLayoutCustomIcon__icon"
                                              focusable="false"
                                              role="img"
                                              style={null}
                                            >
                                              <svg
                                                aria-hidden={true}
                                                className="euiIcon euiIcon--small euiIcon-isLoading euiFormControlLayoutCustomIcon__icon"
                                                focusable="false"
                                                height={16}
                                                role="img"
                                                style={null}
                                                viewBox="0 0 16 16"
                                                width={16}
                                                xmlns="http://www.w3.org/2000/svg"
                                              >
                                                <path
                                                  d="M5.277 10.088c.02.014.04.03.057.047.582.55 1.134.812 1.666.812.586 0 1.84-.293 3.713-.88L9 6.212V2H7v4.212l-1.723 3.876Zm-.438.987L3.539 14h8.922l-1.32-2.969C9.096 11.677 7.733 12 7 12c-.74 0-1.463-.315-2.161-.925ZM6 2H5V1h6v1h-1v4l3.375 7.594A1 1 0 0 1 12.461 15H3.54a1 1 0 0 1-.914-1.406L6 6V2Z"
                                                />
                                              </svg>
                                            </EuiIconBeaker>
                                          </EuiIcon>
                                        </span>
                                      </EuiFormControlLayoutCustomIcon>
                                    </div>
                                  </EuiFormControlLayoutIcons>
                                </div>
                              </div>
                            </EuiFormControlLayout>
                          </EuiCompressedFieldSearch>
                        </div>
                      </EuiFlexItem>
                    </div>
                  </EuiFlexGroup>
                  <EuiSpacer>
                    <div
                      className="euiSpacer euiSpacer--l"
                    />
                  </EuiSpacer>
                  <div
                    style={
                      Object {
                        "minHeight": 434,
                      }
                    }
                  >
                    <NoMatchMessage
                      size="s"
                    >
                      <EuiSpacer
                        size="s"
                      >
                        <div
                          className="euiSpacer euiSpacer--s"
                        />
                      </EuiSpacer>
                      <EuiEmptyPrompt
                        body={
                          <EuiText
                            size="s"
                          >
                            No data matches the selected filter. Clear the filter and/or increase the time range to see more results.
                          </EuiText>
                        }
                        title={
                          <h2>
                            No matches
                          </h2>
                        }
                      >
                        <div
                          className="euiEmptyPrompt"
                        >
                          <EuiTitle
                            size="m"
                          >
                            <h2
                              className="euiTitle euiTitle--medium"
                            >
                              No matches
                            </h2>
                          </EuiTitle>
                          <EuiTextColor
                            color="subdued"
                          >
                            <span
                              className="euiTextColor euiTextColor--subdued"
                            >
                              <EuiSpacer
                                size="m"
                              >
                                <div
                                  className="euiSpacer euiSpacer--m"
                                />
                              </EuiSpacer>
                              <EuiText>
                                <div
                                  className="euiText euiText--medium"
                                >
                                  <EuiText
                                    size="s"
                                  >
                                    <div
                                      className="euiText euiText--small"
                                    >
                                      No data matches the selected filter. Clear the filter and/or increase the time range to see more results.
                                    </div>
                                  </EuiText>
                                </div>
                              </EuiText>
                            </span>
                          </EuiTextColor>
                        </div>
                      </EuiEmptyPrompt>
                      <EuiSpacer
                        size="s"
                      >
                        <div
                          className="euiSpacer euiSpacer--s"
                        />
                      </EuiSpacer>
                    </NoMatchMessage>
                  </div>
                </div>
              </EuiPanel>
              <EuiSpacer
                size="m"
              >
                <div
                  className="euiSpacer euiSpacer--m"
                />
              </EuiSpacer>
            </ServiceMap>
          </div>
        </EuiPageBody>
      </div>
    </EuiPage>
  </ServicesContent>
</Services>
`;

exports[`Services component renders jaeger services page 1`] = `
<Services
  appConfigs={Array []}
  attributesFilterFields={Array []}
  childBreadcrumbs={
    Array [
      Object {
        "href": "#/trace_analytics/home",
        "text": "Trace analytics",
      },
      Object {
        "href": "#/trace_analytics/services",
        "text": "Services",
      },
    ]
  }
  chrome={
    Object {
      "addApplicationClass": [MockFunction],
      "docTitle": Object {
        "change": [MockFunction],
        "reset": [MockFunction],
      },
      "getApplicationClasses$": [MockFunction],
      "getBadge$": [MockFunction],
      "getBreadcrumbs$": [MockFunction],
      "getBreadcrumbsEnricher$": [MockFunction],
      "getCustomNavLink$": [MockFunction],
      "getHeaderComponent": [MockFunction],
      "getHeaderVariant$": [MockFunction],
      "getHelpExtension$": [MockFunction],
      "getIsNavDrawerLocked$": [MockFunction],
      "getIsVisible$": [MockFunction],
      "globalSearch": Object {
        "getAllSearchCommands": [MockFunction],
      },
      "logos": Object {
        "AnimatedMark": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_spinner_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_spinner_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_spinner_on_light.svg",
        },
        "Application": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_dashboards_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_dashboards_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_dashboards_on_light.svg",
        },
        "CenterMark": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_center_mark_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_center_mark_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_center_mark_on_light.svg",
        },
        "Mark": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_mark_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_mark_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_mark_on_light.svg",
        },
        "OpenSearch": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_on_light.svg",
        },
        "colorScheme": "light",
      },
      "navControls": Object {
        "getCenter$": [MockFunction],
        "getLeft$": [MockFunction],
        "getLeftBottom$": [MockFunction],
        "getRight$": [MockFunction],
        "registerCenter": [MockFunction],
        "registerLeft": [MockFunction],
        "registerLeftBottom": [MockFunction],
        "registerRight": [MockFunction],
      },
      "navGroup": Object {
        "getCurrentNavGroup$": [MockFunction],
        "getNavGroupEnabled": [MockFunction] {
          "calls": Array [
            Array [],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        },
        "getNavGroupsMap$": [MockFunction],
        "setCurrentNavGroup": [MockFunction],
      },
      "navLinks": Object {
        "enableForcedAppSwitcherNavigation": [MockFunction],
        "get": [MockFunction],
        "getAll": [MockFunction],
        "getForceAppSwitcherNavigation$": [MockFunction],
        "getNavLinks$": [MockFunction],
        "has": [MockFunction],
        "showOnly": [MockFunction],
        "update": [MockFunction],
      },
      "recentlyAccessed": Object {
        "add": [MockFunction],
        "get": [MockFunction],
        "get$": [MockFunction],
      },
      "removeApplicationClass": [MockFunction],
      "setAppTitle": [MockFunction],
      "setBadge": [MockFunction],
      "setBreadcrumbs": [MockFunction] {
        "calls": Array [
          Array [
            Array [
              undefined,
              Object {
                "href": "#/trace_analytics/home",
                "text": "Trace analytics",
              },
              Object {
                "href": "#/trace_analytics/services",
                "text": "Services",
              },
            ],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
      "setBreadcrumbsEnricher": [MockFunction],
      "setCustomNavLink": [MockFunction],
      "setHeaderVariant": [MockFunction],
      "setHelpExtension": [MockFunction],
      "setHelpSupportUrl": [MockFunction],
      "setIsVisible": [MockFunction],
    }
  }
  dataPrepperIndicesExist={false}
  dataSourceMDSId={
    Array [
      Object {
        "id": "",
        "label": "",
      },
    ]
  }
  endTime="now"
  filters={Array []}
  http={[MockFunction]}
  jaegerIndicesExist={true}
  mode="jaeger"
  modes={
    Array [
      Object {
        "id": "jaeger",
        "title": "Jaeger",
      },
      Object {
        "id": "data_prepper",
        "title": "Data Prepper",
      },
    ]
  }
  nameColumnAction={[Function]}
  page="services"
  parentBreadcrumbs={
    Array [
      Object {
        "href": "test#/",
        "text": "test",
      },
    ]
  }
  query=""
  setEndTime={[MockFunction]}
  setFilters={
    [MockFunction] {
      "calls": Array [
        Array [
          Array [],
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  setQuery={[MockFunction]}
  setStartTime={[MockFunction]}
  startTime="now-5m"
  traceColumnAction={[Function]}
>
  <ServicesContent
    appConfigs={Array []}
    attributesFilterFields={Array []}
    childBreadcrumbs={
      Array [
        Object {
          "href": "#/trace_analytics/home",
          "text": "Trace analytics",
        },
        Object {
          "href": "#/trace_analytics/services",
          "text": "Services",
        },
      ]
    }
    chrome={
      Object {
        "addApplicationClass": [MockFunction],
        "docTitle": Object {
          "change": [MockFunction],
          "reset": [MockFunction],
        },
        "getApplicationClasses$": [MockFunction],
        "getBadge$": [MockFunction],
        "getBreadcrumbs$": [MockFunction],
        "getBreadcrumbsEnricher$": [MockFunction],
        "getCustomNavLink$": [MockFunction],
        "getHeaderComponent": [MockFunction],
        "getHeaderVariant$": [MockFunction],
        "getHelpExtension$": [MockFunction],
        "getIsNavDrawerLocked$": [MockFunction],
        "getIsVisible$": [MockFunction],
        "globalSearch": Object {
          "getAllSearchCommands": [MockFunction],
        },
        "logos": Object {
          "AnimatedMark": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_spinner_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_spinner_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_spinner_on_light.svg",
          },
          "Application": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_dashboards_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_dashboards_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_dashboards_on_light.svg",
          },
          "CenterMark": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_center_mark_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_center_mark_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_center_mark_on_light.svg",
          },
          "Mark": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_mark_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_mark_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_mark_on_light.svg",
          },
          "OpenSearch": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_on_light.svg",
          },
          "colorScheme": "light",
        },
        "navControls": Object {
          "getCenter$": [MockFunction],
          "getLeft$": [MockFunction],
          "getLeftBottom$": [MockFunction],
          "getRight$": [MockFunction],
          "registerCenter": [MockFunction],
          "registerLeft": [MockFunction],
          "registerLeftBottom": [MockFunction],
          "registerRight": [MockFunction],
        },
        "navGroup": Object {
          "getCurrentNavGroup$": [MockFunction],
          "getNavGroupEnabled": [MockFunction] {
            "calls": Array [
              Array [],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": undefined,
              },
            ],
          },
          "getNavGroupsMap$": [MockFunction],
          "setCurrentNavGroup": [MockFunction],
        },
        "navLinks": Object {
          "enableForcedAppSwitcherNavigation": [MockFunction],
          "get": [MockFunction],
          "getAll": [MockFunction],
          "getForceAppSwitcherNavigation$": [MockFunction],
          "getNavLinks$": [MockFunction],
          "has": [MockFunction],
          "showOnly": [MockFunction],
          "update": [MockFunction],
        },
        "recentlyAccessed": Object {
          "add": [MockFunction],
          "get": [MockFunction],
          "get$": [MockFunction],
        },
        "removeApplicationClass": [MockFunction],
        "setAppTitle": [MockFunction],
        "setBadge": [MockFunction],
        "setBreadcrumbs": [MockFunction] {
          "calls": Array [
            Array [
              Array [
                undefined,
                Object {
                  "href": "#/trace_analytics/home",
                  "text": "Trace analytics",
                },
                Object {
                  "href": "#/trace_analytics/services",
                  "text": "Services",
                },
              ],
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        },
        "setBreadcrumbsEnricher": [MockFunction],
        "setCustomNavLink": [MockFunction],
        "setHeaderVariant": [MockFunction],
        "setHelpExtension": [MockFunction],
        "setHelpSupportUrl": [MockFunction],
        "setIsVisible": [MockFunction],
      }
    }
    dataPrepperIndicesExist={false}
    dataSourceMDSId={
      Array [
        Object {
          "id": "",
          "label": "",
        },
      ]
    }
    endTime="now"
    filters={Array []}
    http={[MockFunction]}
    jaegerIndicesExist={true}
    mode="jaeger"
    modes={
      Array [
        Object {
          "id": "jaeger",
          "title": "Jaeger",
        },
        Object {
          "id": "data_prepper",
          "title": "Data Prepper",
        },
      ]
    }
    nameColumnAction={[Function]}
    page="services"
    parentBreadcrumbs={
      Array [
        Object {
          "href": "test#/",
          "text": "test",
        },
      ]
    }
    query=""
    setEndTime={[MockFunction]}
    setFilters={
      [MockFunction] {
        "calls": Array [
          Array [
            Array [],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    setQuery={[MockFunction]}
    setStartTime={[MockFunction]}
    startTime="now-5m"
    traceColumnAction={[Function]}
  >
    <EuiPage
      paddingSize="m"
    >
      <div
        className="euiPage euiPage--paddingMedium euiPage--grow"
      >
        <EuiPageBody>
          <div
            className="euiPageBody euiPageBody--borderRadiusNone"
          >
            <EuiFlexGroup
              alignItems="center"
              gutterSize="s"
              justifyContent="spaceBetween"
            >
              <div
                className="euiFlexGroup euiFlexGroup--gutterSmall euiFlexGroup--alignItemsCenter euiFlexGroup--justifyContentSpaceBetween euiFlexGroup--directionRow euiFlexGroup--responsive"
              >
                <EuiFlexItem
                  grow={false}
                >
                  <div
                    className="euiFlexItem euiFlexItem--flexGrowZero"
                  >
                    <DataSourcePicker
                      modes={
                        Array [
                          Object {
                            "id": "jaeger",
                            "title": "Jaeger",
                          },
                          Object {
                            "id": "data_prepper",
                            "title": "Data Prepper",
                          },
                        ]
                      }
                      selectedMode="jaeger"
                    >
                      <EuiPopover
                        anchorClassName="eui-textTruncate"
                        anchorPosition="downCenter"
                        button={
                          <EuiSmallButtonEmpty
                            className="dscIndexPattern__triggerButton"
                            color="text"
                            data-test-subj="indexPattern-switch-link"
                            flush="left"
                            iconSide="right"
                            iconType="arrowDown"
                            onClick={[Function]}
                            title="jaeger"
                          >
                            Jaeger
                          </EuiSmallButtonEmpty>
                        }
                        className="eui-textTruncate"
                        closePopover={[Function]}
                        display="inlineBlock"
                        hasArrow={true}
                        isOpen={false}
                        ownFocus={true}
                        panelPaddingSize="s"
                      >
                        <div
                          className="euiPopover euiPopover--anchorDownCenter eui-textTruncate"
                        >
                          <div
                            className="euiPopover__anchor eui-textTruncate"
                          >
                            <EuiSmallButtonEmpty
                              className="dscIndexPattern__triggerButton"
                              color="text"
                              data-test-subj="indexPattern-switch-link"
                              flush="left"
                              iconSide="right"
                              iconType="arrowDown"
                              onClick={[Function]}
                              title="jaeger"
                            >
                              <EuiButtonEmpty
                                className="dscIndexPattern__triggerButton"
                                color="text"
                                data-test-subj="indexPattern-switch-link"
                                flush="left"
                                iconSide="right"
                                iconType="arrowDown"
                                onClick={[Function]}
                                size="s"
                                title="jaeger"
                              >
                                <button
                                  className="euiButtonEmpty euiButtonEmpty--text euiButtonEmpty--small euiButtonEmpty--flushLeft dscIndexPattern__triggerButton"
                                  data-test-subj="indexPattern-switch-link"
                                  disabled={false}
                                  onClick={[Function]}
                                  title="jaeger"
                                  type="button"
                                >
                                  <EuiButtonContent
                                    className="euiButtonEmpty__content"
                                    iconGap="m"
                                    iconSide="right"
                                    iconSize="m"
                                    iconType="arrowDown"
                                    textProps={
                                      Object {
                                        "className": "euiButtonEmpty__text",
                                      }
                                    }
                                  >
                                    <span
                                      className="euiButtonContent euiButtonContent--iconRight euiButtonEmpty__content"
                                    >
                                      <EuiIcon
                                        className="euiButtonContent__icon"
                                        color="inherit"
                                        size="m"
                                        type="arrowDown"
                                      >
                                        <EuiIconArrowDown
                                          aria-hidden={true}
                                          className="euiIcon euiIcon--medium euiIcon--inherit euiButtonContent__icon"
                                          focusable="false"
                                          role="img"
                                          style={null}
                                        >
                                          <svg
                                            aria-hidden={true}
                                            className="euiIcon euiIcon--medium euiIcon--inherit euiButtonContent__icon"
                                            focusable="false"
                                            height={16}
                                            role="img"
                                            style={null}
                                            viewBox="0 0 16 16"
                                            width={16}
                                            xmlns="http://www.w3.org/2000/svg"
                                          >
                                            <path
                                              d="M13.069 5.157 8.384 9.768a.546.546 0 0 1-.768 0L2.93 5.158a.552.552 0 0 0-.771 0 .53.53 0 0 0 0 .759l4.684 4.61c.641.631 1.672.63 2.312 0l4.684-4.61a.53.53 0 0 0 0-.76.552.552 0 0 0-.771 0Z"
                                              fillRule="non-zero"
                                            />
                                          </svg>
                                        </EuiIconArrowDown>
                                      </EuiIcon>
                                      <span
                                        className="euiButtonEmpty__text"
                                      >
                                        Jaeger
                                      </span>
                                    </span>
                                  </EuiButtonContent>
                                </button>
                              </EuiButtonEmpty>
                            </EuiSmallButtonEmpty>
                          </div>
                        </div>
                      </EuiPopover>
                      <CustomIndexFlyout
                        isFlyoutVisible={false}
                        setIsFlyoutVisible={[Function]}
                      >
                        <div />
                      </CustomIndexFlyout>
                    </DataSourcePicker>
                  </div>
                </EuiFlexItem>
                <EuiFlexItem
                  grow={true}
                >
                  <div
                    className="euiFlexItem"
                  >
                    <ForwardRef
                      attributesFilterFields={Array []}
                      endTime="now"
                      filters={Array []}
                      mode="jaeger"
                      page="services"
                      query=""
                      refresh={[Function]}
                      setEndTime={[MockFunction]}
                      setFilters={
                        [MockFunction] {
                          "calls": Array [
                            Array [
                              Array [],
                            ],
                          ],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        }
                      }
                      setQuery={[MockFunction]}
                      setStartTime={[MockFunction]}
                      startTime="now-5m"
                    >
                      <EuiFlexGroup
                        alignItems="center"
                        gutterSize="s"
                      >
                        <div
                          className="euiFlexGroup euiFlexGroup--gutterSmall euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow euiFlexGroup--responsive"
                        >
                          <EuiFlexItem>
                            <div
                              className="euiFlexItem"
                            >
                              <EuiCompressedFieldSearch
                                compressed={true}
                                data-test-subj="search-bar-input-box"
                                fullWidth={true}
                                incremental={false}
                                isClearable={false}
                                isLoading={false}
                                onChange={[Function]}
                                onSearch={[Function]}
                                placeholder="Trace ID, trace group name, service name"
                                prepend={
                                  <GlobalFilterButton
                                    filters={Array []}
                                    setFilters={
                                      [MockFunction] {
                                        "calls": Array [
                                          Array [
                                            Array [],
                                          ],
                                        ],
                                        "results": Array [
                                          Object {
                                            "type": "return",
                                            "value": undefined,
                                          },
                                        ],
                                      }
                                    }
                                  />
                                }
                                value=""
                              >
                                <EuiFormControlLayout
                                  compressed={true}
                                  fullWidth={true}
                                  icon="search"
                                  isLoading={false}
                                  prepend={
                                    <GlobalFilterButton
                                      filters={Array []}
                                      setFilters={
                                        [MockFunction] {
                                          "calls": Array [
                                            Array [
                                              Array [],
                                            ],
                                          ],
                                          "results": Array [
                                            Object {
                                              "type": "return",
                                              "value": undefined,
                                            },
                                          ],
                                        }
                                      }
                                    />
                                  }
                                >
                                  <div
                                    className="euiFormControlLayout euiFormControlLayout--fullWidth euiFormControlLayout--compressed euiFormControlLayout--group"
                                  >
                                    <GlobalFilterButton
                                      className="euiFormControlLayout__prepend"
                                      filters={Array []}
                                      key="0/.0"
                                      setFilters={
                                        [MockFunction] {
                                          "calls": Array [
                                            Array [
                                              Array [],
                                            ],
                                          ],
                                          "results": Array [
                                            Object {
                                              "type": "return",
                                              "value": undefined,
                                            },
                                          ],
                                        }
                                      }
                                    >
                                      <EuiPopover
                                        anchorPosition="rightUp"
                                        button={
                                          <EuiSmallButtonIcon
                                            aria-label="Change all filters"
                                            iconType="filter"
                                            onClick={[Function]}
                                            title="Change all filters"
                                          />
                                        }
                                        closePopover={[Function]}
                                        data-test-subj="global-filter-button"
                                        display="inlineBlock"
                                        hasArrow={true}
                                        isOpen={false}
                                        ownFocus={true}
                                        panelPaddingSize="none"
                                      >
                                        <div
                                          className="euiPopover euiPopover--anchorRightUp"
                                          data-test-subj="global-filter-button"
                                        >
                                          <div
                                            className="euiPopover__anchor"
                                          >
                                            <EuiSmallButtonIcon
                                              aria-label="Change all filters"
                                              iconType="filter"
                                              onClick={[Function]}
                                              title="Change all filters"
                                            >
                                              <EuiButtonIcon
                                                aria-label="Change all filters"
                                                iconType="filter"
                                                onClick={[Function]}
                                                size="s"
                                                title="Change all filters"
                                              >
                                                <button
                                                  aria-label="Change all filters"
                                                  className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--small"
                                                  disabled={false}
                                                  onClick={[Function]}
                                                  title="Change all filters"
                                                  type="button"
                                                >
                                                  <EuiIcon
                                                    aria-hidden="true"
                                                    className="euiButtonIcon__icon"
                                                    color="inherit"
                                                    size="m"
                                                    type="filter"
                                                  >
                                                    <EuiIconFilter
                                                      aria-hidden={true}
                                                      className="euiIcon euiIcon--medium euiIcon--inherit euiButtonIcon__icon"
                                                      focusable="false"
                                                      role="img"
                                                      style={null}
                                                    >
                                                      <svg
                                                        aria-hidden={true}
                                                        className="euiIcon euiIcon--medium euiIcon--inherit euiButtonIcon__icon"
                                                        focusable="false"
                                                        height={16}
                                                        role="img"
                                                        style={null}
                                                        viewBox="0 0 16 16"
                                                        width={16}
                                                        xmlns="http://www.w3.org/2000/svg"
                                                      >
                                                        <path
                                                          d="m9.759 12.652-1.8 2.25-.78-.625 1.8-2.25A.1.1 0 0 0 9 11.965V8.362a1 1 0 0 1 .232-.64l4.631-5.558A.1.1 0 0 0 13.787 2H2.213a.1.1 0 0 0-.077.164l4.631 5.558a1 1 0 0 1 .232.64v5.853a.1.1 0 0 0 .178.062l.781.625c-.65.812-1.959.353-1.959-.687V8.362L1.368 2.804C.771 2.088 1.281 1 2.214 1h11.573c.932 0 1.442 1.088.845 1.804L10 8.362v3.603a1.1 1.1 0 0 1-.241.687Z"
                                                          fillRule="evenodd"
                                                        />
                                                      </svg>
                                                    </EuiIconFilter>
                                                  </EuiIcon>
                                                </button>
                                              </EuiButtonIcon>
                                            </EuiSmallButtonIcon>
                                          </div>
                                        </div>
                                      </EuiPopover>
                                    </GlobalFilterButton>
                                    <div
                                      className="euiFormControlLayout__childrenWrapper"
                                    >
                                      <EuiValidatableControl>
                                        <input
                                          className="euiFieldSearch euiFieldSearch--fullWidth euiFieldSearch--compressed euiFieldSearch--inGroup"
                                          data-test-subj="search-bar-input-box"
                                          onChange={[Function]}
                                          onKeyUp={[Function]}
                                          placeholder="Trace ID, trace group name, service name"
                                          type="search"
                                          value=""
                                        />
                                      </EuiValidatableControl>
                                      <EuiFormControlLayoutIcons
                                        compressed={true}
                                        icon="search"
                                        isLoading={false}
                                      >
                                        <div
                                          className="euiFormControlLayoutIcons"
                                        >
                                          <EuiFormControlLayoutCustomIcon
                                            size="s"
                                            type="search"
                                          >
                                            <span
                                              className="euiFormControlLayoutCustomIcon"
                                            >
                                              <EuiIcon
                                                aria-hidden="true"
                                                className="euiFormControlLayoutCustomIcon__icon"
                                                size="s"
                                                type="search"
                                              >
                                                <EuiIconSearch
                                                  aria-hidden={true}
                                                  className="euiIcon euiIcon--small euiFormControlLayoutCustomIcon__icon"
                                                  focusable="false"
                                                  role="img"
                                                  style={null}
                                                >
                                                  <svg
                                                    aria-hidden={true}
                                                    className="euiIcon euiIcon--small euiFormControlLayoutCustomIcon__icon"
                                                    focusable="false"
                                                    height={16}
                                                    role="img"
                                                    style={null}
                                                    viewBox="0 0 16 16"
                                                    width={16}
                                                    xmlns="http://www.w3.org/2000/svg"
                                                  >
                                                    <path
                                                      d="m11.271 11.978 3.872 3.873a.502.502 0 0 0 .708 0 .502.502 0 0 0 0-.708l-3.565-3.564c2.38-2.747 2.267-6.923-.342-9.532-2.73-2.73-7.17-2.73-9.898 0-2.728 2.729-2.728 7.17 0 9.9a6.955 6.955 0 0 0 4.949 2.05.5.5 0 0 0 0-1 5.96 5.96 0 0 1-4.242-1.757 6.01 6.01 0 0 1 0-8.486c2.337-2.34 6.143-2.34 8.484 0a6.01 6.01 0 0 1 0 8.486.5.5 0 0 0 .034.738Z"
                                                    />
                                                  </svg>
                                                </EuiIconSearch>
                                              </EuiIcon>
                                            </span>
                                          </EuiFormControlLayoutCustomIcon>
                                        </div>
                                      </EuiFormControlLayoutIcons>
                                    </div>
                                  </div>
                                </EuiFormControlLayout>
                              </EuiCompressedFieldSearch>
                            </div>
                          </EuiFlexItem>
                          <EuiFlexItem
                            grow={false}
                            style={
                              Object {
                                "maxWidth": "30vw",
                              }
                            }
                          >
                            <div
                              className="euiFlexItem euiFlexItem--flexGrowZero"
                              style={
                                Object {
                                  "maxWidth": "30vw",
                                }
                              }
                            >
                              <EuiSuperDatePicker
                                commonlyUsedRanges={
                                  Array [
                                    Object {
                                      "end": "now/d",
                                      "label": "Today",
                                      "start": "now/d",
                                    },
                                    Object {
                                      "end": "now/w",
                                      "label": "This week",
                                      "start": "now/w",
                                    },
                                    Object {
                                      "end": "now/M",
                                      "label": "This month",
                                      "start": "now/M",
                                    },
                                    Object {
                                      "end": "now/y",
                                      "label": "This year",
                                      "start": "now/y",
                                    },
                                    Object {
                                      "end": "now-1d/d",
                                      "label": "Yesterday",
                                      "start": "now-1d/d",
                                    },
                                    Object {
                                      "end": "now",
                                      "label": "Week to date",
                                      "start": "now/w",
                                    },
                                    Object {
                                      "end": "now",
                                      "label": "Month to date",
                                      "start": "now/M",
                                    },
                                    Object {
                                      "end": "now",
                                      "label": "Year to date",
                                      "start": "now/y",
                                    },
                                  ]
                                }
                                compressed={true}
                                dateFormat="MMM D, YYYY @ HH:mm:ss.SSS"
                                end="now"
                                isAutoRefreshOnly={false}
                                isDisabled={false}
                                isPaused={true}
                                onTimeChange={[Function]}
                                recentlyUsedRanges={Array []}
                                refreshInterval={0}
                                showUpdateButton={false}
                                start="now-5m"
                                timeFormat="HH:mm"
                              >
                                <EuiFlexGroup
                                  className="euiSuperDatePicker__flexWrapper euiSuperDatePicker__flexWrapper--noUpdateButton"
                                  gutterSize="s"
                                  responsive={false}
                                >
                                  <div
                                    className="euiFlexGroup euiFlexGroup--gutterSmall euiFlexGroup--directionRow euiSuperDatePicker__flexWrapper euiSuperDatePicker__flexWrapper--noUpdateButton"
                                  >
                                    <EuiFlexItem>
                                      <div
                                        className="euiFlexItem"
                                      >
                                        <EuiFormControlLayout
                                          className="euiSuperDatePicker"
                                          compressed={true}
                                          isDisabled={false}
                                          prepend={
                                            <EuiQuickSelectPopover
                                              applyTime={[Function]}
                                              commonlyUsedRanges={
                                                Array [
                                                  Object {
                                                    "end": "now/d",
                                                    "label": "Today",
                                                    "start": "now/d",
                                                  },
                                                  Object {
                                                    "end": "now/w",
                                                    "label": "This week",
                                                    "start": "now/w",
                                                  },
                                                  Object {
                                                    "end": "now/M",
                                                    "label": "This month",
                                                    "start": "now/M",
                                                  },
                                                  Object {
                                                    "end": "now/y",
                                                    "label": "This year",
                                                    "start": "now/y",
                                                  },
                                                  Object {
                                                    "end": "now-1d/d",
                                                    "label": "Yesterday",
                                                    "start": "now-1d/d",
                                                  },
                                                  Object {
                                                    "end": "now",
                                                    "label": "Week to date",
                                                    "start": "now/w",
                                                  },
                                                  Object {
                                                    "end": "now",
                                                    "label": "Month to date",
                                                    "start": "now/M",
                                                  },
                                                  Object {
                                                    "end": "now",
                                                    "label": "Year to date",
                                                    "start": "now/y",
                                                  },
                                                ]
                                              }
                                              dateFormat="MMM D, YYYY @ HH:mm:ss.SSS"
                                              end="now"
                                              isAutoRefreshOnly={false}
                                              isDisabled={false}
                                              isPaused={true}
                                              recentlyUsedRanges={Array []}
                                              refreshInterval={0}
                                              start="now-5m"
                                            />
                                          }
                                        >
                                          <div
                                            className="euiFormControlLayout euiFormControlLayout--compressed euiFormControlLayout--group euiSuperDatePicker"
                                          >
                                            <EuiQuickSelectPopover
                                              applyTime={[Function]}
                                              className="euiFormControlLayout__prepend"
                                              commonlyUsedRanges={
                                                Array [
                                                  Object {
                                                    "end": "now/d",
                                                    "label": "Today",
                                                    "start": "now/d",
                                                  },
                                                  Object {
                                                    "end": "now/w",
                                                    "label": "This week",
                                                    "start": "now/w",
                                                  },
                                                  Object {
                                                    "end": "now/M",
                                                    "label": "This month",
                                                    "start": "now/M",
                                                  },
                                                  Object {
                                                    "end": "now/y",
                                                    "label": "This year",
                                                    "start": "now/y",
                                                  },
                                                  Object {
                                                    "end": "now-1d/d",
                                                    "label": "Yesterday",
                                                    "start": "now-1d/d",
                                                  },
                                                  Object {
                                                    "end": "now",
                                                    "label": "Week to date",
                                                    "start": "now/w",
                                                  },
                                                  Object {
                                                    "end": "now",
                                                    "label": "Month to date",
                                                    "start": "now/M",
                                                  },
                                                  Object {
                                                    "end": "now",
                                                    "label": "Year to date",
                                                    "start": "now/y",
                                                  },
                                                ]
                                              }
                                              dateFormat="MMM D, YYYY @ HH:mm:ss.SSS"
                                              end="now"
                                              isAutoRefreshOnly={false}
                                              isDisabled={false}
                                              isPaused={true}
                                              key="0/.0"
                                              recentlyUsedRanges={Array []}
                                              refreshInterval={0}
                                              start="now-5m"
                                            >
                                              <EuiPopover
                                                anchorClassName="euiQuickSelectPopover__anchor"
                                                anchorPosition="downLeft"
                                                button={
                                                  <EuiButtonEmpty
                                                    aria-label="Date quick select"
                                                    className="euiFormControlLayout__prepend"
                                                    data-test-subj="superDatePickerToggleQuickMenuButton"
                                                    iconSide="right"
                                                    iconType="arrowDown"
                                                    isDisabled={false}
                                                    onClick={[Function]}
                                                    size="xs"
                                                    textProps={
                                                      Object {
                                                        "className": "euiQuickSelectPopover__buttonText",
                                                      }
                                                    }
                                                  >
                                                    <EuiIcon
                                                      type="calendar"
                                                    />
                                                  </EuiButtonEmpty>
                                                }
                                                closePopover={[Function]}
                                                display="inlineBlock"
                                                hasArrow={true}
                                                isOpen={false}
                                                ownFocus={true}
                                                panelPaddingSize="s"
                                              >
                                                <div
                                                  className="euiPopover euiPopover--anchorDownLeft"
                                                >
                                                  <div
                                                    className="euiPopover__anchor euiQuickSelectPopover__anchor"
                                                  >
                                                    <EuiButtonEmpty
                                                      aria-label="Date quick select"
                                                      className="euiFormControlLayout__prepend"
                                                      data-test-subj="superDatePickerToggleQuickMenuButton"
                                                      iconSide="right"
                                                      iconType="arrowDown"
                                                      isDisabled={false}
                                                      onClick={[Function]}
                                                      size="xs"
                                                      textProps={
                                                        Object {
                                                          "className": "euiQuickSelectPopover__buttonText",
                                                        }
                                                      }
                                                    >
                                                      <button
                                                        aria-label="Date quick select"
                                                        className="euiButtonEmpty euiButtonEmpty--primary euiButtonEmpty--xSmall euiFormControlLayout__prepend"
                                                        data-test-subj="superDatePickerToggleQuickMenuButton"
                                                        disabled={false}
                                                        onClick={[Function]}
                                                        type="button"
                                                      >
                                                        <EuiButtonContent
                                                          className="euiButtonEmpty__content"
                                                          iconGap="m"
                                                          iconSide="right"
                                                          iconSize="s"
                                                          iconType="arrowDown"
                                                          textProps={
                                                            Object {
                                                              "className": "euiButtonEmpty__text euiQuickSelectPopover__buttonText",
                                                            }
                                                          }
                                                        >
                                                          <span
                                                            className="euiButtonContent euiButtonContent--iconRight euiButtonEmpty__content"
                                                          >
                                                            <EuiIcon
                                                              className="euiButtonContent__icon"
                                                              color="inherit"
                                                              size="s"
                                                              type="arrowDown"
                                                            >
                                                              <EuiIconArrowDown
                                                                aria-hidden={true}
                                                                className="euiIcon euiIcon--small euiIcon--inherit euiButtonContent__icon"
                                                                focusable="false"
                                                                role="img"
                                                                style={null}
                                                              >
                                                                <svg
                                                                  aria-hidden={true}
                                                                  className="euiIcon euiIcon--small euiIcon--inherit euiButtonContent__icon"
                                                                  focusable="false"
                                                                  height={16}
                                                                  role="img"
                                                                  style={null}
                                                                  viewBox="0 0 16 16"
                                                                  width={16}
                                                                  xmlns="http://www.w3.org/2000/svg"
                                                                >
                                                                  <path
                                                                    d="M13.069 5.157 8.384 9.768a.546.546 0 0 1-.768 0L2.93 5.158a.552.552 0 0 0-.771 0 .53.53 0 0 0 0 .759l4.684 4.61c.641.631 1.672.63 2.312 0l4.684-4.61a.53.53 0 0 0 0-.76.552.552 0 0 0-.771 0Z"
                                                                    fillRule="non-zero"
                                                                  />
                                                                </svg>
                                                              </EuiIconArrowDown>
                                                            </EuiIcon>
                                                            <span
                                                              className="euiButtonEmpty__text euiQuickSelectPopover__buttonText"
                                                            >
                                                              <EuiIcon
                                                                type="calendar"
                                                              >
                                                                <EuiIconCalendar
                                                                  aria-hidden={true}
                                                                  className="euiIcon euiIcon--medium"
                                                                  focusable="false"
                                                                  role="img"
                                                                  style={null}
                                                                >
                                                                  <svg
                                                                    aria-hidden={true}
                                                                    className="euiIcon euiIcon--medium"
                                                                    focusable="false"
                                                                    height={16}
                                                                    role="img"
                                                                    style={null}
                                                                    viewBox="0 0 16 16"
                                                                    width={16}
                                                                    xmlns="http://www.w3.org/2000/svg"
                                                                  >
                                                                    <path
                                                                      d="M14 4v-.994C14 2.45 13.55 2 12.994 2H11v1h-1V2H6v1H5V2H3.006C2.45 2 2 2.45 2 3.006v9.988C2 13.55 2.45 14 3.006 14h9.988C13.55 14 14 13.55 14 12.994V5H2V4h12zm-3-3h1.994C14.102 1 15 1.897 15 3.006v9.988A2.005 2.005 0 0 1 12.994 15H3.006A2.005 2.005 0 0 1 1 12.994V3.006C1 1.898 1.897 1 3.006 1H5V0h1v1h4V0h1v1zM4 7h2v1H4V7zm3 0h2v1H7V7zm3 0h2v1h-2V7zM4 9h2v1H4V9zm3 0h2v1H7V9zm3 0h2v1h-2V9zm-6 2h2v1H4v-1zm3 0h2v1H7v-1zm3 0h2v1h-2v-1z"
                                                                      fillRule="evenodd"
                                                                    />
                                                                  </svg>
                                                                </EuiIconCalendar>
                                                              </EuiIcon>
                                                            </span>
                                                          </span>
                                                        </EuiButtonContent>
                                                      </button>
                                                    </EuiButtonEmpty>
                                                  </div>
                                                </div>
                                              </EuiPopover>
                                            </EuiQuickSelectPopover>
                                            <div
                                              className="euiFormControlLayout__childrenWrapper"
                                            >
                                              <EuiDatePickerRange
                                                className="euiDatePickerRange--inGroup"
                                                endDateControl={<div />}
                                                iconType={false}
                                                isCustom={true}
                                                startDateControl={<div />}
                                              >
                                                <div
                                                  className="euiDatePickerRange euiDatePickerRange--inGroup"
                                                >
                                                  <button
                                                    className="euiSuperDatePicker__prettyFormat euiSuperDatePicker__prettyFormat--compressed"
                                                    data-test-subj="superDatePickerShowDatesButton"
                                                    disabled={false}
                                                    onClick={[Function]}
                                                  >
                                                    Last 5 minutes
                                                    <span
                                                      className="euiSuperDatePicker__prettyFormatLink"
                                                    >
                                                      <EuiI18n
                                                        default="Show dates"
                                                        token="euiSuperDatePicker.showDatesButtonLabel"
                                                      >
                                                        Show dates
                                                      </EuiI18n>
                                                    </span>
                                                  </button>
                                                </div>
                                              </EuiDatePickerRange>
                                              <EuiFormControlLayoutIcons
                                                compressed={true}
                                              />
                                            </div>
                                          </div>
                                        </EuiFormControlLayout>
                                      </div>
                                    </EuiFlexItem>
                                  </div>
                                </EuiFlexGroup>
                              </EuiSuperDatePicker>
                            </div>
                          </EuiFlexItem>
                          <EuiFlexItem
                            grow={false}
                          >
                            <div
                              className="euiFlexItem euiFlexItem--flexGrowZero"
                            >
                              <EuiButtonIcon
                                aria-label="Refresh"
                                data-click-metric-element="trace_analytics.refresh_button"
                                data-test-subj="superDatePickerApplyTimeButton"
                                display="base"
                                iconType="refresh"
                                onClick={[Function]}
                                size="s"
                              >
                                <button
                                  aria-label="Refresh"
                                  className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--small"
                                  data-click-metric-element="trace_analytics.refresh_button"
                                  data-test-subj="superDatePickerApplyTimeButton"
                                  disabled={false}
                                  onClick={[Function]}
                                  type="button"
                                >
                                  <EuiIcon
                                    aria-hidden="true"
                                    className="euiButtonIcon__icon"
                                    color="inherit"
                                    size="m"
                                    type="refresh"
                                  >
                                    <EuiIconRefresh
                                      aria-hidden={true}
                                      className="euiIcon euiIcon--medium euiIcon--inherit euiButtonIcon__icon"
                                      focusable="false"
                                      role="img"
                                      style={null}
                                    >
                                      <svg
                                        aria-hidden={true}
                                        className="euiIcon euiIcon--medium euiIcon--inherit euiButtonIcon__icon"
                                        focusable="false"
                                        height={16}
                                        role="img"
                                        style={null}
                                        viewBox="0 0 16 16"
                                        width={16}
                                        xmlns="http://www.w3.org/2000/svg"
                                      >
                                        <path
                                          d="M11.228 2.942a.5.5 0 1 1-.538.842A5 5 0 1 0 13 8a.5.5 0 1 1 1 0 6 6 0 1 1-2.772-5.058ZM14 1.5v3A1.5 1.5 0 0 1 12.5 6h-3a.5.5 0 0 1 0-1h3a.5.5 0 0 0 .5-.5v-3a.5.5 0 1 1 1 0Z"
                                        />
                                      </svg>
                                    </EuiIconRefresh>
                                  </EuiIcon>
                                </button>
                              </EuiButtonIcon>
                            </div>
                          </EuiFlexItem>
                        </div>
                      </EuiFlexGroup>
                    </ForwardRef>
                  </div>
                </EuiFlexItem>
              </div>
            </EuiFlexGroup>
            <Filters
              appConfigs={Array []}
              attributesFilterFields={Array []}
              filters={Array []}
              mode="jaeger"
              page="services"
              setFilters={
                [MockFunction] {
                  "calls": Array [
                    Array [
                      Array [],
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": undefined,
                    },
                  ],
                }
              }
            >
              <EuiFlexGroup
                alignItems="center"
                gutterSize="xs"
                responsive={false}
              >
                <div
                  className="euiFlexGroup euiFlexGroup--gutterExtraSmall euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow"
                >
                  <EuiFlexItem
                    grow={false}
                  >
                    <div
                      className="euiFlexItem euiFlexItem--flexGrowZero"
                    >
                      <AddFilterButton>
                        <EuiPopover
                          anchorPosition="downLeft"
                          button={
                            <EuiButtonEmpty
                              flush="left"
                              onClick={[Function]}
                              size="xs"
                            >
                              + Add filter
                            </EuiButtonEmpty>
                          }
                          closePopover={[Function]}
                          data-test-subj="addfilter"
                          display="inlineBlock"
                          hasArrow={true}
                          isOpen={false}
                          ownFocus={true}
                          panelPaddingSize="m"
                        >
                          <div
                            className="euiPopover euiPopover--anchorDownLeft"
                            data-test-subj="addfilter"
                          >
                            <div
                              className="euiPopover__anchor"
                            >
                              <EuiButtonEmpty
                                flush="left"
                                onClick={[Function]}
                                size="xs"
                              >
                                <button
                                  className="euiButtonEmpty euiButtonEmpty--primary euiButtonEmpty--xSmall euiButtonEmpty--flushLeft"
                                  disabled={false}
                                  onClick={[Function]}
                                  type="button"
                                >
                                  <EuiButtonContent
                                    className="euiButtonEmpty__content"
                                    iconGap="m"
                                    iconSide="left"
                                    iconSize="s"
                                    textProps={
                                      Object {
                                        "className": "euiButtonEmpty__text",
                                      }
                                    }
                                  >
                                    <span
                                      className="euiButtonContent euiButtonEmpty__content"
                                    >
                                      <span
                                        className="euiButtonEmpty__text"
                                      >
                                        + Add filter
                                      </span>
                                    </span>
                                  </EuiButtonContent>
                                </button>
                              </EuiButtonEmpty>
                            </div>
                          </div>
                        </EuiPopover>
                      </AddFilterButton>
                    </div>
                  </EuiFlexItem>
                </div>
              </EuiFlexGroup>
            </Filters>
            <EuiSpacer
              size="s"
            >
              <div
                className="euiSpacer euiSpacer--s"
              />
            </EuiSpacer>
            <ServicesTable
              addFilter={[Function]}
              addServicesGroupFilter={[Function]}
              dataPrepperIndicesExist={false}
              isServiceTrendEnabled={false}
              items={Array []}
              jaegerIndicesExist={true}
              loading={true}
              mode="jaeger"
              selectedItems={Array []}
              serviceTrends={Object {}}
              setIsServiceTrendEnabled={[Function]}
              setRedirect={[Function]}
              setSelectedItems={[Function]}
              traceColumnAction={[Function]}
            >
              <EuiPanel>
                <div
                  className="euiPanel euiPanel--paddingMedium euiPanel--borderRadiusMedium euiPanel--plain euiPanel--hasShadow"
                >
                  <EuiFlexGroup
                    justifyContent="spaceBetween"
                  >
                    <div
                      className="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--justifyContentSpaceBetween euiFlexGroup--directionRow euiFlexGroup--responsive"
                    >
                      <EuiFlexItem
                        grow={false}
                      >
                        <div
                          className="euiFlexItem euiFlexItem--flexGrowZero"
                        >
                          <PanelTitle
                            title="Services"
                            totalItems={0}
                          >
                            <EuiText
                              size="m"
                            >
                              <div
                                className="euiText euiText--medium"
                              >
                                <span
                                  className="panel-title"
                                >
                                  Services
                                </span>
                                <span
                                  className="panel-title-count"
                                >
                                   (0)
                                </span>
                              </div>
                            </EuiText>
                          </PanelTitle>
                        </div>
                      </EuiFlexItem>
                      <EuiFlexItem
                        grow={false}
                      >
                        <div
                          className="euiFlexItem euiFlexItem--flexGrowZero"
                        >
                          <EuiFlexGroup>
                            <div
                              className="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--directionRow euiFlexGroup--responsive"
                            >
                              <EuiFlexItem>
                                <div
                                  className="euiFlexItem"
                                >
                                  <EuiToolTip
                                    content="Select services to filter"
                                    delay="regular"
                                    position="top"
                                  >
                                    <span
                                      className="euiToolTipAnchor"
                                      onKeyUp={[Function]}
                                      onMouseOut={[Function]}
                                      onMouseOver={[Function]}
                                    >
                                      <EuiButtonEmpty
                                        isDisabled={true}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onFocus={[Function]}
                                        size="xs"
                                      >
                                        <button
                                          className="euiButtonEmpty euiButtonEmpty--primary euiButtonEmpty--xSmall euiButtonEmpty-isDisabled"
                                          disabled={true}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onFocus={[Function]}
                                          type="button"
                                        >
                                          <EuiButtonContent
                                            className="euiButtonEmpty__content"
                                            iconGap="m"
                                            iconSide="left"
                                            iconSize="s"
                                            textProps={
                                              Object {
                                                "className": "euiButtonEmpty__text",
                                              }
                                            }
                                          >
                                            <span
                                              className="euiButtonContent euiButtonEmpty__content"
                                            >
                                              <span
                                                className="euiButtonEmpty__text"
                                              >
                                                Filter services
                                              </span>
                                            </span>
                                          </EuiButtonContent>
                                        </button>
                                      </EuiButtonEmpty>
                                    </span>
                                  </EuiToolTip>
                                </div>
                              </EuiFlexItem>
                            </div>
                          </EuiFlexGroup>
                        </div>
                      </EuiFlexItem>
                    </div>
                  </EuiFlexGroup>
                  <EuiSpacer
                    size="m"
                  >
                    <div
                      className="euiSpacer euiSpacer--m"
                    />
                  </EuiSpacer>
                  <EuiHorizontalRule
                    margin="none"
                  >
                    <hr
                      className="euiHorizontalRule euiHorizontalRule--full"
                    />
                  </EuiHorizontalRule>
                  <NoMatchMessage
                    size="xl"
                  >
                    <EuiSpacer
                      size="xl"
                    >
                      <div
                        className="euiSpacer euiSpacer--xl"
                      />
                    </EuiSpacer>
                    <EuiEmptyPrompt
                      body={
                        <EuiText
                          size="s"
                        >
                          No data matches the selected filter. Clear the filter and/or increase the time range to see more results.
                        </EuiText>
                      }
                      title={
                        <h2>
                          No matches
                        </h2>
                      }
                    >
                      <div
                        className="euiEmptyPrompt"
                      >
                        <EuiTitle
                          size="m"
                        >
                          <h2
                            className="euiTitle euiTitle--medium"
                          >
                            No matches
                          </h2>
                        </EuiTitle>
                        <EuiTextColor
                          color="subdued"
                        >
                          <span
                            className="euiTextColor euiTextColor--subdued"
                          >
                            <EuiSpacer
                              size="m"
                            >
                              <div
                                className="euiSpacer euiSpacer--m"
                              />
                            </EuiSpacer>
                            <EuiText>
                              <div
                                className="euiText euiText--medium"
                              >
                                <EuiText
                                  size="s"
                                >
                                  <div
                                    className="euiText euiText--small"
                                  >
                                    No data matches the selected filter. Clear the filter and/or increase the time range to see more results.
                                  </div>
                                </EuiText>
                              </div>
                            </EuiText>
                          </span>
                        </EuiTextColor>
                      </div>
                    </EuiEmptyPrompt>
                    <EuiSpacer
                      size="xl"
                    >
                      <div
                        className="euiSpacer euiSpacer--xl"
                      />
                    </EuiSpacer>
                  </NoMatchMessage>
                </div>
              </EuiPanel>
            </ServicesTable>
            <EuiSpacer
              size="s"
            >
              <div
                className="euiSpacer euiSpacer--s"
              />
            </EuiSpacer>
            <div />
          </div>
        </EuiPageBody>
      </div>
    </EuiPage>
  </ServicesContent>
</Services>
`;

exports[`Services component renders services page 1`] = `
<Services
  appConfigs={Array []}
  attributesFilterFields={Array []}
  childBreadcrumbs={
    Array [
      Object {
        "href": "#/trace_analytics/home",
        "text": "Trace analytics",
      },
      Object {
        "href": "#/trace_analytics/services",
        "text": "Services",
      },
    ]
  }
  chrome={
    Object {
      "addApplicationClass": [MockFunction],
      "docTitle": Object {
        "change": [MockFunction],
        "reset": [MockFunction],
      },
      "getApplicationClasses$": [MockFunction],
      "getBadge$": [MockFunction],
      "getBreadcrumbs$": [MockFunction],
      "getBreadcrumbsEnricher$": [MockFunction],
      "getCustomNavLink$": [MockFunction],
      "getHeaderComponent": [MockFunction],
      "getHeaderVariant$": [MockFunction],
      "getHelpExtension$": [MockFunction],
      "getIsNavDrawerLocked$": [MockFunction],
      "getIsVisible$": [MockFunction],
      "globalSearch": Object {
        "getAllSearchCommands": [MockFunction],
      },
      "logos": Object {
        "AnimatedMark": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_spinner_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_spinner_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_spinner_on_light.svg",
        },
        "Application": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_dashboards_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_dashboards_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_dashboards_on_light.svg",
        },
        "CenterMark": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_center_mark_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_center_mark_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_center_mark_on_light.svg",
        },
        "Mark": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_mark_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_mark_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_mark_on_light.svg",
        },
        "OpenSearch": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_on_light.svg",
        },
        "colorScheme": "light",
      },
      "navControls": Object {
        "getCenter$": [MockFunction],
        "getLeft$": [MockFunction],
        "getLeftBottom$": [MockFunction],
        "getRight$": [MockFunction],
        "registerCenter": [MockFunction],
        "registerLeft": [MockFunction],
        "registerLeftBottom": [MockFunction],
        "registerRight": [MockFunction],
      },
      "navGroup": Object {
        "getCurrentNavGroup$": [MockFunction],
        "getNavGroupEnabled": [MockFunction] {
          "calls": Array [
            Array [],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        },
        "getNavGroupsMap$": [MockFunction],
        "setCurrentNavGroup": [MockFunction],
      },
      "navLinks": Object {
        "enableForcedAppSwitcherNavigation": [MockFunction],
        "get": [MockFunction],
        "getAll": [MockFunction],
        "getForceAppSwitcherNavigation$": [MockFunction],
        "getNavLinks$": [MockFunction],
        "has": [MockFunction],
        "showOnly": [MockFunction],
        "update": [MockFunction],
      },
      "recentlyAccessed": Object {
        "add": [MockFunction],
        "get": [MockFunction],
        "get$": [MockFunction],
      },
      "removeApplicationClass": [MockFunction],
      "setAppTitle": [MockFunction],
      "setBadge": [MockFunction],
      "setBreadcrumbs": [MockFunction] {
        "calls": Array [
          Array [
            Array [
              undefined,
              Object {
                "href": "#/trace_analytics/home",
                "text": "Trace analytics",
              },
              Object {
                "href": "#/trace_analytics/services",
                "text": "Services",
              },
            ],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
      "setBreadcrumbsEnricher": [MockFunction],
      "setCustomNavLink": [MockFunction],
      "setHeaderVariant": [MockFunction],
      "setHelpExtension": [MockFunction],
      "setHelpSupportUrl": [MockFunction],
      "setIsVisible": [MockFunction],
    }
  }
  dataPrepperIndicesExist={true}
  dataSourceMDSId={
    Array [
      Object {
        "id": "",
        "label": "",
      },
    ]
  }
  endTime="now"
  filters={Array []}
  http={[MockFunction]}
  mode="data_prepper"
  modes={
    Array [
      Object {
        "id": "jaeger",
        "title": "Jaeger",
      },
      Object {
        "id": "data_prepper",
        "title": "Data Prepper",
      },
    ]
  }
  nameColumnAction={[Function]}
  page="services"
  parentBreadcrumbs={
    Array [
      Object {
        "href": "test#/",
        "text": "test",
      },
    ]
  }
  query=""
  setEndTime={[MockFunction]}
  setFilters={
    [MockFunction] {
      "calls": Array [
        Array [
          Array [],
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  setQuery={[MockFunction]}
  setStartTime={[MockFunction]}
  startTime="now-5m"
  traceColumnAction={[Function]}
>
  <ServicesContent
    appConfigs={Array []}
    attributesFilterFields={Array []}
    childBreadcrumbs={
      Array [
        Object {
          "href": "#/trace_analytics/home",
          "text": "Trace analytics",
        },
        Object {
          "href": "#/trace_analytics/services",
          "text": "Services",
        },
      ]
    }
    chrome={
      Object {
        "addApplicationClass": [MockFunction],
        "docTitle": Object {
          "change": [MockFunction],
          "reset": [MockFunction],
        },
        "getApplicationClasses$": [MockFunction],
        "getBadge$": [MockFunction],
        "getBreadcrumbs$": [MockFunction],
        "getBreadcrumbsEnricher$": [MockFunction],
        "getCustomNavLink$": [MockFunction],
        "getHeaderComponent": [MockFunction],
        "getHeaderVariant$": [MockFunction],
        "getHelpExtension$": [MockFunction],
        "getIsNavDrawerLocked$": [MockFunction],
        "getIsVisible$": [MockFunction],
        "globalSearch": Object {
          "getAllSearchCommands": [MockFunction],
        },
        "logos": Object {
          "AnimatedMark": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_spinner_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_spinner_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_spinner_on_light.svg",
          },
          "Application": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_dashboards_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_dashboards_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_dashboards_on_light.svg",
          },
          "CenterMark": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_center_mark_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_center_mark_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_center_mark_on_light.svg",
          },
          "Mark": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_mark_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_mark_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_mark_on_light.svg",
          },
          "OpenSearch": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_on_light.svg",
          },
          "colorScheme": "light",
        },
        "navControls": Object {
          "getCenter$": [MockFunction],
          "getLeft$": [MockFunction],
          "getLeftBottom$": [MockFunction],
          "getRight$": [MockFunction],
          "registerCenter": [MockFunction],
          "registerLeft": [MockFunction],
          "registerLeftBottom": [MockFunction],
          "registerRight": [MockFunction],
        },
        "navGroup": Object {
          "getCurrentNavGroup$": [MockFunction],
          "getNavGroupEnabled": [MockFunction] {
            "calls": Array [
              Array [],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": undefined,
              },
            ],
          },
          "getNavGroupsMap$": [MockFunction],
          "setCurrentNavGroup": [MockFunction],
        },
        "navLinks": Object {
          "enableForcedAppSwitcherNavigation": [MockFunction],
          "get": [MockFunction],
          "getAll": [MockFunction],
          "getForceAppSwitcherNavigation$": [MockFunction],
          "getNavLinks$": [MockFunction],
          "has": [MockFunction],
          "showOnly": [MockFunction],
          "update": [MockFunction],
        },
        "recentlyAccessed": Object {
          "add": [MockFunction],
          "get": [MockFunction],
          "get$": [MockFunction],
        },
        "removeApplicationClass": [MockFunction],
        "setAppTitle": [MockFunction],
        "setBadge": [MockFunction],
        "setBreadcrumbs": [MockFunction] {
          "calls": Array [
            Array [
              Array [
                undefined,
                Object {
                  "href": "#/trace_analytics/home",
                  "text": "Trace analytics",
                },
                Object {
                  "href": "#/trace_analytics/services",
                  "text": "Services",
                },
              ],
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        },
        "setBreadcrumbsEnricher": [MockFunction],
        "setCustomNavLink": [MockFunction],
        "setHeaderVariant": [MockFunction],
        "setHelpExtension": [MockFunction],
        "setHelpSupportUrl": [MockFunction],
        "setIsVisible": [MockFunction],
      }
    }
    dataPrepperIndicesExist={true}
    dataSourceMDSId={
      Array [
        Object {
          "id": "",
          "label": "",
        },
      ]
    }
    endTime="now"
    filters={Array []}
    http={[MockFunction]}
    mode="data_prepper"
    modes={
      Array [
        Object {
          "id": "jaeger",
          "title": "Jaeger",
        },
        Object {
          "id": "data_prepper",
          "title": "Data Prepper",
        },
      ]
    }
    nameColumnAction={[Function]}
    page="services"
    parentBreadcrumbs={
      Array [
        Object {
          "href": "test#/",
          "text": "test",
        },
      ]
    }
    query=""
    setEndTime={[MockFunction]}
    setFilters={
      [MockFunction] {
        "calls": Array [
          Array [
            Array [],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    setQuery={[MockFunction]}
    setStartTime={[MockFunction]}
    startTime="now-5m"
    traceColumnAction={[Function]}
  >
    <EuiPage
      paddingSize="m"
    >
      <div
        className="euiPage euiPage--paddingMedium euiPage--grow"
      >
        <EuiPageBody>
          <div
            className="euiPageBody euiPageBody--borderRadiusNone"
          >
            <EuiFlexGroup
              alignItems="center"
              gutterSize="s"
              justifyContent="spaceBetween"
            >
              <div
                className="euiFlexGroup euiFlexGroup--gutterSmall euiFlexGroup--alignItemsCenter euiFlexGroup--justifyContentSpaceBetween euiFlexGroup--directionRow euiFlexGroup--responsive"
              >
                <EuiFlexItem
                  grow={false}
                >
                  <div
                    className="euiFlexItem euiFlexItem--flexGrowZero"
                  >
                    <DataSourcePicker
                      modes={
                        Array [
                          Object {
                            "id": "jaeger",
                            "title": "Jaeger",
                          },
                          Object {
                            "id": "data_prepper",
                            "title": "Data Prepper",
                          },
                        ]
                      }
                      selectedMode="data_prepper"
                    >
                      <EuiPopover
                        anchorClassName="eui-textTruncate"
                        anchorPosition="downCenter"
                        button={
                          <EuiSmallButtonEmpty
                            className="dscIndexPattern__triggerButton"
                            color="text"
                            data-test-subj="indexPattern-switch-link"
                            flush="left"
                            iconSide="right"
                            iconType="arrowDown"
                            onClick={[Function]}
                            title="data_prepper"
                          >
                            Data Prepper
                          </EuiSmallButtonEmpty>
                        }
                        className="eui-textTruncate"
                        closePopover={[Function]}
                        display="inlineBlock"
                        hasArrow={true}
                        isOpen={false}
                        ownFocus={true}
                        panelPaddingSize="s"
                      >
                        <div
                          className="euiPopover euiPopover--anchorDownCenter eui-textTruncate"
                        >
                          <div
                            className="euiPopover__anchor eui-textTruncate"
                          >
                            <EuiSmallButtonEmpty
                              className="dscIndexPattern__triggerButton"
                              color="text"
                              data-test-subj="indexPattern-switch-link"
                              flush="left"
                              iconSide="right"
                              iconType="arrowDown"
                              onClick={[Function]}
                              title="data_prepper"
                            >
                              <EuiButtonEmpty
                                className="dscIndexPattern__triggerButton"
                                color="text"
                                data-test-subj="indexPattern-switch-link"
                                flush="left"
                                iconSide="right"
                                iconType="arrowDown"
                                onClick={[Function]}
                                size="s"
                                title="data_prepper"
                              >
                                <button
                                  className="euiButtonEmpty euiButtonEmpty--text euiButtonEmpty--small euiButtonEmpty--flushLeft dscIndexPattern__triggerButton"
                                  data-test-subj="indexPattern-switch-link"
                                  disabled={false}
                                  onClick={[Function]}
                                  title="data_prepper"
                                  type="button"
                                >
                                  <EuiButtonContent
                                    className="euiButtonEmpty__content"
                                    iconGap="m"
                                    iconSide="right"
                                    iconSize="m"
                                    iconType="arrowDown"
                                    textProps={
                                      Object {
                                        "className": "euiButtonEmpty__text",
                                      }
                                    }
                                  >
                                    <span
                                      className="euiButtonContent euiButtonContent--iconRight euiButtonEmpty__content"
                                    >
                                      <EuiIcon
                                        className="euiButtonContent__icon"
                                        color="inherit"
                                        size="m"
                                        type="arrowDown"
                                      >
                                        <EuiIconArrowDown
                                          aria-hidden={true}
                                          className="euiIcon euiIcon--medium euiIcon--inherit euiButtonContent__icon"
                                          focusable="false"
                                          role="img"
                                          style={null}
                                        >
                                          <svg
                                            aria-hidden={true}
                                            className="euiIcon euiIcon--medium euiIcon--inherit euiButtonContent__icon"
                                            focusable="false"
                                            height={16}
                                            role="img"
                                            style={null}
                                            viewBox="0 0 16 16"
                                            width={16}
                                            xmlns="http://www.w3.org/2000/svg"
                                          >
                                            <path
                                              d="M13.069 5.157 8.384 9.768a.546.546 0 0 1-.768 0L2.93 5.158a.552.552 0 0 0-.771 0 .53.53 0 0 0 0 .759l4.684 4.61c.641.631 1.672.63 2.312 0l4.684-4.61a.53.53 0 0 0 0-.76.552.552 0 0 0-.771 0Z"
                                              fillRule="non-zero"
                                            />
                                          </svg>
                                        </EuiIconArrowDown>
                                      </EuiIcon>
                                      <span
                                        className="euiButtonEmpty__text"
                                      >
                                        Data Prepper
                                      </span>
                                    </span>
                                  </EuiButtonContent>
                                </button>
                              </EuiButtonEmpty>
                            </EuiSmallButtonEmpty>
                          </div>
                        </div>
                      </EuiPopover>
                      <CustomIndexFlyout
                        isFlyoutVisible={false}
                        setIsFlyoutVisible={[Function]}
                      >
                        <div />
                      </CustomIndexFlyout>
                    </DataSourcePicker>
                  </div>
                </EuiFlexItem>
                <EuiFlexItem
                  grow={true}
                >
                  <div
                    className="euiFlexItem"
                  >
                    <ForwardRef
                      attributesFilterFields={Array []}
                      endTime="now"
                      filters={Array []}
                      mode="data_prepper"
                      page="services"
                      query=""
                      refresh={[Function]}
                      setEndTime={[MockFunction]}
                      setFilters={
                        [MockFunction] {
                          "calls": Array [
                            Array [
                              Array [],
                            ],
                          ],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        }
                      }
                      setQuery={[MockFunction]}
                      setStartTime={[MockFunction]}
                      startTime="now-5m"
                    >
                      <EuiFlexGroup
                        alignItems="center"
                        gutterSize="s"
                      >
                        <div
                          className="euiFlexGroup euiFlexGroup--gutterSmall euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow euiFlexGroup--responsive"
                        >
                          <EuiFlexItem>
                            <div
                              className="euiFlexItem"
                            >
                              <EuiCompressedFieldSearch
                                compressed={true}
                                data-test-subj="search-bar-input-box"
                                fullWidth={true}
                                incremental={false}
                                isClearable={false}
                                isLoading={false}
                                onChange={[Function]}
                                onSearch={[Function]}
                                placeholder="Trace ID, trace group name, service name"
                                prepend={
                                  <GlobalFilterButton
                                    filters={Array []}
                                    setFilters={
                                      [MockFunction] {
                                        "calls": Array [
                                          Array [
                                            Array [],
                                          ],
                                        ],
                                        "results": Array [
                                          Object {
                                            "type": "return",
                                            "value": undefined,
                                          },
                                        ],
                                      }
                                    }
                                  />
                                }
                                value=""
                              >
                                <EuiFormControlLayout
                                  compressed={true}
                                  fullWidth={true}
                                  icon="search"
                                  isLoading={false}
                                  prepend={
                                    <GlobalFilterButton
                                      filters={Array []}
                                      setFilters={
                                        [MockFunction] {
                                          "calls": Array [
                                            Array [
                                              Array [],
                                            ],
                                          ],
                                          "results": Array [
                                            Object {
                                              "type": "return",
                                              "value": undefined,
                                            },
                                          ],
                                        }
                                      }
                                    />
                                  }
                                >
                                  <div
                                    className="euiFormControlLayout euiFormControlLayout--fullWidth euiFormControlLayout--compressed euiFormControlLayout--group"
                                  >
                                    <GlobalFilterButton
                                      className="euiFormControlLayout__prepend"
                                      filters={Array []}
                                      key="0/.0"
                                      setFilters={
                                        [MockFunction] {
                                          "calls": Array [
                                            Array [
                                              Array [],
                                            ],
                                          ],
                                          "results": Array [
                                            Object {
                                              "type": "return",
                                              "value": undefined,
                                            },
                                          ],
                                        }
                                      }
                                    >
                                      <EuiPopover
                                        anchorPosition="rightUp"
                                        button={
                                          <EuiSmallButtonIcon
                                            aria-label="Change all filters"
                                            iconType="filter"
                                            onClick={[Function]}
                                            title="Change all filters"
                                          />
                                        }
                                        closePopover={[Function]}
                                        data-test-subj="global-filter-button"
                                        display="inlineBlock"
                                        hasArrow={true}
                                        isOpen={false}
                                        ownFocus={true}
                                        panelPaddingSize="none"
                                      >
                                        <div
                                          className="euiPopover euiPopover--anchorRightUp"
                                          data-test-subj="global-filter-button"
                                        >
                                          <div
                                            className="euiPopover__anchor"
                                          >
                                            <EuiSmallButtonIcon
                                              aria-label="Change all filters"
                                              iconType="filter"
                                              onClick={[Function]}
                                              title="Change all filters"
                                            >
                                              <EuiButtonIcon
                                                aria-label="Change all filters"
                                                iconType="filter"
                                                onClick={[Function]}
                                                size="s"
                                                title="Change all filters"
                                              >
                                                <button
                                                  aria-label="Change all filters"
                                                  className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--small"
                                                  disabled={false}
                                                  onClick={[Function]}
                                                  title="Change all filters"
                                                  type="button"
                                                >
                                                  <EuiIcon
                                                    aria-hidden="true"
                                                    className="euiButtonIcon__icon"
                                                    color="inherit"
                                                    size="m"
                                                    type="filter"
                                                  >
                                                    <EuiIconFilter
                                                      aria-hidden={true}
                                                      className="euiIcon euiIcon--medium euiIcon--inherit euiButtonIcon__icon"
                                                      focusable="false"
                                                      role="img"
                                                      style={null}
                                                    >
                                                      <svg
                                                        aria-hidden={true}
                                                        className="euiIcon euiIcon--medium euiIcon--inherit euiButtonIcon__icon"
                                                        focusable="false"
                                                        height={16}
                                                        role="img"
                                                        style={null}
                                                        viewBox="0 0 16 16"
                                                        width={16}
                                                        xmlns="http://www.w3.org/2000/svg"
                                                      >
                                                        <path
                                                          d="m9.759 12.652-1.8 2.25-.78-.625 1.8-2.25A.1.1 0 0 0 9 11.965V8.362a1 1 0 0 1 .232-.64l4.631-5.558A.1.1 0 0 0 13.787 2H2.213a.1.1 0 0 0-.077.164l4.631 5.558a1 1 0 0 1 .232.64v5.853a.1.1 0 0 0 .178.062l.781.625c-.65.812-1.959.353-1.959-.687V8.362L1.368 2.804C.771 2.088 1.281 1 2.214 1h11.573c.932 0 1.442 1.088.845 1.804L10 8.362v3.603a1.1 1.1 0 0 1-.241.687Z"
                                                          fillRule="evenodd"
                                                        />
                                                      </svg>
                                                    </EuiIconFilter>
                                                  </EuiIcon>
                                                </button>
                                              </EuiButtonIcon>
                                            </EuiSmallButtonIcon>
                                          </div>
                                        </div>
                                      </EuiPopover>
                                    </GlobalFilterButton>
                                    <div
                                      className="euiFormControlLayout__childrenWrapper"
                                    >
                                      <EuiValidatableControl>
                                        <input
                                          className="euiFieldSearch euiFieldSearch--fullWidth euiFieldSearch--compressed euiFieldSearch--inGroup"
                                          data-test-subj="search-bar-input-box"
                                          onChange={[Function]}
                                          onKeyUp={[Function]}
                                          placeholder="Trace ID, trace group name, service name"
                                          type="search"
                                          value=""
                                        />
                                      </EuiValidatableControl>
                                      <EuiFormControlLayoutIcons
                                        compressed={true}
                                        icon="search"
                                        isLoading={false}
                                      >
                                        <div
                                          className="euiFormControlLayoutIcons"
                                        >
                                          <EuiFormControlLayoutCustomIcon
                                            size="s"
                                            type="search"
                                          >
                                            <span
                                              className="euiFormControlLayoutCustomIcon"
                                            >
                                              <EuiIcon
                                                aria-hidden="true"
                                                className="euiFormControlLayoutCustomIcon__icon"
                                                size="s"
                                                type="search"
                                              >
                                                <EuiIconSearch
                                                  aria-hidden={true}
                                                  className="euiIcon euiIcon--small euiFormControlLayoutCustomIcon__icon"
                                                  focusable="false"
                                                  role="img"
                                                  style={null}
                                                >
                                                  <svg
                                                    aria-hidden={true}
                                                    className="euiIcon euiIcon--small euiFormControlLayoutCustomIcon__icon"
                                                    focusable="false"
                                                    height={16}
                                                    role="img"
                                                    style={null}
                                                    viewBox="0 0 16 16"
                                                    width={16}
                                                    xmlns="http://www.w3.org/2000/svg"
                                                  >
                                                    <path
                                                      d="m11.271 11.978 3.872 3.873a.502.502 0 0 0 .708 0 .502.502 0 0 0 0-.708l-3.565-3.564c2.38-2.747 2.267-6.923-.342-9.532-2.73-2.73-7.17-2.73-9.898 0-2.728 2.729-2.728 7.17 0 9.9a6.955 6.955 0 0 0 4.949 2.05.5.5 0 0 0 0-1 5.96 5.96 0 0 1-4.242-1.757 6.01 6.01 0 0 1 0-8.486c2.337-2.34 6.143-2.34 8.484 0a6.01 6.01 0 0 1 0 8.486.5.5 0 0 0 .034.738Z"
                                                    />
                                                  </svg>
                                                </EuiIconSearch>
                                              </EuiIcon>
                                            </span>
                                          </EuiFormControlLayoutCustomIcon>
                                        </div>
                                      </EuiFormControlLayoutIcons>
                                    </div>
                                  </div>
                                </EuiFormControlLayout>
                              </EuiCompressedFieldSearch>
                            </div>
                          </EuiFlexItem>
                          <EuiFlexItem
                            grow={false}
                            style={
                              Object {
                                "maxWidth": "30vw",
                              }
                            }
                          >
                            <div
                              className="euiFlexItem euiFlexItem--flexGrowZero"
                              style={
                                Object {
                                  "maxWidth": "30vw",
                                }
                              }
                            >
                              <EuiSuperDatePicker
                                commonlyUsedRanges={
                                  Array [
                                    Object {
                                      "end": "now/d",
                                      "label": "Today",
                                      "start": "now/d",
                                    },
                                    Object {
                                      "end": "now/w",
                                      "label": "This week",
                                      "start": "now/w",
                                    },
                                    Object {
                                      "end": "now/M",
                                      "label": "This month",
                                      "start": "now/M",
                                    },
                                    Object {
                                      "end": "now/y",
                                      "label": "This year",
                                      "start": "now/y",
                                    },
                                    Object {
                                      "end": "now-1d/d",
                                      "label": "Yesterday",
                                      "start": "now-1d/d",
                                    },
                                    Object {
                                      "end": "now",
                                      "label": "Week to date",
                                      "start": "now/w",
                                    },
                                    Object {
                                      "end": "now",
                                      "label": "Month to date",
                                      "start": "now/M",
                                    },
                                    Object {
                                      "end": "now",
                                      "label": "Year to date",
                                      "start": "now/y",
                                    },
                                  ]
                                }
                                compressed={true}
                                dateFormat="MMM D, YYYY @ HH:mm:ss.SSS"
                                end="now"
                                isAutoRefreshOnly={false}
                                isDisabled={false}
                                isPaused={true}
                                onTimeChange={[Function]}
                                recentlyUsedRanges={Array []}
                                refreshInterval={0}
                                showUpdateButton={false}
                                start="now-5m"
                                timeFormat="HH:mm"
                              >
                                <EuiFlexGroup
                                  className="euiSuperDatePicker__flexWrapper euiSuperDatePicker__flexWrapper--noUpdateButton"
                                  gutterSize="s"
                                  responsive={false}
                                >
                                  <div
                                    className="euiFlexGroup euiFlexGroup--gutterSmall euiFlexGroup--directionRow euiSuperDatePicker__flexWrapper euiSuperDatePicker__flexWrapper--noUpdateButton"
                                  >
                                    <EuiFlexItem>
                                      <div
                                        className="euiFlexItem"
                                      >
                                        <EuiFormControlLayout
                                          className="euiSuperDatePicker"
                                          compressed={true}
                                          isDisabled={false}
                                          prepend={
                                            <EuiQuickSelectPopover
                                              applyTime={[Function]}
                                              commonlyUsedRanges={
                                                Array [
                                                  Object {
                                                    "end": "now/d",
                                                    "label": "Today",
                                                    "start": "now/d",
                                                  },
                                                  Object {
                                                    "end": "now/w",
                                                    "label": "This week",
                                                    "start": "now/w",
                                                  },
                                                  Object {
                                                    "end": "now/M",
                                                    "label": "This month",
                                                    "start": "now/M",
                                                  },
                                                  Object {
                                                    "end": "now/y",
                                                    "label": "This year",
                                                    "start": "now/y",
                                                  },
                                                  Object {
                                                    "end": "now-1d/d",
                                                    "label": "Yesterday",
                                                    "start": "now-1d/d",
                                                  },
                                                  Object {
                                                    "end": "now",
                                                    "label": "Week to date",
                                                    "start": "now/w",
                                                  },
                                                  Object {
                                                    "end": "now",
                                                    "label": "Month to date",
                                                    "start": "now/M",
                                                  },
                                                  Object {
                                                    "end": "now",
                                                    "label": "Year to date",
                                                    "start": "now/y",
                                                  },
                                                ]
                                              }
                                              dateFormat="MMM D, YYYY @ HH:mm:ss.SSS"
                                              end="now"
                                              isAutoRefreshOnly={false}
                                              isDisabled={false}
                                              isPaused={true}
                                              recentlyUsedRanges={Array []}
                                              refreshInterval={0}
                                              start="now-5m"
                                            />
                                          }
                                        >
                                          <div
                                            className="euiFormControlLayout euiFormControlLayout--compressed euiFormControlLayout--group euiSuperDatePicker"
                                          >
                                            <EuiQuickSelectPopover
                                              applyTime={[Function]}
                                              className="euiFormControlLayout__prepend"
                                              commonlyUsedRanges={
                                                Array [
                                                  Object {
                                                    "end": "now/d",
                                                    "label": "Today",
                                                    "start": "now/d",
                                                  },
                                                  Object {
                                                    "end": "now/w",
                                                    "label": "This week",
                                                    "start": "now/w",
                                                  },
                                                  Object {
                                                    "end": "now/M",
                                                    "label": "This month",
                                                    "start": "now/M",
                                                  },
                                                  Object {
                                                    "end": "now/y",
                                                    "label": "This year",
                                                    "start": "now/y",
                                                  },
                                                  Object {
                                                    "end": "now-1d/d",
                                                    "label": "Yesterday",
                                                    "start": "now-1d/d",
                                                  },
                                                  Object {
                                                    "end": "now",
                                                    "label": "Week to date",
                                                    "start": "now/w",
                                                  },
                                                  Object {
                                                    "end": "now",
                                                    "label": "Month to date",
                                                    "start": "now/M",
                                                  },
                                                  Object {
                                                    "end": "now",
                                                    "label": "Year to date",
                                                    "start": "now/y",
                                                  },
                                                ]
                                              }
                                              dateFormat="MMM D, YYYY @ HH:mm:ss.SSS"
                                              end="now"
                                              isAutoRefreshOnly={false}
                                              isDisabled={false}
                                              isPaused={true}
                                              key="0/.0"
                                              recentlyUsedRanges={Array []}
                                              refreshInterval={0}
                                              start="now-5m"
                                            >
                                              <EuiPopover
                                                anchorClassName="euiQuickSelectPopover__anchor"
                                                anchorPosition="downLeft"
                                                button={
                                                  <EuiButtonEmpty
                                                    aria-label="Date quick select"
                                                    className="euiFormControlLayout__prepend"
                                                    data-test-subj="superDatePickerToggleQuickMenuButton"
                                                    iconSide="right"
                                                    iconType="arrowDown"
                                                    isDisabled={false}
                                                    onClick={[Function]}
                                                    size="xs"
                                                    textProps={
                                                      Object {
                                                        "className": "euiQuickSelectPopover__buttonText",
                                                      }
                                                    }
                                                  >
                                                    <EuiIcon
                                                      type="calendar"
                                                    />
                                                  </EuiButtonEmpty>
                                                }
                                                closePopover={[Function]}
                                                display="inlineBlock"
                                                hasArrow={true}
                                                isOpen={false}
                                                ownFocus={true}
                                                panelPaddingSize="s"
                                              >
                                                <div
                                                  className="euiPopover euiPopover--anchorDownLeft"
                                                >
                                                  <div
                                                    className="euiPopover__anchor euiQuickSelectPopover__anchor"
                                                  >
                                                    <EuiButtonEmpty
                                                      aria-label="Date quick select"
                                                      className="euiFormControlLayout__prepend"
                                                      data-test-subj="superDatePickerToggleQuickMenuButton"
                                                      iconSide="right"
                                                      iconType="arrowDown"
                                                      isDisabled={false}
                                                      onClick={[Function]}
                                                      size="xs"
                                                      textProps={
                                                        Object {
                                                          "className": "euiQuickSelectPopover__buttonText",
                                                        }
                                                      }
                                                    >
                                                      <button
                                                        aria-label="Date quick select"
                                                        className="euiButtonEmpty euiButtonEmpty--primary euiButtonEmpty--xSmall euiFormControlLayout__prepend"
                                                        data-test-subj="superDatePickerToggleQuickMenuButton"
                                                        disabled={false}
                                                        onClick={[Function]}
                                                        type="button"
                                                      >
                                                        <EuiButtonContent
                                                          className="euiButtonEmpty__content"
                                                          iconGap="m"
                                                          iconSide="right"
                                                          iconSize="s"
                                                          iconType="arrowDown"
                                                          textProps={
                                                            Object {
                                                              "className": "euiButtonEmpty__text euiQuickSelectPopover__buttonText",
                                                            }
                                                          }
                                                        >
                                                          <span
                                                            className="euiButtonContent euiButtonContent--iconRight euiButtonEmpty__content"
                                                          >
                                                            <EuiIcon
                                                              className="euiButtonContent__icon"
                                                              color="inherit"
                                                              size="s"
                                                              type="arrowDown"
                                                            >
                                                              <EuiIconArrowDown
                                                                aria-hidden={true}
                                                                className="euiIcon euiIcon--small euiIcon--inherit euiButtonContent__icon"
                                                                focusable="false"
                                                                role="img"
                                                                style={null}
                                                              >
                                                                <svg
                                                                  aria-hidden={true}
                                                                  className="euiIcon euiIcon--small euiIcon--inherit euiButtonContent__icon"
                                                                  focusable="false"
                                                                  height={16}
                                                                  role="img"
                                                                  style={null}
                                                                  viewBox="0 0 16 16"
                                                                  width={16}
                                                                  xmlns="http://www.w3.org/2000/svg"
                                                                >
                                                                  <path
                                                                    d="M13.069 5.157 8.384 9.768a.546.546 0 0 1-.768 0L2.93 5.158a.552.552 0 0 0-.771 0 .53.53 0 0 0 0 .759l4.684 4.61c.641.631 1.672.63 2.312 0l4.684-4.61a.53.53 0 0 0 0-.76.552.552 0 0 0-.771 0Z"
                                                                    fillRule="non-zero"
                                                                  />
                                                                </svg>
                                                              </EuiIconArrowDown>
                                                            </EuiIcon>
                                                            <span
                                                              className="euiButtonEmpty__text euiQuickSelectPopover__buttonText"
                                                            >
                                                              <EuiIcon
                                                                type="calendar"
                                                              >
                                                                <EuiIconCalendar
                                                                  aria-hidden={true}
                                                                  className="euiIcon euiIcon--medium"
                                                                  focusable="false"
                                                                  role="img"
                                                                  style={null}
                                                                >
                                                                  <svg
                                                                    aria-hidden={true}
                                                                    className="euiIcon euiIcon--medium"
                                                                    focusable="false"
                                                                    height={16}
                                                                    role="img"
                                                                    style={null}
                                                                    viewBox="0 0 16 16"
                                                                    width={16}
                                                                    xmlns="http://www.w3.org/2000/svg"
                                                                  >
                                                                    <path
                                                                      d="M14 4v-.994C14 2.45 13.55 2 12.994 2H11v1h-1V2H6v1H5V2H3.006C2.45 2 2 2.45 2 3.006v9.988C2 13.55 2.45 14 3.006 14h9.988C13.55 14 14 13.55 14 12.994V5H2V4h12zm-3-3h1.994C14.102 1 15 1.897 15 3.006v9.988A2.005 2.005 0 0 1 12.994 15H3.006A2.005 2.005 0 0 1 1 12.994V3.006C1 1.898 1.897 1 3.006 1H5V0h1v1h4V0h1v1zM4 7h2v1H4V7zm3 0h2v1H7V7zm3 0h2v1h-2V7zM4 9h2v1H4V9zm3 0h2v1H7V9zm3 0h2v1h-2V9zm-6 2h2v1H4v-1zm3 0h2v1H7v-1zm3 0h2v1h-2v-1z"
                                                                      fillRule="evenodd"
                                                                    />
                                                                  </svg>
                                                                </EuiIconCalendar>
                                                              </EuiIcon>
                                                            </span>
                                                          </span>
                                                        </EuiButtonContent>
                                                      </button>
                                                    </EuiButtonEmpty>
                                                  </div>
                                                </div>
                                              </EuiPopover>
                                            </EuiQuickSelectPopover>
                                            <div
                                              className="euiFormControlLayout__childrenWrapper"
                                            >
                                              <EuiDatePickerRange
                                                className="euiDatePickerRange--inGroup"
                                                endDateControl={<div />}
                                                iconType={false}
                                                isCustom={true}
                                                startDateControl={<div />}
                                              >
                                                <div
                                                  className="euiDatePickerRange euiDatePickerRange--inGroup"
                                                >
                                                  <button
                                                    className="euiSuperDatePicker__prettyFormat euiSuperDatePicker__prettyFormat--compressed"
                                                    data-test-subj="superDatePickerShowDatesButton"
                                                    disabled={false}
                                                    onClick={[Function]}
                                                  >
                                                    Last 5 minutes
                                                    <span
                                                      className="euiSuperDatePicker__prettyFormatLink"
                                                    >
                                                      <EuiI18n
                                                        default="Show dates"
                                                        token="euiSuperDatePicker.showDatesButtonLabel"
                                                      >
                                                        Show dates
                                                      </EuiI18n>
                                                    </span>
                                                  </button>
                                                </div>
                                              </EuiDatePickerRange>
                                              <EuiFormControlLayoutIcons
                                                compressed={true}
                                              />
                                            </div>
                                          </div>
                                        </EuiFormControlLayout>
                                      </div>
                                    </EuiFlexItem>
                                  </div>
                                </EuiFlexGroup>
                              </EuiSuperDatePicker>
                            </div>
                          </EuiFlexItem>
                          <EuiFlexItem
                            grow={false}
                          >
                            <div
                              className="euiFlexItem euiFlexItem--flexGrowZero"
                            >
                              <EuiButtonIcon
                                aria-label="Refresh"
                                data-click-metric-element="trace_analytics.refresh_button"
                                data-test-subj="superDatePickerApplyTimeButton"
                                display="base"
                                iconType="refresh"
                                onClick={[Function]}
                                size="s"
                              >
                                <button
                                  aria-label="Refresh"
                                  className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--small"
                                  data-click-metric-element="trace_analytics.refresh_button"
                                  data-test-subj="superDatePickerApplyTimeButton"
                                  disabled={false}
                                  onClick={[Function]}
                                  type="button"
                                >
                                  <EuiIcon
                                    aria-hidden="true"
                                    className="euiButtonIcon__icon"
                                    color="inherit"
                                    size="m"
                                    type="refresh"
                                  >
                                    <EuiIconRefresh
                                      aria-hidden={true}
                                      className="euiIcon euiIcon--medium euiIcon--inherit euiButtonIcon__icon"
                                      focusable="false"
                                      role="img"
                                      style={null}
                                    >
                                      <svg
                                        aria-hidden={true}
                                        className="euiIcon euiIcon--medium euiIcon--inherit euiButtonIcon__icon"
                                        focusable="false"
                                        height={16}
                                        role="img"
                                        style={null}
                                        viewBox="0 0 16 16"
                                        width={16}
                                        xmlns="http://www.w3.org/2000/svg"
                                      >
                                        <path
                                          d="M11.228 2.942a.5.5 0 1 1-.538.842A5 5 0 1 0 13 8a.5.5 0 1 1 1 0 6 6 0 1 1-2.772-5.058ZM14 1.5v3A1.5 1.5 0 0 1 12.5 6h-3a.5.5 0 0 1 0-1h3a.5.5 0 0 0 .5-.5v-3a.5.5 0 1 1 1 0Z"
                                        />
                                      </svg>
                                    </EuiIconRefresh>
                                  </EuiIcon>
                                </button>
                              </EuiButtonIcon>
                            </div>
                          </EuiFlexItem>
                        </div>
                      </EuiFlexGroup>
                    </ForwardRef>
                  </div>
                </EuiFlexItem>
              </div>
            </EuiFlexGroup>
            <Filters
              appConfigs={Array []}
              attributesFilterFields={Array []}
              filters={Array []}
              mode="data_prepper"
              page="services"
              setFilters={
                [MockFunction] {
                  "calls": Array [
                    Array [
                      Array [],
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": undefined,
                    },
                  ],
                }
              }
            >
              <EuiFlexGroup
                alignItems="center"
                gutterSize="xs"
                responsive={false}
              >
                <div
                  className="euiFlexGroup euiFlexGroup--gutterExtraSmall euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow"
                >
                  <EuiFlexItem
                    grow={false}
                  >
                    <div
                      className="euiFlexItem euiFlexItem--flexGrowZero"
                    >
                      <AddFilterButton>
                        <EuiPopover
                          anchorPosition="downLeft"
                          button={
                            <EuiButtonEmpty
                              flush="left"
                              onClick={[Function]}
                              size="xs"
                            >
                              + Add filter
                            </EuiButtonEmpty>
                          }
                          closePopover={[Function]}
                          data-test-subj="addfilter"
                          display="inlineBlock"
                          hasArrow={true}
                          isOpen={false}
                          ownFocus={true}
                          panelPaddingSize="m"
                        >
                          <div
                            className="euiPopover euiPopover--anchorDownLeft"
                            data-test-subj="addfilter"
                          >
                            <div
                              className="euiPopover__anchor"
                            >
                              <EuiButtonEmpty
                                flush="left"
                                onClick={[Function]}
                                size="xs"
                              >
                                <button
                                  className="euiButtonEmpty euiButtonEmpty--primary euiButtonEmpty--xSmall euiButtonEmpty--flushLeft"
                                  disabled={false}
                                  onClick={[Function]}
                                  type="button"
                                >
                                  <EuiButtonContent
                                    className="euiButtonEmpty__content"
                                    iconGap="m"
                                    iconSide="left"
                                    iconSize="s"
                                    textProps={
                                      Object {
                                        "className": "euiButtonEmpty__text",
                                      }
                                    }
                                  >
                                    <span
                                      className="euiButtonContent euiButtonEmpty__content"
                                    >
                                      <span
                                        className="euiButtonEmpty__text"
                                      >
                                        + Add filter
                                      </span>
                                    </span>
                                  </EuiButtonContent>
                                </button>
                              </EuiButtonEmpty>
                            </div>
                          </div>
                        </EuiPopover>
                      </AddFilterButton>
                    </div>
                  </EuiFlexItem>
                </div>
              </EuiFlexGroup>
            </Filters>
            <EuiSpacer
              size="s"
            >
              <div
                className="euiSpacer euiSpacer--s"
              />
            </EuiSpacer>
            <ServicesTable
              addFilter={[Function]}
              addServicesGroupFilter={[Function]}
              dataPrepperIndicesExist={true}
              isServiceTrendEnabled={false}
              items={Array []}
              loading={true}
              mode="data_prepper"
              selectedItems={Array []}
              serviceTrends={Object {}}
              setIsServiceTrendEnabled={[Function]}
              setRedirect={[Function]}
              setSelectedItems={[Function]}
              traceColumnAction={[Function]}
            >
              <EuiPanel>
                <div
                  className="euiPanel euiPanel--paddingMedium euiPanel--borderRadiusMedium euiPanel--plain euiPanel--hasShadow"
                >
                  <EuiFlexGroup
                    justifyContent="spaceBetween"
                  >
                    <div
                      className="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--justifyContentSpaceBetween euiFlexGroup--directionRow euiFlexGroup--responsive"
                    >
                      <EuiFlexItem
                        grow={false}
                      >
                        <div
                          className="euiFlexItem euiFlexItem--flexGrowZero"
                        >
                          <PanelTitle
                            title="Services"
                            totalItems={0}
                          >
                            <EuiText
                              size="m"
                            >
                              <div
                                className="euiText euiText--medium"
                              >
                                <span
                                  className="panel-title"
                                >
                                  Services
                                </span>
                                <span
                                  className="panel-title-count"
                                >
                                   (0)
                                </span>
                              </div>
                            </EuiText>
                          </PanelTitle>
                        </div>
                      </EuiFlexItem>
                      <EuiFlexItem
                        grow={false}
                      >
                        <div
                          className="euiFlexItem euiFlexItem--flexGrowZero"
                        >
                          <EuiFlexGroup>
                            <div
                              className="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--directionRow euiFlexGroup--responsive"
                            >
                              <EuiFlexItem>
                                <div
                                  className="euiFlexItem"
                                >
                                  <EuiToolTip
                                    content="Select services to filter"
                                    delay="regular"
                                    position="top"
                                  >
                                    <span
                                      className="euiToolTipAnchor"
                                      onKeyUp={[Function]}
                                      onMouseOut={[Function]}
                                      onMouseOver={[Function]}
                                    >
                                      <EuiButtonEmpty
                                        isDisabled={true}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onFocus={[Function]}
                                        size="xs"
                                      >
                                        <button
                                          className="euiButtonEmpty euiButtonEmpty--primary euiButtonEmpty--xSmall euiButtonEmpty-isDisabled"
                                          disabled={true}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onFocus={[Function]}
                                          type="button"
                                        >
                                          <EuiButtonContent
                                            className="euiButtonEmpty__content"
                                            iconGap="m"
                                            iconSide="left"
                                            iconSize="s"
                                            textProps={
                                              Object {
                                                "className": "euiButtonEmpty__text",
                                              }
                                            }
                                          >
                                            <span
                                              className="euiButtonContent euiButtonEmpty__content"
                                            >
                                              <span
                                                className="euiButtonEmpty__text"
                                              >
                                                Filter services
                                              </span>
                                            </span>
                                          </EuiButtonContent>
                                        </button>
                                      </EuiButtonEmpty>
                                    </span>
                                  </EuiToolTip>
                                </div>
                              </EuiFlexItem>
                              <EuiFlexItem>
                                <div
                                  className="euiFlexItem"
                                >
                                  <EuiButtonEmpty
                                    onClick={[Function]}
                                    size="xs"
                                  >
                                    <button
                                      className="euiButtonEmpty euiButtonEmpty--primary euiButtonEmpty--xSmall"
                                      disabled={false}
                                      onClick={[Function]}
                                      type="button"
                                    >
                                      <EuiButtonContent
                                        className="euiButtonEmpty__content"
                                        iconGap="m"
                                        iconSide="left"
                                        iconSize="s"
                                        textProps={
                                          Object {
                                            "className": "euiButtonEmpty__text",
                                          }
                                        }
                                      >
                                        <span
                                          className="euiButtonContent euiButtonEmpty__content"
                                        >
                                          <span
                                            className="euiButtonEmpty__text"
                                          >
                                            Show 24 hour trends
                                          </span>
                                        </span>
                                      </EuiButtonContent>
                                    </button>
                                  </EuiButtonEmpty>
                                </div>
                              </EuiFlexItem>
                            </div>
                          </EuiFlexGroup>
                        </div>
                      </EuiFlexItem>
                    </div>
                  </EuiFlexGroup>
                  <EuiSpacer
                    size="m"
                  >
                    <div
                      className="euiSpacer euiSpacer--m"
                    />
                  </EuiSpacer>
                  <EuiHorizontalRule
                    margin="none"
                  >
                    <hr
                      className="euiHorizontalRule euiHorizontalRule--full"
                    />
                  </EuiHorizontalRule>
                  <NoMatchMessage
                    size="xl"
                  >
                    <EuiSpacer
                      size="xl"
                    >
                      <div
                        className="euiSpacer euiSpacer--xl"
                      />
                    </EuiSpacer>
                    <EuiEmptyPrompt
                      body={
                        <EuiText
                          size="s"
                        >
                          No data matches the selected filter. Clear the filter and/or increase the time range to see more results.
                        </EuiText>
                      }
                      title={
                        <h2>
                          No matches
                        </h2>
                      }
                    >
                      <div
                        className="euiEmptyPrompt"
                      >
                        <EuiTitle
                          size="m"
                        >
                          <h2
                            className="euiTitle euiTitle--medium"
                          >
                            No matches
                          </h2>
                        </EuiTitle>
                        <EuiTextColor
                          color="subdued"
                        >
                          <span
                            className="euiTextColor euiTextColor--subdued"
                          >
                            <EuiSpacer
                              size="m"
                            >
                              <div
                                className="euiSpacer euiSpacer--m"
                              />
                            </EuiSpacer>
                            <EuiText>
                              <div
                                className="euiText euiText--medium"
                              >
                                <EuiText
                                  size="s"
                                >
                                  <div
                                    className="euiText euiText--small"
                                  >
                                    No data matches the selected filter. Clear the filter and/or increase the time range to see more results.
                                  </div>
                                </EuiText>
                              </div>
                            </EuiText>
                          </span>
                        </EuiTextColor>
                      </div>
                    </EuiEmptyPrompt>
                    <EuiSpacer
                      size="xl"
                    >
                      <div
                        className="euiSpacer euiSpacer--xl"
                      />
                    </EuiSpacer>
                  </NoMatchMessage>
                </div>
              </EuiPanel>
            </ServicesTable>
            <EuiSpacer
              size="s"
            >
              <div
                className="euiSpacer euiSpacer--s"
              />
            </EuiSpacer>
            <ServiceMap
              addFilter={[Function]}
              currService=""
              idSelected="latency"
              page="services"
              serviceMap={Object {}}
              setIdSelected={[Function]}
            >
              <EuiPanel>
                <div
                  className="euiPanel euiPanel--paddingMedium euiPanel--borderRadiusMedium euiPanel--plain euiPanel--hasShadow"
                >
                  <PanelTitle
                    title="Service map"
                  >
                    <EuiText
                      size="m"
                    >
                      <div
                        className="euiText euiText--medium"
                      >
                        <span
                          className="panel-title"
                        >
                          Service map
                        </span>
                      </div>
                    </EuiText>
                  </PanelTitle>
                  <EuiSpacer
                    size="m"
                  >
                    <div
                      className="euiSpacer euiSpacer--m"
                    />
                  </EuiSpacer>
                  <EuiButtonGroup
                    buttonSize="s"
                    color="text"
                    idSelected="latency"
                    onChange={[Function]}
                    options={
                      Array [
                        Object {
                          "id": "latency",
                          "label": "Duration",
                        },
                        Object {
                          "id": "error_rate",
                          "label": "Errors",
                        },
                        Object {
                          "id": "throughput",
                          "label": "Request Rate",
                        },
                      ]
                    }
                  >
                    <fieldset
                      className="euiButtonGroup euiButtonGroup--small euiButtonGroup--text"
                      disabled={false}
                    >
                      <EuiScreenReaderOnly>
                        <legend
                          className="euiScreenReaderOnly"
                        />
                      </EuiScreenReaderOnly>
                      <div
                        className="euiButtonGroup__buttons"
                      >
                        <EuiButtonGroupButton
                          color="text"
                          element="label"
                          id="latency"
                          isDisabled={false}
                          isIconOnly={false}
                          isSelected={true}
                          key="0"
                          label="Duration"
                          name="random_html_id"
                          onChange={[Function]}
                          size="s"
                        >
                          <EuiButtonDisplay
                            baseClassName="euiButtonGroupButton"
                            className="euiButtonGroupButton-isSelected"
                            color="text"
                            element="label"
                            fill={true}
                            htmlFor="random_html_id"
                            isDisabled={false}
                            onClick={[Function]}
                            size="s"
                            textProps={
                              Object {
                                "className": "euiButtonGroupButton__textShift",
                                "data-text": "Duration",
                                "ref": [Function],
                                "title": "Duration",
                              }
                            }
                          >
                            <label
                              className="euiButtonGroupButton euiButtonGroupButton--text euiButtonGroupButton--small euiButtonGroupButton--fill euiButtonGroupButton-isSelected"
                              disabled={false}
                              htmlFor="random_html_id"
                              onClick={[Function]}
                              style={
                                Object {
                                  "minWidth": undefined,
                                }
                              }
                            >
                              <EuiButtonContent
                                className="euiButton__content"
                                iconGap="m"
                                iconSide="left"
                                textProps={
                                  Object {
                                    "className": "euiButton__text euiButtonGroupButton__textShift",
                                    "data-text": "Duration",
                                    "ref": [Function],
                                    "title": "Duration",
                                  }
                                }
                              >
                                <span
                                  className="euiButtonContent euiButton__content"
                                >
                                  <span
                                    className="euiButton__text euiButtonGroupButton__textShift"
                                    data-text="Duration"
                                    title="Duration"
                                  >
                                    <input
                                      checked={true}
                                      className="euiScreenReaderOnly"
                                      data-test-subj="latency"
                                      disabled={false}
                                      id="random_html_id"
                                      name="random_html_id"
                                      onChange={[Function]}
                                      type="radio"
                                    />
                                    Duration
                                  </span>
                                </span>
                              </EuiButtonContent>
                            </label>
                          </EuiButtonDisplay>
                        </EuiButtonGroupButton>
                        <EuiButtonGroupButton
                          color="text"
                          element="label"
                          id="error_rate"
                          isDisabled={false}
                          isIconOnly={false}
                          isSelected={false}
                          key="1"
                          label="Errors"
                          name="random_html_id"
                          onChange={[Function]}
                          size="s"
                        >
                          <EuiButtonDisplay
                            baseClassName="euiButtonGroupButton"
                            className=""
                            color="text"
                            element="label"
                            fill={false}
                            htmlFor="random_html_id"
                            isDisabled={false}
                            onClick={[Function]}
                            size="s"
                            textProps={
                              Object {
                                "className": "euiButtonGroupButton__textShift",
                                "data-text": "Errors",
                                "ref": [Function],
                                "title": "Errors",
                              }
                            }
                          >
                            <label
                              className="euiButtonGroupButton euiButtonGroupButton--text euiButtonGroupButton--small"
                              disabled={false}
                              htmlFor="random_html_id"
                              onClick={[Function]}
                              style={
                                Object {
                                  "minWidth": undefined,
                                }
                              }
                            >
                              <EuiButtonContent
                                className="euiButton__content"
                                iconGap="m"
                                iconSide="left"
                                textProps={
                                  Object {
                                    "className": "euiButton__text euiButtonGroupButton__textShift",
                                    "data-text": "Errors",
                                    "ref": [Function],
                                    "title": "Errors",
                                  }
                                }
                              >
                                <span
                                  className="euiButtonContent euiButton__content"
                                >
                                  <span
                                    className="euiButton__text euiButtonGroupButton__textShift"
                                    data-text="Errors"
                                    title="Errors"
                                  >
                                    <input
                                      checked={false}
                                      className="euiScreenReaderOnly"
                                      data-test-subj="error_rate"
                                      disabled={false}
                                      id="random_html_id"
                                      name="random_html_id"
                                      onChange={[Function]}
                                      type="radio"
                                    />
                                    Errors
                                  </span>
                                </span>
                              </EuiButtonContent>
                            </label>
                          </EuiButtonDisplay>
                        </EuiButtonGroupButton>
                        <EuiButtonGroupButton
                          color="text"
                          element="label"
                          id="throughput"
                          isDisabled={false}
                          isIconOnly={false}
                          isSelected={false}
                          key="2"
                          label="Request Rate"
                          name="random_html_id"
                          onChange={[Function]}
                          size="s"
                        >
                          <EuiButtonDisplay
                            baseClassName="euiButtonGroupButton"
                            className=""
                            color="text"
                            element="label"
                            fill={false}
                            htmlFor="random_html_id"
                            isDisabled={false}
                            onClick={[Function]}
                            size="s"
                            textProps={
                              Object {
                                "className": "euiButtonGroupButton__textShift",
                                "data-text": "Request Rate",
                                "ref": [Function],
                                "title": "Request Rate",
                              }
                            }
                          >
                            <label
                              className="euiButtonGroupButton euiButtonGroupButton--text euiButtonGroupButton--small"
                              disabled={false}
                              htmlFor="random_html_id"
                              onClick={[Function]}
                              style={
                                Object {
                                  "minWidth": undefined,
                                }
                              }
                            >
                              <EuiButtonContent
                                className="euiButton__content"
                                iconGap="m"
                                iconSide="left"
                                textProps={
                                  Object {
                                    "className": "euiButton__text euiButtonGroupButton__textShift",
                                    "data-text": "Request Rate",
                                    "ref": [Function],
                                    "title": "Request Rate",
                                  }
                                }
                              >
                                <span
                                  className="euiButtonContent euiButton__content"
                                >
                                  <span
                                    className="euiButton__text euiButtonGroupButton__textShift"
                                    data-text="Request Rate"
                                    title="Request Rate"
                                  >
                                    <input
                                      checked={false}
                                      className="euiScreenReaderOnly"
                                      data-test-subj="throughput"
                                      disabled={false}
                                      id="random_html_id"
                                      name="random_html_id"
                                      onChange={[Function]}
                                      type="radio"
                                    />
                                    Request Rate
                                  </span>
                                </span>
                              </EuiButtonContent>
                            </label>
                          </EuiButtonDisplay>
                        </EuiButtonGroupButton>
                      </div>
                    </fieldset>
                  </EuiButtonGroup>
                  <EuiHorizontalRule
                    margin="m"
                  >
                    <hr
                      className="euiHorizontalRule euiHorizontalRule--full euiHorizontalRule--marginMedium"
                    />
                  </EuiHorizontalRule>
                  <EuiFlexGroup
                    justifyContent="spaceBetween"
                  >
                    <div
                      className="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--justifyContentSpaceBetween euiFlexGroup--directionRow euiFlexGroup--responsive"
                    >
                      <EuiFlexItem
                        grow={7}
                      >
                        <div
                          className="euiFlexItem euiFlexItem--flexGrow7"
                        >
                          <EuiCompressedFieldSearch
                            compressed={true}
                            fullWidth={false}
                            incremental={false}
                            isClearable={true}
                            isInvalid={false}
                            isLoading={false}
                            onChange={[Function]}
                            onSearch={[Function]}
                            placeholder="Service name"
                            prepend="Focus on"
                            value=""
                          >
                            <EuiFormControlLayout
                              compressed={true}
                              fullWidth={false}
                              icon="search"
                              isLoading={false}
                              prepend="Focus on"
                            >
                              <div
                                className="euiFormControlLayout euiFormControlLayout--compressed euiFormControlLayout--group"
                              >
                                <EuiFormLabel
                                  className="euiFormControlLayout__prepend"
                                >
                                  <label
                                    className="euiFormLabel euiFormControlLayout__prepend"
                                  >
                                    Focus on
                                  </label>
                                </EuiFormLabel>
                                <div
                                  className="euiFormControlLayout__childrenWrapper"
                                >
                                  <EuiValidatableControl
                                    isInvalid={false}
                                  >
                                    <input
                                      className="euiFieldSearch euiFieldSearch--compressed euiFieldSearch--inGroup"
                                      onChange={[Function]}
                                      onKeyUp={[Function]}
                                      placeholder="Service name"
                                      type="search"
                                      value=""
                                    />
                                  </EuiValidatableControl>
                                  <EuiFormControlLayoutIcons
                                    compressed={true}
                                    icon="search"
                                    isLoading={false}
                                  >
                                    <div
                                      className="euiFormControlLayoutIcons"
                                    >
                                      <EuiFormControlLayoutCustomIcon
                                        size="s"
                                        type="search"
                                      >
                                        <span
                                          className="euiFormControlLayoutCustomIcon"
                                        >
                                          <EuiIcon
                                            aria-hidden="true"
                                            className="euiFormControlLayoutCustomIcon__icon"
                                            size="s"
                                            type="search"
                                          >
                                            <EuiIconSearch
                                              aria-hidden={true}
                                              className="euiIcon euiIcon--small euiFormControlLayoutCustomIcon__icon"
                                              focusable="false"
                                              role="img"
                                              style={null}
                                            >
                                              <svg
                                                aria-hidden={true}
                                                className="euiIcon euiIcon--small euiFormControlLayoutCustomIcon__icon"
                                                focusable="false"
                                                height={16}
                                                role="img"
                                                style={null}
                                                viewBox="0 0 16 16"
                                                width={16}
                                                xmlns="http://www.w3.org/2000/svg"
                                              >
                                                <path
                                                  d="m11.271 11.978 3.872 3.873a.502.502 0 0 0 .708 0 .502.502 0 0 0 0-.708l-3.565-3.564c2.38-2.747 2.267-6.923-.342-9.532-2.73-2.73-7.17-2.73-9.898 0-2.728 2.729-2.728 7.17 0 9.9a6.955 6.955 0 0 0 4.949 2.05.5.5 0 0 0 0-1 5.96 5.96 0 0 1-4.242-1.757 6.01 6.01 0 0 1 0-8.486c2.337-2.34 6.143-2.34 8.484 0a6.01 6.01 0 0 1 0 8.486.5.5 0 0 0 .034.738Z"
                                                />
                                              </svg>
                                            </EuiIconSearch>
                                          </EuiIcon>
                                        </span>
                                      </EuiFormControlLayoutCustomIcon>
                                    </div>
                                  </EuiFormControlLayoutIcons>
                                </div>
                              </div>
                            </EuiFormControlLayout>
                          </EuiCompressedFieldSearch>
                        </div>
                      </EuiFlexItem>
                    </div>
                  </EuiFlexGroup>
                  <EuiSpacer>
                    <div
                      className="euiSpacer euiSpacer--l"
                    />
                  </EuiSpacer>
                  <div
                    style={
                      Object {
                        "minHeight": 434,
                      }
                    }
                  >
                    <NoMatchMessage
                      size="s"
                    >
                      <EuiSpacer
                        size="s"
                      >
                        <div
                          className="euiSpacer euiSpacer--s"
                        />
                      </EuiSpacer>
                      <EuiEmptyPrompt
                        body={
                          <EuiText
                            size="s"
                          >
                            No data matches the selected filter. Clear the filter and/or increase the time range to see more results.
                          </EuiText>
                        }
                        title={
                          <h2>
                            No matches
                          </h2>
                        }
                      >
                        <div
                          className="euiEmptyPrompt"
                        >
                          <EuiTitle
                            size="m"
                          >
                            <h2
                              className="euiTitle euiTitle--medium"
                            >
                              No matches
                            </h2>
                          </EuiTitle>
                          <EuiTextColor
                            color="subdued"
                          >
                            <span
                              className="euiTextColor euiTextColor--subdued"
                            >
                              <EuiSpacer
                                size="m"
                              >
                                <div
                                  className="euiSpacer euiSpacer--m"
                                />
                              </EuiSpacer>
                              <EuiText>
                                <div
                                  className="euiText euiText--medium"
                                >
                                  <EuiText
                                    size="s"
                                  >
                                    <div
                                      className="euiText euiText--small"
                                    >
                                      No data matches the selected filter. Clear the filter and/or increase the time range to see more results.
                                    </div>
                                  </EuiText>
                                </div>
                              </EuiText>
                            </span>
                          </EuiTextColor>
                        </div>
                      </EuiEmptyPrompt>
                      <EuiSpacer
                        size="s"
                      >
                        <div
                          className="euiSpacer euiSpacer--s"
                        />
                      </EuiSpacer>
                    </NoMatchMessage>
                  </div>
                </div>
              </EuiPanel>
              <EuiSpacer
                size="m"
              >
                <div
                  className="euiSpacer euiSpacer--m"
                />
              </EuiSpacer>
            </ServiceMap>
          </div>
        </EuiPageBody>
      </div>
    </EuiPage>
  </ServicesContent>
</Services>
`;
