// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Services component renders empty services page 1`] = `
<Services
  appConfigs={Array []}
  childBreadcrumbs={
    Array [
      Object {
        "href": "#/trace_analytics/home",
        "text": "Trace analytics",
      },
      Object {
        "href": "#/trace_analytics/services",
        "text": "Services",
      },
    ]
  }
  chrome={
    Object {
      "addApplicationClass": [MockFunction],
      "docTitle": Object {
        "change": [MockFunction],
        "reset": [MockFunction],
      },
      "getApplicationClasses$": [MockFunction],
      "getBadge$": [MockFunction],
      "getBreadcrumbs$": [MockFunction],
      "getCustomNavLink$": [MockFunction],
      "getHeaderComponent": [MockFunction],
      "getHelpExtension$": [MockFunction],
      "getIsNavDrawerLocked$": [MockFunction],
      "getIsVisible$": [MockFunction],
      "logos": Object {
        "AnimatedMark": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_spinner_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_spinner_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_spinner_on_light.svg",
        },
        "Application": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_dashboards_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_dashboards_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_dashboards_on_light.svg",
        },
        "CenterMark": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_center_mark_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_center_mark_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_center_mark_on_light.svg",
        },
        "Mark": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_mark_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_mark_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_mark_on_light.svg",
        },
        "OpenSearch": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_on_light.svg",
        },
        "colorScheme": "light",
      },
      "navControls": Object {
        "getCenter$": [MockFunction],
        "getLeft$": [MockFunction],
        "getRight$": [MockFunction],
        "registerCenter": [MockFunction],
        "registerLeft": [MockFunction],
        "registerRight": [MockFunction],
      },
      "navLinks": Object {
        "enableForcedAppSwitcherNavigation": [MockFunction],
        "get": [MockFunction],
        "getAll": [MockFunction],
        "getForceAppSwitcherNavigation$": [MockFunction],
        "getNavLinks$": [MockFunction],
        "has": [MockFunction],
        "showOnly": [MockFunction],
        "update": [MockFunction],
      },
      "recentlyAccessed": Object {
        "add": [MockFunction],
        "get": [MockFunction],
        "get$": [MockFunction],
      },
      "removeApplicationClass": [MockFunction],
      "setAppTitle": [MockFunction],
      "setBadge": [MockFunction],
      "setBreadcrumbs": [MockFunction] {
        "calls": Array [
          Array [
            Array [
              Object {
                "href": "test#/",
                "text": "test",
              },
              Object {
                "href": "#/trace_analytics/home",
                "text": "Trace analytics",
              },
              Object {
                "href": "#/trace_analytics/services",
                "text": "Services",
              },
            ],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
      "setCustomNavLink": [MockFunction],
      "setHelpExtension": [MockFunction],
      "setHelpSupportUrl": [MockFunction],
      "setIsVisible": [MockFunction],
    }
  }
  dataPrepperIndicesExist={true}
  dataSourceMDSId={
    Array [
      Object {
        "id": "",
        "label": "",
      },
    ]
  }
  endTime="now"
  filters={Array []}
  http={[MockFunction]}
  mode="data_prepper"
  modes={
    Array [
      Object {
        "id": "jaeger",
        "title": "Jaeger",
      },
      Object {
        "id": "data_prepper",
        "title": "Data Prepper",
      },
    ]
  }
  nameColumnAction={[Function]}
  page="services"
  parentBreadcrumb={
    Object {
      "href": "test#/",
      "text": "test",
    }
  }
  query=""
  setEndTime={[MockFunction]}
  setFilters={
    [MockFunction] {
      "calls": Array [
        Array [
          Array [],
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  setQuery={[MockFunction]}
  setStartTime={[MockFunction]}
  startTime="now-5m"
  traceColumnAction={[Function]}
>
  <DataSourcePicker
    modes={
      Array [
        Object {
          "id": "jaeger",
          "title": "Jaeger",
        },
        Object {
          "id": "data_prepper",
          "title": "Data Prepper",
        },
      ]
    }
    selectedMode="data_prepper"
  >
    <EuiPopover
      anchorClassName="eui-textTruncate"
      anchorPosition="downCenter"
      button={
        <EuiButtonEmpty
          className="dscIndexPattern__triggerButton"
          color="text"
          data-test-subj="indexPattern-switch-link"
          flush="left"
          iconSide="right"
          iconType="arrowDown"
          onClick={[Function]}
          title="data_prepper"
        >
          Data Prepper
        </EuiButtonEmpty>
      }
      className="eui-textTruncate"
      closePopover={[Function]}
      display="inlineBlock"
      hasArrow={true}
      isOpen={false}
      ownFocus={true}
      panelPaddingSize="s"
    >
      <div
        className="euiPopover euiPopover--anchorDownCenter eui-textTruncate"
      >
        <div
          className="euiPopover__anchor eui-textTruncate"
        >
          <EuiButtonEmpty
            className="dscIndexPattern__triggerButton"
            color="text"
            data-test-subj="indexPattern-switch-link"
            flush="left"
            iconSide="right"
            iconType="arrowDown"
            onClick={[Function]}
            title="data_prepper"
          >
            <button
              className="euiButtonEmpty euiButtonEmpty--text euiButtonEmpty--flushLeft dscIndexPattern__triggerButton"
              data-test-subj="indexPattern-switch-link"
              disabled={false}
              onClick={[Function]}
              title="data_prepper"
              type="button"
            >
              <EuiButtonContent
                className="euiButtonEmpty__content"
                iconSide="right"
                iconSize="m"
                iconType="arrowDown"
                textProps={
                  Object {
                    "className": "euiButtonEmpty__text",
                  }
                }
              >
                <span
                  className="euiButtonContent euiButtonContent--iconRight euiButtonEmpty__content"
                >
                  <EuiIcon
                    className="euiButtonContent__icon"
                    color="inherit"
                    size="m"
                    type="arrowDown"
                  >
                    <EuiIconBeaker
                      aria-hidden={true}
                      className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonContent__icon"
                      focusable="false"
                      role="img"
                      style={null}
                    >
                      <svg
                        aria-hidden={true}
                        className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonContent__icon"
                        focusable="false"
                        height={16}
                        role="img"
                        style={null}
                        viewBox="0 0 16 16"
                        width={16}
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M5.277 10.088c.02.014.04.03.057.047.582.55 1.134.812 1.666.812.586 0 1.84-.293 3.713-.88L9 6.212V2H7v4.212l-1.723 3.876Zm-.438.987L3.539 14h8.922l-1.32-2.969C9.096 11.677 7.733 12 7 12c-.74 0-1.463-.315-2.161-.925ZM6 2H5V1h6v1h-1v4l3.375 7.594A1 1 0 0 1 12.461 15H3.54a1 1 0 0 1-.914-1.406L6 6V2Z"
                        />
                      </svg>
                    </EuiIconBeaker>
                  </EuiIcon>
                  <span
                    className="euiButtonEmpty__text"
                  >
                    Data Prepper
                  </span>
                </span>
              </EuiButtonContent>
            </button>
          </EuiButtonEmpty>
        </div>
      </div>
    </EuiPopover>
  </DataSourcePicker>
  <ServicesContent
    appConfigs={Array []}
    childBreadcrumbs={
      Array [
        Object {
          "href": "#/trace_analytics/home",
          "text": "Trace analytics",
        },
        Object {
          "href": "#/trace_analytics/services",
          "text": "Services",
        },
      ]
    }
    chrome={
      Object {
        "addApplicationClass": [MockFunction],
        "docTitle": Object {
          "change": [MockFunction],
          "reset": [MockFunction],
        },
        "getApplicationClasses$": [MockFunction],
        "getBadge$": [MockFunction],
        "getBreadcrumbs$": [MockFunction],
        "getCustomNavLink$": [MockFunction],
        "getHeaderComponent": [MockFunction],
        "getHelpExtension$": [MockFunction],
        "getIsNavDrawerLocked$": [MockFunction],
        "getIsVisible$": [MockFunction],
        "logos": Object {
          "AnimatedMark": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_spinner_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_spinner_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_spinner_on_light.svg",
          },
          "Application": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_dashboards_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_dashboards_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_dashboards_on_light.svg",
          },
          "CenterMark": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_center_mark_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_center_mark_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_center_mark_on_light.svg",
          },
          "Mark": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_mark_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_mark_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_mark_on_light.svg",
          },
          "OpenSearch": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_on_light.svg",
          },
          "colorScheme": "light",
        },
        "navControls": Object {
          "getCenter$": [MockFunction],
          "getLeft$": [MockFunction],
          "getRight$": [MockFunction],
          "registerCenter": [MockFunction],
          "registerLeft": [MockFunction],
          "registerRight": [MockFunction],
        },
        "navLinks": Object {
          "enableForcedAppSwitcherNavigation": [MockFunction],
          "get": [MockFunction],
          "getAll": [MockFunction],
          "getForceAppSwitcherNavigation$": [MockFunction],
          "getNavLinks$": [MockFunction],
          "has": [MockFunction],
          "showOnly": [MockFunction],
          "update": [MockFunction],
        },
        "recentlyAccessed": Object {
          "add": [MockFunction],
          "get": [MockFunction],
          "get$": [MockFunction],
        },
        "removeApplicationClass": [MockFunction],
        "setAppTitle": [MockFunction],
        "setBadge": [MockFunction],
        "setBreadcrumbs": [MockFunction] {
          "calls": Array [
            Array [
              Array [
                Object {
                  "href": "test#/",
                  "text": "test",
                },
                Object {
                  "href": "#/trace_analytics/home",
                  "text": "Trace analytics",
                },
                Object {
                  "href": "#/trace_analytics/services",
                  "text": "Services",
                },
              ],
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        },
        "setCustomNavLink": [MockFunction],
        "setHelpExtension": [MockFunction],
        "setHelpSupportUrl": [MockFunction],
        "setIsVisible": [MockFunction],
      }
    }
    dataPrepperIndicesExist={true}
    dataSourceMDSId={
      Array [
        Object {
          "id": "",
          "label": "",
        },
      ]
    }
    endTime="now"
    filters={Array []}
    http={[MockFunction]}
    mode="data_prepper"
    modes={
      Array [
        Object {
          "id": "jaeger",
          "title": "Jaeger",
        },
        Object {
          "id": "data_prepper",
          "title": "Data Prepper",
        },
      ]
    }
    nameColumnAction={[Function]}
    page="services"
    parentBreadcrumb={
      Object {
        "href": "test#/",
        "text": "test",
      }
    }
    query=""
    setEndTime={[MockFunction]}
    setFilters={
      [MockFunction] {
        "calls": Array [
          Array [
            Array [],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    setQuery={[MockFunction]}
    setStartTime={[MockFunction]}
    startTime="now-5m"
    traceColumnAction={[Function]}
  >
    <SearchBar
      appConfigs={Array []}
      endTime="now"
      filters={Array []}
      mode="data_prepper"
      page="services"
      query=""
      refresh={[Function]}
      setEndTime={[MockFunction]}
      setFilters={
        [MockFunction] {
          "calls": Array [
            Array [
              Array [],
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        }
      }
      setQuery={[MockFunction]}
      setStartTime={[MockFunction]}
      startTime="now-5m"
    >
      <EuiFlexGroup
        gutterSize="s"
      >
        <div
          className="euiFlexGroup euiFlexGroup--gutterSmall euiFlexGroup--directionRow euiFlexGroup--responsive"
        >
          <EuiFlexItem>
            <div
              className="euiFlexItem"
            >
              <EuiFieldSearch
                compressed={false}
                data-test-subj="search-bar-input-box"
                fullWidth={true}
                incremental={false}
                isClearable={false}
                isLoading={false}
                onChange={[Function]}
                onSearch={[Function]}
                placeholder="Trace ID, trace group name, service name"
                value=""
              >
                <EuiFormControlLayout
                  compressed={false}
                  fullWidth={true}
                  icon="search"
                  isLoading={false}
                >
                  <div
                    className="euiFormControlLayout euiFormControlLayout--fullWidth"
                  >
                    <div
                      className="euiFormControlLayout__childrenWrapper"
                    >
                      <EuiValidatableControl>
                        <input
                          className="euiFieldSearch euiFieldSearch--fullWidth"
                          data-test-subj="search-bar-input-box"
                          onChange={[Function]}
                          onKeyUp={[Function]}
                          placeholder="Trace ID, trace group name, service name"
                          type="search"
                          value=""
                        />
                      </EuiValidatableControl>
                      <EuiFormControlLayoutIcons
                        compressed={false}
                        icon="search"
                        isLoading={false}
                      >
                        <div
                          className="euiFormControlLayoutIcons"
                        >
                          <EuiFormControlLayoutCustomIcon
                            size="m"
                            type="search"
                          >
                            <span
                              className="euiFormControlLayoutCustomIcon"
                            >
                              <EuiIcon
                                aria-hidden="true"
                                className="euiFormControlLayoutCustomIcon__icon"
                                size="m"
                                type="search"
                              >
                                <EuiIconBeaker
                                  aria-hidden={true}
                                  className="euiIcon euiIcon--medium euiIcon-isLoading euiFormControlLayoutCustomIcon__icon"
                                  focusable="false"
                                  role="img"
                                  style={null}
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="euiIcon euiIcon--medium euiIcon-isLoading euiFormControlLayoutCustomIcon__icon"
                                    focusable="false"
                                    height={16}
                                    role="img"
                                    style={null}
                                    viewBox="0 0 16 16"
                                    width={16}
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M5.277 10.088c.02.014.04.03.057.047.582.55 1.134.812 1.666.812.586 0 1.84-.293 3.713-.88L9 6.212V2H7v4.212l-1.723 3.876Zm-.438.987L3.539 14h8.922l-1.32-2.969C9.096 11.677 7.733 12 7 12c-.74 0-1.463-.315-2.161-.925ZM6 2H5V1h6v1h-1v4l3.375 7.594A1 1 0 0 1 12.461 15H3.54a1 1 0 0 1-.914-1.406L6 6V2Z"
                                    />
                                  </svg>
                                </EuiIconBeaker>
                              </EuiIcon>
                            </span>
                          </EuiFormControlLayoutCustomIcon>
                        </div>
                      </EuiFormControlLayoutIcons>
                    </div>
                  </div>
                </EuiFormControlLayout>
              </EuiFieldSearch>
            </div>
          </EuiFlexItem>
          <EuiFlexItem
            grow={false}
            style={
              Object {
                "maxWidth": "40vw",
              }
            }
          >
            <div
              className="euiFlexItem euiFlexItem--flexGrowZero"
              style={
                Object {
                  "maxWidth": "40vw",
                }
              }
            >
              <EuiSuperDatePicker
                commonlyUsedRanges={
                  Array [
                    Object {
                      "end": "now/d",
                      "label": "Today",
                      "start": "now/d",
                    },
                    Object {
                      "end": "now/w",
                      "label": "This week",
                      "start": "now/w",
                    },
                    Object {
                      "end": "now/M",
                      "label": "This month",
                      "start": "now/M",
                    },
                    Object {
                      "end": "now/y",
                      "label": "This year",
                      "start": "now/y",
                    },
                    Object {
                      "end": "now-1d/d",
                      "label": "Yesterday",
                      "start": "now-1d/d",
                    },
                    Object {
                      "end": "now",
                      "label": "Week to date",
                      "start": "now/w",
                    },
                    Object {
                      "end": "now",
                      "label": "Month to date",
                      "start": "now/M",
                    },
                    Object {
                      "end": "now",
                      "label": "Year to date",
                      "start": "now/y",
                    },
                  ]
                }
                dateFormat=""
                end="now"
                isAutoRefreshOnly={false}
                isDisabled={false}
                isPaused={true}
                onTimeChange={[Function]}
                recentlyUsedRanges={Array []}
                refreshInterval={0}
                showUpdateButton={false}
                start="now-5m"
                timeFormat="HH:mm"
              >
                <EuiFlexGroup
                  className="euiSuperDatePicker__flexWrapper euiSuperDatePicker__flexWrapper--noUpdateButton"
                  gutterSize="s"
                  responsive={false}
                >
                  <div
                    className="euiFlexGroup euiFlexGroup--gutterSmall euiFlexGroup--directionRow euiSuperDatePicker__flexWrapper euiSuperDatePicker__flexWrapper--noUpdateButton"
                  >
                    <EuiFlexItem>
                      <div
                        className="euiFlexItem"
                      >
                        <EuiFormControlLayout
                          className="euiSuperDatePicker"
                          isDisabled={false}
                          prepend={
                            <EuiQuickSelectPopover
                              applyTime={[Function]}
                              commonlyUsedRanges={
                                Array [
                                  Object {
                                    "end": "now/d",
                                    "label": "Today",
                                    "start": "now/d",
                                  },
                                  Object {
                                    "end": "now/w",
                                    "label": "This week",
                                    "start": "now/w",
                                  },
                                  Object {
                                    "end": "now/M",
                                    "label": "This month",
                                    "start": "now/M",
                                  },
                                  Object {
                                    "end": "now/y",
                                    "label": "This year",
                                    "start": "now/y",
                                  },
                                  Object {
                                    "end": "now-1d/d",
                                    "label": "Yesterday",
                                    "start": "now-1d/d",
                                  },
                                  Object {
                                    "end": "now",
                                    "label": "Week to date",
                                    "start": "now/w",
                                  },
                                  Object {
                                    "end": "now",
                                    "label": "Month to date",
                                    "start": "now/M",
                                  },
                                  Object {
                                    "end": "now",
                                    "label": "Year to date",
                                    "start": "now/y",
                                  },
                                ]
                              }
                              dateFormat=""
                              end="now"
                              isAutoRefreshOnly={false}
                              isDisabled={false}
                              isPaused={true}
                              recentlyUsedRanges={Array []}
                              refreshInterval={0}
                              start="now-5m"
                            />
                          }
                        >
                          <div
                            className="euiFormControlLayout euiFormControlLayout--group euiSuperDatePicker"
                          >
                            <EuiQuickSelectPopover
                              applyTime={[Function]}
                              className="euiFormControlLayout__prepend"
                              commonlyUsedRanges={
                                Array [
                                  Object {
                                    "end": "now/d",
                                    "label": "Today",
                                    "start": "now/d",
                                  },
                                  Object {
                                    "end": "now/w",
                                    "label": "This week",
                                    "start": "now/w",
                                  },
                                  Object {
                                    "end": "now/M",
                                    "label": "This month",
                                    "start": "now/M",
                                  },
                                  Object {
                                    "end": "now/y",
                                    "label": "This year",
                                    "start": "now/y",
                                  },
                                  Object {
                                    "end": "now-1d/d",
                                    "label": "Yesterday",
                                    "start": "now-1d/d",
                                  },
                                  Object {
                                    "end": "now",
                                    "label": "Week to date",
                                    "start": "now/w",
                                  },
                                  Object {
                                    "end": "now",
                                    "label": "Month to date",
                                    "start": "now/M",
                                  },
                                  Object {
                                    "end": "now",
                                    "label": "Year to date",
                                    "start": "now/y",
                                  },
                                ]
                              }
                              dateFormat=""
                              end="now"
                              isAutoRefreshOnly={false}
                              isDisabled={false}
                              isPaused={true}
                              key="0/.0"
                              recentlyUsedRanges={Array []}
                              refreshInterval={0}
                              start="now-5m"
                            >
                              <EuiPopover
                                anchorClassName="euiQuickSelectPopover__anchor"
                                anchorPosition="downLeft"
                                button={
                                  <EuiButtonEmpty
                                    aria-label="Date quick select"
                                    className="euiFormControlLayout__prepend"
                                    data-test-subj="superDatePickerToggleQuickMenuButton"
                                    iconSide="right"
                                    iconType="arrowDown"
                                    isDisabled={false}
                                    onClick={[Function]}
                                    size="xs"
                                    textProps={
                                      Object {
                                        "className": "euiQuickSelectPopover__buttonText",
                                      }
                                    }
                                  >
                                    <EuiIcon
                                      type="calendar"
                                    />
                                  </EuiButtonEmpty>
                                }
                                closePopover={[Function]}
                                display="inlineBlock"
                                hasArrow={true}
                                isOpen={false}
                                ownFocus={true}
                                panelPaddingSize="m"
                              >
                                <div
                                  className="euiPopover euiPopover--anchorDownLeft"
                                >
                                  <div
                                    className="euiPopover__anchor euiQuickSelectPopover__anchor"
                                  >
                                    <EuiButtonEmpty
                                      aria-label="Date quick select"
                                      className="euiFormControlLayout__prepend"
                                      data-test-subj="superDatePickerToggleQuickMenuButton"
                                      iconSide="right"
                                      iconType="arrowDown"
                                      isDisabled={false}
                                      onClick={[Function]}
                                      size="xs"
                                      textProps={
                                        Object {
                                          "className": "euiQuickSelectPopover__buttonText",
                                        }
                                      }
                                    >
                                      <button
                                        aria-label="Date quick select"
                                        className="euiButtonEmpty euiButtonEmpty--primary euiButtonEmpty--xSmall euiFormControlLayout__prepend"
                                        data-test-subj="superDatePickerToggleQuickMenuButton"
                                        disabled={false}
                                        onClick={[Function]}
                                        type="button"
                                      >
                                        <EuiButtonContent
                                          className="euiButtonEmpty__content"
                                          iconSide="right"
                                          iconSize="s"
                                          iconType="arrowDown"
                                          textProps={
                                            Object {
                                              "className": "euiButtonEmpty__text euiQuickSelectPopover__buttonText",
                                            }
                                          }
                                        >
                                          <span
                                            className="euiButtonContent euiButtonContent--iconRight euiButtonEmpty__content"
                                          >
                                            <EuiIcon
                                              className="euiButtonContent__icon"
                                              color="inherit"
                                              size="s"
                                              type="arrowDown"
                                            >
                                              <EuiIconBeaker
                                                aria-hidden={true}
                                                className="euiIcon euiIcon--small euiIcon--inherit euiIcon-isLoading euiButtonContent__icon"
                                                focusable="false"
                                                role="img"
                                                style={null}
                                              >
                                                <svg
                                                  aria-hidden={true}
                                                  className="euiIcon euiIcon--small euiIcon--inherit euiIcon-isLoading euiButtonContent__icon"
                                                  focusable="false"
                                                  height={16}
                                                  role="img"
                                                  style={null}
                                                  viewBox="0 0 16 16"
                                                  width={16}
                                                  xmlns="http://www.w3.org/2000/svg"
                                                >
                                                  <path
                                                    d="M5.277 10.088c.02.014.04.03.057.047.582.55 1.134.812 1.666.812.586 0 1.84-.293 3.713-.88L9 6.212V2H7v4.212l-1.723 3.876Zm-.438.987L3.539 14h8.922l-1.32-2.969C9.096 11.677 7.733 12 7 12c-.74 0-1.463-.315-2.161-.925ZM6 2H5V1h6v1h-1v4l3.375 7.594A1 1 0 0 1 12.461 15H3.54a1 1 0 0 1-.914-1.406L6 6V2Z"
                                                  />
                                                </svg>
                                              </EuiIconBeaker>
                                            </EuiIcon>
                                            <span
                                              className="euiButtonEmpty__text euiQuickSelectPopover__buttonText"
                                            >
                                              <EuiIcon
                                                type="calendar"
                                              >
                                                <EuiIconBeaker
                                                  aria-hidden={true}
                                                  className="euiIcon euiIcon--medium euiIcon-isLoading"
                                                  focusable="false"
                                                  role="img"
                                                  style={null}
                                                >
                                                  <svg
                                                    aria-hidden={true}
                                                    className="euiIcon euiIcon--medium euiIcon-isLoading"
                                                    focusable="false"
                                                    height={16}
                                                    role="img"
                                                    style={null}
                                                    viewBox="0 0 16 16"
                                                    width={16}
                                                    xmlns="http://www.w3.org/2000/svg"
                                                  >
                                                    <path
                                                      d="M5.277 10.088c.02.014.04.03.057.047.582.55 1.134.812 1.666.812.586 0 1.84-.293 3.713-.88L9 6.212V2H7v4.212l-1.723 3.876Zm-.438.987L3.539 14h8.922l-1.32-2.969C9.096 11.677 7.733 12 7 12c-.74 0-1.463-.315-2.161-.925ZM6 2H5V1h6v1h-1v4l3.375 7.594A1 1 0 0 1 12.461 15H3.54a1 1 0 0 1-.914-1.406L6 6V2Z"
                                                    />
                                                  </svg>
                                                </EuiIconBeaker>
                                              </EuiIcon>
                                            </span>
                                          </span>
                                        </EuiButtonContent>
                                      </button>
                                    </EuiButtonEmpty>
                                  </div>
                                </div>
                              </EuiPopover>
                            </EuiQuickSelectPopover>
                            <div
                              className="euiFormControlLayout__childrenWrapper"
                            >
                              <EuiDatePickerRange
                                className="euiDatePickerRange--inGroup"
                                endDateControl={<div />}
                                iconType={false}
                                isCustom={true}
                                startDateControl={<div />}
                              >
                                <div
                                  className="euiDatePickerRange euiDatePickerRange--inGroup"
                                >
                                  <button
                                    className="euiSuperDatePicker__prettyFormat"
                                    data-test-subj="superDatePickerShowDatesButton"
                                    disabled={false}
                                    onClick={[Function]}
                                  >
                                    Last 5 minutes
                                    <span
                                      className="euiSuperDatePicker__prettyFormatLink"
                                    >
                                      <EuiI18n
                                        default="Show dates"
                                        token="euiSuperDatePicker.showDatesButtonLabel"
                                      >
                                        Show dates
                                      </EuiI18n>
                                    </span>
                                  </button>
                                </div>
                              </EuiDatePickerRange>
                              <EuiFormControlLayoutIcons />
                            </div>
                          </div>
                        </EuiFormControlLayout>
                      </div>
                    </EuiFlexItem>
                  </div>
                </EuiFlexGroup>
              </EuiSuperDatePicker>
            </div>
          </EuiFlexItem>
          <EuiFlexItem
            grow={false}
          >
            <div
              className="euiFlexItem euiFlexItem--flexGrowZero"
            >
              <EuiButton
                data-click-metric-element="trace_analytics.refresh_button"
                data-test-subj="superDatePickerApplyTimeButton"
                iconType="refresh"
                onClick={[Function]}
              >
                <EuiButtonDisplay
                  baseClassName="euiButton"
                  data-click-metric-element="trace_analytics.refresh_button"
                  data-test-subj="superDatePickerApplyTimeButton"
                  disabled={false}
                  element="button"
                  iconType="refresh"
                  isDisabled={false}
                  onClick={[Function]}
                  type="button"
                >
                  <button
                    className="euiButton euiButton--primary"
                    data-click-metric-element="trace_analytics.refresh_button"
                    data-test-subj="superDatePickerApplyTimeButton"
                    disabled={false}
                    onClick={[Function]}
                    style={
                      Object {
                        "minWidth": undefined,
                      }
                    }
                    type="button"
                  >
                    <EuiButtonContent
                      className="euiButton__content"
                      iconSide="left"
                      iconType="refresh"
                      textProps={
                        Object {
                          "className": "euiButton__text",
                        }
                      }
                    >
                      <span
                        className="euiButtonContent euiButton__content"
                      >
                        <EuiIcon
                          className="euiButtonContent__icon"
                          color="inherit"
                          size="m"
                          type="refresh"
                        >
                          <EuiIconBeaker
                            aria-hidden={true}
                            className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonContent__icon"
                            focusable="false"
                            role="img"
                            style={null}
                          >
                            <svg
                              aria-hidden={true}
                              className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonContent__icon"
                              focusable="false"
                              height={16}
                              role="img"
                              style={null}
                              viewBox="0 0 16 16"
                              width={16}
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                d="M5.277 10.088c.02.014.04.03.057.047.582.55 1.134.812 1.666.812.586 0 1.84-.293 3.713-.88L9 6.212V2H7v4.212l-1.723 3.876Zm-.438.987L3.539 14h8.922l-1.32-2.969C9.096 11.677 7.733 12 7 12c-.74 0-1.463-.315-2.161-.925ZM6 2H5V1h6v1h-1v4l3.375 7.594A1 1 0 0 1 12.461 15H3.54a1 1 0 0 1-.914-1.406L6 6V2Z"
                              />
                            </svg>
                          </EuiIconBeaker>
                        </EuiIcon>
                        <span
                          className="euiButton__text"
                        >
                          Refresh
                        </span>
                      </span>
                    </EuiButtonContent>
                  </button>
                </EuiButtonDisplay>
              </EuiButton>
            </div>
          </EuiFlexItem>
        </div>
      </EuiFlexGroup>
      <EuiSpacer
        size="s"
      >
        <div
          className="euiSpacer euiSpacer--s"
        />
      </EuiSpacer>
      <Filters
        appConfigs={Array []}
        filters={Array []}
        mode="data_prepper"
        page="services"
        setFilters={
          [MockFunction] {
            "calls": Array [
              Array [
                Array [],
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": undefined,
              },
            ],
          }
        }
      >
        <EuiFlexGroup
          alignItems="center"
          gutterSize="xs"
          responsive={false}
          style={
            Object {
              "minHeight": 32,
            }
          }
        >
          <div
            className="euiFlexGroup euiFlexGroup--gutterExtraSmall euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow"
            style={
              Object {
                "minHeight": 32,
              }
            }
          >
            <EuiFlexItem
              grow={false}
            >
              <div
                className="euiFlexItem euiFlexItem--flexGrowZero"
              >
                <GlobalFilterButton>
                  <EuiPopover
                    anchorPosition="rightUp"
                    button={
                      <EuiButtonIcon
                        aria-label="Change all filters"
                        iconType="filter"
                        onClick={[Function]}
                        title="Change all filters"
                      />
                    }
                    closePopover={[Function]}
                    data-test-subj="global-filter-button"
                    display="inlineBlock"
                    hasArrow={true}
                    isOpen={false}
                    ownFocus={true}
                    panelPaddingSize="none"
                    withTitle={true}
                  >
                    <div
                      className="euiPopover euiPopover--anchorRightUp"
                      data-test-subj="global-filter-button"
                      withTitle={true}
                    >
                      <div
                        className="euiPopover__anchor"
                      >
                        <EuiButtonIcon
                          aria-label="Change all filters"
                          iconType="filter"
                          onClick={[Function]}
                          title="Change all filters"
                        >
                          <button
                            aria-label="Change all filters"
                            className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--xSmall"
                            disabled={false}
                            onClick={[Function]}
                            title="Change all filters"
                            type="button"
                          >
                            <EuiIcon
                              aria-hidden="true"
                              className="euiButtonIcon__icon"
                              color="inherit"
                              size="m"
                              type="filter"
                            >
                              <EuiIconBeaker
                                aria-hidden={true}
                                className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                                focusable="false"
                                role="img"
                                style={null}
                              >
                                <svg
                                  aria-hidden={true}
                                  className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                                  focusable="false"
                                  height={16}
                                  role="img"
                                  style={null}
                                  viewBox="0 0 16 16"
                                  width={16}
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <path
                                    d="M5.277 10.088c.02.014.04.03.057.047.582.55 1.134.812 1.666.812.586 0 1.84-.293 3.713-.88L9 6.212V2H7v4.212l-1.723 3.876Zm-.438.987L3.539 14h8.922l-1.32-2.969C9.096 11.677 7.733 12 7 12c-.74 0-1.463-.315-2.161-.925ZM6 2H5V1h6v1h-1v4l3.375 7.594A1 1 0 0 1 12.461 15H3.54a1 1 0 0 1-.914-1.406L6 6V2Z"
                                  />
                                </svg>
                              </EuiIconBeaker>
                            </EuiIcon>
                          </button>
                        </EuiButtonIcon>
                      </div>
                    </div>
                  </EuiPopover>
                </GlobalFilterButton>
              </div>
            </EuiFlexItem>
            <EuiFlexItem
              grow={false}
            >
              <div
                className="euiFlexItem euiFlexItem--flexGrowZero"
              >
                <AddFilterButton>
                  <EuiPopover
                    anchorPosition="downLeft"
                    button={
                      <EuiButtonEmpty
                        onClick={[Function]}
                        size="xs"
                      >
                        + Add filter
                      </EuiButtonEmpty>
                    }
                    closePopover={[Function]}
                    data-test-subj="addfilter"
                    display="inlineBlock"
                    hasArrow={true}
                    isOpen={false}
                    ownFocus={true}
                    panelPaddingSize="m"
                    withTitle={true}
                  >
                    <div
                      className="euiPopover euiPopover--anchorDownLeft"
                      data-test-subj="addfilter"
                      withTitle={true}
                    >
                      <div
                        className="euiPopover__anchor"
                      >
                        <EuiButtonEmpty
                          onClick={[Function]}
                          size="xs"
                        >
                          <button
                            className="euiButtonEmpty euiButtonEmpty--primary euiButtonEmpty--xSmall"
                            disabled={false}
                            onClick={[Function]}
                            type="button"
                          >
                            <EuiButtonContent
                              className="euiButtonEmpty__content"
                              iconSide="left"
                              iconSize="s"
                              textProps={
                                Object {
                                  "className": "euiButtonEmpty__text",
                                }
                              }
                            >
                              <span
                                className="euiButtonContent euiButtonEmpty__content"
                              >
                                <span
                                  className="euiButtonEmpty__text"
                                >
                                  + Add filter
                                </span>
                              </span>
                            </EuiButtonContent>
                          </button>
                        </EuiButtonEmpty>
                      </div>
                    </div>
                  </EuiPopover>
                </AddFilterButton>
              </div>
            </EuiFlexItem>
          </div>
        </EuiFlexGroup>
      </Filters>
    </SearchBar>
    <EuiSpacer
      size="m"
    >
      <div
        className="euiSpacer euiSpacer--m"
      />
    </EuiSpacer>
    <ServicesTable
      addFilter={[Function]}
      dataPrepperIndicesExist={true}
      items={Array []}
      loading={true}
      mode="data_prepper"
      nameColumnAction={[Function]}
      setRedirect={[Function]}
      traceColumnAction={[Function]}
    >
      <EuiPanel>
        <div
          className="euiPanel euiPanel--paddingMedium euiPanel--borderRadiusMedium euiPanel--plain euiPanel--hasShadow"
        >
          <EuiFlexGroup
            alignItems="center"
            gutterSize="s"
          >
            <div
              className="euiFlexGroup euiFlexGroup--gutterSmall euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow euiFlexGroup--responsive"
            >
              <EuiFlexItem
                grow={10}
              >
                <div
                  className="euiFlexItem euiFlexItem--flexGrow10"
                >
                  <PanelTitle
                    title="Services"
                    totalItems={0}
                  >
                    <EuiText
                      size="m"
                    >
                      <div
                        className="euiText euiText--medium"
                      >
                        <span
                          className="panel-title"
                        >
                          Services
                        </span>
                        <span
                          className="panel-title-count"
                        >
                           (0)
                        </span>
                      </div>
                    </EuiText>
                  </PanelTitle>
                </div>
              </EuiFlexItem>
            </div>
          </EuiFlexGroup>
          <EuiSpacer
            size="m"
          >
            <div
              className="euiSpacer euiSpacer--m"
            />
          </EuiSpacer>
          <EuiHorizontalRule
            margin="none"
          >
            <hr
              className="euiHorizontalRule euiHorizontalRule--full"
            />
          </EuiHorizontalRule>
          <NoMatchMessage
            size="xl"
          >
            <EuiSpacer
              size="xl"
            >
              <div
                className="euiSpacer euiSpacer--xl"
              />
            </EuiSpacer>
            <EuiEmptyPrompt
              body={
                <EuiText>
                  No data matches the selected filter. Clear the filter and/or increase the time range to see more results.
                </EuiText>
              }
              title={
                <h2>
                  No matches
                </h2>
              }
            >
              <div
                className="euiEmptyPrompt"
              >
                <EuiTitle
                  size="m"
                >
                  <h2
                    className="euiTitle euiTitle--medium"
                  >
                    No matches
                  </h2>
                </EuiTitle>
                <EuiTextColor
                  color="subdued"
                >
                  <span
                    className="euiTextColor euiTextColor--subdued"
                  >
                    <EuiSpacer
                      size="m"
                    >
                      <div
                        className="euiSpacer euiSpacer--m"
                      />
                    </EuiSpacer>
                    <EuiText>
                      <div
                        className="euiText euiText--medium"
                      >
                        <EuiText>
                          <div
                            className="euiText euiText--medium"
                          >
                            No data matches the selected filter. Clear the filter and/or increase the time range to see more results.
                          </div>
                        </EuiText>
                      </div>
                    </EuiText>
                  </span>
                </EuiTextColor>
              </div>
            </EuiEmptyPrompt>
            <EuiSpacer
              size="xl"
            >
              <div
                className="euiSpacer euiSpacer--xl"
              />
            </EuiSpacer>
          </NoMatchMessage>
        </div>
      </EuiPanel>
    </ServicesTable>
    <EuiSpacer
      size="m"
    >
      <div
        className="euiSpacer euiSpacer--m"
      />
    </EuiSpacer>
    <ServiceMap
      addFilter={[Function]}
      currService=""
      idSelected="latency"
      page="services"
      serviceMap={Object {}}
      setIdSelected={[Function]}
    >
      <EuiPanel>
        <div
          className="euiPanel euiPanel--paddingMedium euiPanel--borderRadiusMedium euiPanel--plain euiPanel--hasShadow"
        >
          <PanelTitle
            title="Service map"
          >
            <EuiText
              size="m"
            >
              <div
                className="euiText euiText--medium"
              >
                <span
                  className="panel-title"
                >
                  Service map
                </span>
              </div>
            </EuiText>
          </PanelTitle>
          <EuiSpacer
            size="m"
          >
            <div
              className="euiSpacer euiSpacer--m"
            />
          </EuiSpacer>
          <EuiButtonGroup
            buttonSize="s"
            color="text"
            idSelected="latency"
            onChange={[Function]}
            options={
              Array [
                Object {
                  "id": "latency",
                  "label": "Duration",
                },
                Object {
                  "id": "error_rate",
                  "label": "Errors",
                },
                Object {
                  "id": "throughput",
                  "label": "Request Rate",
                },
              ]
            }
          >
            <fieldset
              className="euiButtonGroup euiButtonGroup--small euiButtonGroup--text"
              disabled={false}
            >
              <EuiScreenReaderOnly>
                <legend
                  className="euiScreenReaderOnly"
                />
              </EuiScreenReaderOnly>
              <div
                className="euiButtonGroup__buttons"
              >
                <EuiButtonGroupButton
                  color="text"
                  element="label"
                  id="latency"
                  isDisabled={false}
                  isIconOnly={false}
                  isSelected={true}
                  key="0"
                  label="Duration"
                  name="random_html_id"
                  onChange={[Function]}
                  size="s"
                >
                  <EuiButtonDisplay
                    baseClassName="euiButtonGroupButton"
                    className="euiButtonGroupButton-isSelected"
                    color="text"
                    element="label"
                    fill={true}
                    htmlFor="random_html_id"
                    isDisabled={false}
                    onClick={[Function]}
                    size="s"
                    textProps={
                      Object {
                        "className": "euiButtonGroupButton__textShift",
                        "data-text": "Duration",
                        "ref": [Function],
                        "title": "Duration",
                      }
                    }
                  >
                    <label
                      className="euiButtonGroupButton euiButtonGroupButton--text euiButtonGroupButton--small euiButtonGroupButton--fill euiButtonGroupButton-isSelected"
                      disabled={false}
                      htmlFor="random_html_id"
                      onClick={[Function]}
                      style={
                        Object {
                          "minWidth": undefined,
                        }
                      }
                    >
                      <EuiButtonContent
                        className="euiButton__content"
                        iconSide="left"
                        textProps={
                          Object {
                            "className": "euiButton__text euiButtonGroupButton__textShift",
                            "data-text": "Duration",
                            "ref": [Function],
                            "title": "Duration",
                          }
                        }
                      >
                        <span
                          className="euiButtonContent euiButton__content"
                        >
                          <span
                            className="euiButton__text euiButtonGroupButton__textShift"
                            data-text="Duration"
                            title="Duration"
                          >
                            <input
                              checked={true}
                              className="euiScreenReaderOnly"
                              data-test-subj="latency"
                              disabled={false}
                              id="random_html_id"
                              name="random_html_id"
                              onChange={[Function]}
                              type="radio"
                            />
                            Duration
                          </span>
                        </span>
                      </EuiButtonContent>
                    </label>
                  </EuiButtonDisplay>
                </EuiButtonGroupButton>
                <EuiButtonGroupButton
                  color="text"
                  element="label"
                  id="error_rate"
                  isDisabled={false}
                  isIconOnly={false}
                  isSelected={false}
                  key="1"
                  label="Errors"
                  name="random_html_id"
                  onChange={[Function]}
                  size="s"
                >
                  <EuiButtonDisplay
                    baseClassName="euiButtonGroupButton"
                    className=""
                    color="text"
                    element="label"
                    fill={false}
                    htmlFor="random_html_id"
                    isDisabled={false}
                    onClick={[Function]}
                    size="s"
                    textProps={
                      Object {
                        "className": "euiButtonGroupButton__textShift",
                        "data-text": "Errors",
                        "ref": [Function],
                        "title": "Errors",
                      }
                    }
                  >
                    <label
                      className="euiButtonGroupButton euiButtonGroupButton--text euiButtonGroupButton--small"
                      disabled={false}
                      htmlFor="random_html_id"
                      onClick={[Function]}
                      style={
                        Object {
                          "minWidth": undefined,
                        }
                      }
                    >
                      <EuiButtonContent
                        className="euiButton__content"
                        iconSide="left"
                        textProps={
                          Object {
                            "className": "euiButton__text euiButtonGroupButton__textShift",
                            "data-text": "Errors",
                            "ref": [Function],
                            "title": "Errors",
                          }
                        }
                      >
                        <span
                          className="euiButtonContent euiButton__content"
                        >
                          <span
                            className="euiButton__text euiButtonGroupButton__textShift"
                            data-text="Errors"
                            title="Errors"
                          >
                            <input
                              checked={false}
                              className="euiScreenReaderOnly"
                              data-test-subj="error_rate"
                              disabled={false}
                              id="random_html_id"
                              name="random_html_id"
                              onChange={[Function]}
                              type="radio"
                            />
                            Errors
                          </span>
                        </span>
                      </EuiButtonContent>
                    </label>
                  </EuiButtonDisplay>
                </EuiButtonGroupButton>
                <EuiButtonGroupButton
                  color="text"
                  element="label"
                  id="throughput"
                  isDisabled={false}
                  isIconOnly={false}
                  isSelected={false}
                  key="2"
                  label="Request Rate"
                  name="random_html_id"
                  onChange={[Function]}
                  size="s"
                >
                  <EuiButtonDisplay
                    baseClassName="euiButtonGroupButton"
                    className=""
                    color="text"
                    element="label"
                    fill={false}
                    htmlFor="random_html_id"
                    isDisabled={false}
                    onClick={[Function]}
                    size="s"
                    textProps={
                      Object {
                        "className": "euiButtonGroupButton__textShift",
                        "data-text": "Request Rate",
                        "ref": [Function],
                        "title": "Request Rate",
                      }
                    }
                  >
                    <label
                      className="euiButtonGroupButton euiButtonGroupButton--text euiButtonGroupButton--small"
                      disabled={false}
                      htmlFor="random_html_id"
                      onClick={[Function]}
                      style={
                        Object {
                          "minWidth": undefined,
                        }
                      }
                    >
                      <EuiButtonContent
                        className="euiButton__content"
                        iconSide="left"
                        textProps={
                          Object {
                            "className": "euiButton__text euiButtonGroupButton__textShift",
                            "data-text": "Request Rate",
                            "ref": [Function],
                            "title": "Request Rate",
                          }
                        }
                      >
                        <span
                          className="euiButtonContent euiButton__content"
                        >
                          <span
                            className="euiButton__text euiButtonGroupButton__textShift"
                            data-text="Request Rate"
                            title="Request Rate"
                          >
                            <input
                              checked={false}
                              className="euiScreenReaderOnly"
                              data-test-subj="throughput"
                              disabled={false}
                              id="random_html_id"
                              name="random_html_id"
                              onChange={[Function]}
                              type="radio"
                            />
                            Request Rate
                          </span>
                        </span>
                      </EuiButtonContent>
                    </label>
                  </EuiButtonDisplay>
                </EuiButtonGroupButton>
              </div>
            </fieldset>
          </EuiButtonGroup>
          <EuiHorizontalRule
            margin="m"
          >
            <hr
              className="euiHorizontalRule euiHorizontalRule--full euiHorizontalRule--marginMedium"
            />
          </EuiHorizontalRule>
          <EuiFlexGroup
            alignItems="center"
            gutterSize="s"
          >
            <div
              className="euiFlexGroup euiFlexGroup--gutterSmall euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow euiFlexGroup--responsive"
            >
              <EuiFlexItem
                grow={false}
              >
                <div
                  className="euiFlexItem euiFlexItem--flexGrowZero"
                >
                  <EuiText>
                    <div
                      className="euiText euiText--medium"
                    >
                      Focus on
                    </div>
                  </EuiText>
                </div>
              </EuiFlexItem>
              <EuiFlexItem>
                <div
                  className="euiFlexItem"
                >
                  <EuiFieldSearch
                    compressed={false}
                    fullWidth={false}
                    incremental={false}
                    isClearable={true}
                    isInvalid={false}
                    isLoading={false}
                    onChange={[Function]}
                    onSearch={[Function]}
                    placeholder="Service name"
                    value=""
                  >
                    <EuiFormControlLayout
                      compressed={false}
                      fullWidth={false}
                      icon="search"
                      isLoading={false}
                    >
                      <div
                        className="euiFormControlLayout"
                      >
                        <div
                          className="euiFormControlLayout__childrenWrapper"
                        >
                          <EuiValidatableControl
                            isInvalid={false}
                          >
                            <input
                              className="euiFieldSearch"
                              onChange={[Function]}
                              onKeyUp={[Function]}
                              placeholder="Service name"
                              type="search"
                              value=""
                            />
                          </EuiValidatableControl>
                          <EuiFormControlLayoutIcons
                            compressed={false}
                            icon="search"
                            isLoading={false}
                          >
                            <div
                              className="euiFormControlLayoutIcons"
                            >
                              <EuiFormControlLayoutCustomIcon
                                size="m"
                                type="search"
                              >
                                <span
                                  className="euiFormControlLayoutCustomIcon"
                                >
                                  <EuiIcon
                                    aria-hidden="true"
                                    className="euiFormControlLayoutCustomIcon__icon"
                                    size="m"
                                    type="search"
                                  >
                                    <EuiIconBeaker
                                      aria-hidden={true}
                                      className="euiIcon euiIcon--medium euiIcon-isLoading euiFormControlLayoutCustomIcon__icon"
                                      focusable="false"
                                      role="img"
                                      style={null}
                                    >
                                      <svg
                                        aria-hidden={true}
                                        className="euiIcon euiIcon--medium euiIcon-isLoading euiFormControlLayoutCustomIcon__icon"
                                        focusable="false"
                                        height={16}
                                        role="img"
                                        style={null}
                                        viewBox="0 0 16 16"
                                        width={16}
                                        xmlns="http://www.w3.org/2000/svg"
                                      >
                                        <path
                                          d="M5.277 10.088c.02.014.04.03.057.047.582.55 1.134.812 1.666.812.586 0 1.84-.293 3.713-.88L9 6.212V2H7v4.212l-1.723 3.876Zm-.438.987L3.539 14h8.922l-1.32-2.969C9.096 11.677 7.733 12 7 12c-.74 0-1.463-.315-2.161-.925ZM6 2H5V1h6v1h-1v4l3.375 7.594A1 1 0 0 1 12.461 15H3.54a1 1 0 0 1-.914-1.406L6 6V2Z"
                                        />
                                      </svg>
                                    </EuiIconBeaker>
                                  </EuiIcon>
                                </span>
                              </EuiFormControlLayoutCustomIcon>
                            </div>
                          </EuiFormControlLayoutIcons>
                        </div>
                      </div>
                    </EuiFormControlLayout>
                  </EuiFieldSearch>
                </div>
              </EuiFlexItem>
            </div>
          </EuiFlexGroup>
          <EuiSpacer>
            <div
              className="euiSpacer euiSpacer--l"
            />
          </EuiSpacer>
          <div
            style={
              Object {
                "minHeight": 434,
              }
            }
          >
            <NoMatchMessage
              size="s"
            >
              <EuiSpacer
                size="s"
              >
                <div
                  className="euiSpacer euiSpacer--s"
                />
              </EuiSpacer>
              <EuiEmptyPrompt
                body={
                  <EuiText>
                    No data matches the selected filter. Clear the filter and/or increase the time range to see more results.
                  </EuiText>
                }
                title={
                  <h2>
                    No matches
                  </h2>
                }
              >
                <div
                  className="euiEmptyPrompt"
                >
                  <EuiTitle
                    size="m"
                  >
                    <h2
                      className="euiTitle euiTitle--medium"
                    >
                      No matches
                    </h2>
                  </EuiTitle>
                  <EuiTextColor
                    color="subdued"
                  >
                    <span
                      className="euiTextColor euiTextColor--subdued"
                    >
                      <EuiSpacer
                        size="m"
                      >
                        <div
                          className="euiSpacer euiSpacer--m"
                        />
                      </EuiSpacer>
                      <EuiText>
                        <div
                          className="euiText euiText--medium"
                        >
                          <EuiText>
                            <div
                              className="euiText euiText--medium"
                            >
                              No data matches the selected filter. Clear the filter and/or increase the time range to see more results.
                            </div>
                          </EuiText>
                        </div>
                      </EuiText>
                    </span>
                  </EuiTextColor>
                </div>
              </EuiEmptyPrompt>
              <EuiSpacer
                size="s"
              >
                <div
                  className="euiSpacer euiSpacer--s"
                />
              </EuiSpacer>
            </NoMatchMessage>
          </div>
        </div>
      </EuiPanel>
    </ServiceMap>
    <EuiSpacer
      size="m"
    >
      <div
        className="euiSpacer euiSpacer--m"
      />
    </EuiSpacer>
    <EuiPanel>
      <div
        className="euiPanel euiPanel--paddingMedium euiPanel--borderRadiusMedium euiPanel--plain euiPanel--hasShadow"
      >
        <EuiAccordion
          arrowDisplay="left"
          buttonContent="Trace Groups"
          data-test-subj="trace-groups-service-operation-accordian"
          forceState="closed"
          id="accordion1"
          initialIsOpen={false}
          isLoading={false}
          isLoadingMessage={false}
          onToggle={[Function]}
          paddingSize="none"
        >
          <div
            className="euiAccordion"
            data-test-subj="trace-groups-service-operation-accordian"
            onToggle={[Function]}
          >
            <div
              className="euiAccordion__triggerWrapper"
            >
              <button
                aria-controls="accordion1"
                aria-expanded={false}
                className="euiAccordion__button"
                id="random_html_id"
                onClick={[Function]}
                type="button"
              >
                <span
                  className="euiAccordion__iconWrapper"
                >
                  <EuiIcon
                    className="euiAccordion__icon"
                    size="m"
                    type="arrowRight"
                  >
                    <EuiIconBeaker
                      aria-hidden={true}
                      className="euiIcon euiIcon--medium euiIcon-isLoading euiAccordion__icon"
                      focusable="false"
                      role="img"
                      style={null}
                    >
                      <svg
                        aria-hidden={true}
                        className="euiIcon euiIcon--medium euiIcon-isLoading euiAccordion__icon"
                        focusable="false"
                        height={16}
                        role="img"
                        style={null}
                        viewBox="0 0 16 16"
                        width={16}
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M5.277 10.088c.02.014.04.03.057.047.582.55 1.134.812 1.666.812.586 0 1.84-.293 3.713-.88L9 6.212V2H7v4.212l-1.723 3.876Zm-.438.987L3.539 14h8.922l-1.32-2.969C9.096 11.677 7.733 12 7 12c-.74 0-1.463-.315-2.161-.925ZM6 2H5V1h6v1h-1v4l3.375 7.594A1 1 0 0 1 12.461 15H3.54a1 1 0 0 1-.914-1.406L6 6V2Z"
                        />
                      </svg>
                    </EuiIconBeaker>
                  </EuiIcon>
                </span>
                <span
                  className="euiIEFlexWrapFix"
                >
                  Trace Groups
                </span>
              </button>
            </div>
            <div
              aria-labelledby="random_html_id"
              className="euiAccordion__childWrapper"
              id="accordion1"
              role="region"
              tabIndex={-1}
            >
              <EuiResizeObserver
                onResize={[Function]}
              >
                <div>
                  <div
                    className=""
                  >
                    <EuiSpacer
                      size="m"
                    >
                      <div
                        className="euiSpacer euiSpacer--m"
                      />
                    </EuiSpacer>
                  </div>
                </div>
              </EuiResizeObserver>
            </div>
          </div>
        </EuiAccordion>
      </div>
    </EuiPanel>
  </ServicesContent>
</Services>
`;

exports[`Services component renders jaeger services page 1`] = `
<Services
  appConfigs={Array []}
  childBreadcrumbs={
    Array [
      Object {
        "href": "#/trace_analytics/home",
        "text": "Trace analytics",
      },
      Object {
        "href": "#/trace_analytics/services",
        "text": "Services",
      },
    ]
  }
  chrome={
    Object {
      "addApplicationClass": [MockFunction],
      "docTitle": Object {
        "change": [MockFunction],
        "reset": [MockFunction],
      },
      "getApplicationClasses$": [MockFunction],
      "getBadge$": [MockFunction],
      "getBreadcrumbs$": [MockFunction],
      "getCustomNavLink$": [MockFunction],
      "getHeaderComponent": [MockFunction],
      "getHelpExtension$": [MockFunction],
      "getIsNavDrawerLocked$": [MockFunction],
      "getIsVisible$": [MockFunction],
      "logos": Object {
        "AnimatedMark": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_spinner_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_spinner_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_spinner_on_light.svg",
        },
        "Application": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_dashboards_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_dashboards_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_dashboards_on_light.svg",
        },
        "CenterMark": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_center_mark_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_center_mark_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_center_mark_on_light.svg",
        },
        "Mark": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_mark_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_mark_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_mark_on_light.svg",
        },
        "OpenSearch": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_on_light.svg",
        },
        "colorScheme": "light",
      },
      "navControls": Object {
        "getCenter$": [MockFunction],
        "getLeft$": [MockFunction],
        "getRight$": [MockFunction],
        "registerCenter": [MockFunction],
        "registerLeft": [MockFunction],
        "registerRight": [MockFunction],
      },
      "navLinks": Object {
        "enableForcedAppSwitcherNavigation": [MockFunction],
        "get": [MockFunction],
        "getAll": [MockFunction],
        "getForceAppSwitcherNavigation$": [MockFunction],
        "getNavLinks$": [MockFunction],
        "has": [MockFunction],
        "showOnly": [MockFunction],
        "update": [MockFunction],
      },
      "recentlyAccessed": Object {
        "add": [MockFunction],
        "get": [MockFunction],
        "get$": [MockFunction],
      },
      "removeApplicationClass": [MockFunction],
      "setAppTitle": [MockFunction],
      "setBadge": [MockFunction],
      "setBreadcrumbs": [MockFunction] {
        "calls": Array [
          Array [
            Array [
              undefined,
              Object {
                "href": "#/trace_analytics/home",
                "text": "Trace analytics",
              },
              Object {
                "href": "#/trace_analytics/services",
                "text": "Services",
              },
            ],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
      "setCustomNavLink": [MockFunction],
      "setHelpExtension": [MockFunction],
      "setHelpSupportUrl": [MockFunction],
      "setIsVisible": [MockFunction],
    }
  }
  dataPrepperIndicesExist={false}
  dataSourceMDSId={
    Array [
      Object {
        "id": "",
        "label": "",
      },
    ]
  }
  endTime="now"
  filters={Array []}
  http={[MockFunction]}
  jaegerIndicesExist={true}
  mode="jaeger"
  modes={
    Array [
      Object {
        "id": "jaeger",
        "title": "Jaeger",
      },
      Object {
        "id": "data_prepper",
        "title": "Data Prepper",
      },
    ]
  }
  nameColumnAction={[Function]}
  page="services"
  parentBreadcrumbs={
    Array [
      Object {
        "href": "test#/",
        "text": "test",
      },
    ]
  }
  query=""
  setEndTime={[MockFunction]}
  setFilters={
    [MockFunction] {
      "calls": Array [
        Array [
          Array [],
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  setQuery={[MockFunction]}
  setStartTime={[MockFunction]}
  startTime="now-5m"
  traceColumnAction={[Function]}
>
  <DataSourcePicker
    modes={
      Array [
        Object {
          "id": "jaeger",
          "title": "Jaeger",
        },
        Object {
          "id": "data_prepper",
          "title": "Data Prepper",
        },
      ]
    }
    selectedMode="jaeger"
  >
    <EuiPopover
      anchorClassName="eui-textTruncate"
      anchorPosition="downCenter"
      button={
        <EuiButtonEmpty
          className="dscIndexPattern__triggerButton"
          color="text"
          data-test-subj="indexPattern-switch-link"
          flush="left"
          iconSide="right"
          iconType="arrowDown"
          onClick={[Function]}
          title="jaeger"
        >
          Jaeger
        </EuiButtonEmpty>
      }
      className="eui-textTruncate"
      closePopover={[Function]}
      display="inlineBlock"
      hasArrow={true}
      isOpen={false}
      ownFocus={true}
      panelPaddingSize="s"
    >
      <div
        className="euiPopover euiPopover--anchorDownCenter eui-textTruncate"
      >
        <div
          className="euiPopover__anchor eui-textTruncate"
        >
          <EuiButtonEmpty
            className="dscIndexPattern__triggerButton"
            color="text"
            data-test-subj="indexPattern-switch-link"
            flush="left"
            iconSide="right"
            iconType="arrowDown"
            onClick={[Function]}
            title="jaeger"
          >
            <button
              className="euiButtonEmpty euiButtonEmpty--text euiButtonEmpty--flushLeft dscIndexPattern__triggerButton"
              data-test-subj="indexPattern-switch-link"
              disabled={false}
              onClick={[Function]}
              title="jaeger"
              type="button"
            >
              <EuiButtonContent
                className="euiButtonEmpty__content"
                iconSide="right"
                iconSize="m"
                iconType="arrowDown"
                textProps={
                  Object {
                    "className": "euiButtonEmpty__text",
                  }
                }
              >
                <span
                  className="euiButtonContent euiButtonContent--iconRight euiButtonEmpty__content"
                >
                  <EuiIcon
                    className="euiButtonContent__icon"
                    color="inherit"
                    size="m"
                    type="arrowDown"
                  >
                    <EuiIconArrowDown
                      aria-hidden={true}
                      className="euiIcon euiIcon--medium euiIcon--inherit euiButtonContent__icon"
                      focusable="false"
                      role="img"
                      style={null}
                    >
                      <svg
                        aria-hidden={true}
                        className="euiIcon euiIcon--medium euiIcon--inherit euiButtonContent__icon"
                        focusable="false"
                        height={16}
                        role="img"
                        style={null}
                        viewBox="0 0 16 16"
                        width={16}
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M13.069 5.157 8.384 9.768a.546.546 0 0 1-.768 0L2.93 5.158a.552.552 0 0 0-.771 0 .53.53 0 0 0 0 .759l4.684 4.61c.641.631 1.672.63 2.312 0l4.684-4.61a.53.53 0 0 0 0-.76.552.552 0 0 0-.771 0Z"
                          fillRule="non-zero"
                        />
                      </svg>
                    </EuiIconArrowDown>
                  </EuiIcon>
                  <span
                    className="euiButtonEmpty__text"
                  >
                    Jaeger
                  </span>
                </span>
              </EuiButtonContent>
            </button>
          </EuiButtonEmpty>
        </div>
      </div>
    </EuiPopover>
  </DataSourcePicker>
  <ServicesContent
    appConfigs={Array []}
    childBreadcrumbs={
      Array [
        Object {
          "href": "#/trace_analytics/home",
          "text": "Trace analytics",
        },
        Object {
          "href": "#/trace_analytics/services",
          "text": "Services",
        },
      ]
    }
    chrome={
      Object {
        "addApplicationClass": [MockFunction],
        "docTitle": Object {
          "change": [MockFunction],
          "reset": [MockFunction],
        },
        "getApplicationClasses$": [MockFunction],
        "getBadge$": [MockFunction],
        "getBreadcrumbs$": [MockFunction],
        "getCustomNavLink$": [MockFunction],
        "getHeaderComponent": [MockFunction],
        "getHelpExtension$": [MockFunction],
        "getIsNavDrawerLocked$": [MockFunction],
        "getIsVisible$": [MockFunction],
        "logos": Object {
          "AnimatedMark": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_spinner_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_spinner_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_spinner_on_light.svg",
          },
          "Application": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_dashboards_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_dashboards_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_dashboards_on_light.svg",
          },
          "CenterMark": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_center_mark_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_center_mark_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_center_mark_on_light.svg",
          },
          "Mark": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_mark_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_mark_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_mark_on_light.svg",
          },
          "OpenSearch": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_on_light.svg",
          },
          "colorScheme": "light",
        },
        "navControls": Object {
          "getCenter$": [MockFunction],
          "getLeft$": [MockFunction],
          "getRight$": [MockFunction],
          "registerCenter": [MockFunction],
          "registerLeft": [MockFunction],
          "registerRight": [MockFunction],
        },
        "navLinks": Object {
          "enableForcedAppSwitcherNavigation": [MockFunction],
          "get": [MockFunction],
          "getAll": [MockFunction],
          "getForceAppSwitcherNavigation$": [MockFunction],
          "getNavLinks$": [MockFunction],
          "has": [MockFunction],
          "showOnly": [MockFunction],
          "update": [MockFunction],
        },
        "recentlyAccessed": Object {
          "add": [MockFunction],
          "get": [MockFunction],
          "get$": [MockFunction],
        },
        "removeApplicationClass": [MockFunction],
        "setAppTitle": [MockFunction],
        "setBadge": [MockFunction],
        "setBreadcrumbs": [MockFunction] {
          "calls": Array [
            Array [
              Array [
                undefined,
                Object {
                  "href": "#/trace_analytics/home",
                  "text": "Trace analytics",
                },
                Object {
                  "href": "#/trace_analytics/services",
                  "text": "Services",
                },
              ],
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        },
        "setCustomNavLink": [MockFunction],
        "setHelpExtension": [MockFunction],
        "setHelpSupportUrl": [MockFunction],
        "setIsVisible": [MockFunction],
      }
    }
    dataPrepperIndicesExist={false}
    dataSourceMDSId={
      Array [
        Object {
          "id": "",
          "label": "",
        },
      ]
    }
    endTime="now"
    filters={Array []}
    http={[MockFunction]}
    jaegerIndicesExist={true}
    mode="jaeger"
    modes={
      Array [
        Object {
          "id": "jaeger",
          "title": "Jaeger",
        },
        Object {
          "id": "data_prepper",
          "title": "Data Prepper",
        },
      ]
    }
    nameColumnAction={[Function]}
    page="services"
    parentBreadcrumbs={
      Array [
        Object {
          "href": "test#/",
          "text": "test",
        },
      ]
    }
    query=""
    setEndTime={[MockFunction]}
    setFilters={
      [MockFunction] {
        "calls": Array [
          Array [
            Array [],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    setQuery={[MockFunction]}
    setStartTime={[MockFunction]}
    startTime="now-5m"
    traceColumnAction={[Function]}
  >
    <SearchBar
      appConfigs={Array []}
      endTime="now"
      filters={Array []}
      mode="jaeger"
      page="services"
      query=""
      refresh={[Function]}
      setEndTime={[MockFunction]}
      setFilters={
        [MockFunction] {
          "calls": Array [
            Array [
              Array [],
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        }
      }
      setQuery={[MockFunction]}
      setStartTime={[MockFunction]}
      startTime="now-5m"
    >
      <EuiFlexGroup
        gutterSize="s"
      >
        <div
          className="euiFlexGroup euiFlexGroup--gutterSmall euiFlexGroup--directionRow euiFlexGroup--responsive"
        >
          <EuiFlexItem>
            <div
              className="euiFlexItem"
            >
              <EuiFieldSearch
                compressed={false}
                data-test-subj="search-bar-input-box"
                fullWidth={true}
                incremental={false}
                isClearable={false}
                isLoading={false}
                onChange={[Function]}
                onSearch={[Function]}
                placeholder="Trace ID, trace group name, service name"
                value=""
              >
                <EuiFormControlLayout
                  compressed={false}
                  fullWidth={true}
                  icon="search"
                  isLoading={false}
                >
                  <div
                    className="euiFormControlLayout euiFormControlLayout--fullWidth"
                  >
                    <div
                      className="euiFormControlLayout__childrenWrapper"
                    >
                      <EuiValidatableControl>
                        <input
                          className="euiFieldSearch euiFieldSearch--fullWidth"
                          data-test-subj="search-bar-input-box"
                          onChange={[Function]}
                          onKeyUp={[Function]}
                          placeholder="Trace ID, trace group name, service name"
                          type="search"
                          value=""
                        />
                      </EuiValidatableControl>
                      <EuiFormControlLayoutIcons
                        compressed={false}
                        icon="search"
                        isLoading={false}
                      >
                        <div
                          className="euiFormControlLayoutIcons"
                        >
                          <EuiFormControlLayoutCustomIcon
                            size="m"
                            type="search"
                          >
                            <span
                              className="euiFormControlLayoutCustomIcon"
                            >
                              <EuiIcon
                                aria-hidden="true"
                                className="euiFormControlLayoutCustomIcon__icon"
                                size="m"
                                type="search"
                              >
                                <EuiIconSearch
                                  aria-hidden={true}
                                  className="euiIcon euiIcon--medium euiFormControlLayoutCustomIcon__icon"
                                  focusable="false"
                                  role="img"
                                  style={null}
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="euiIcon euiIcon--medium euiFormControlLayoutCustomIcon__icon"
                                    focusable="false"
                                    height={16}
                                    role="img"
                                    style={null}
                                    viewBox="0 0 16 16"
                                    width={16}
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="m11.271 11.978 3.872 3.873a.502.502 0 0 0 .708 0 .502.502 0 0 0 0-.708l-3.565-3.564c2.38-2.747 2.267-6.923-.342-9.532-2.73-2.73-7.17-2.73-9.898 0-2.728 2.729-2.728 7.17 0 9.9a6.955 6.955 0 0 0 4.949 2.05.5.5 0 0 0 0-1 5.96 5.96 0 0 1-4.242-1.757 6.01 6.01 0 0 1 0-8.486c2.337-2.34 6.143-2.34 8.484 0a6.01 6.01 0 0 1 0 8.486.5.5 0 0 0 .034.738Z"
                                    />
                                  </svg>
                                </EuiIconSearch>
                              </EuiIcon>
                            </span>
                          </EuiFormControlLayoutCustomIcon>
                        </div>
                      </EuiFormControlLayoutIcons>
                    </div>
                  </div>
                </EuiFormControlLayout>
              </EuiFieldSearch>
            </div>
          </EuiFlexItem>
          <EuiFlexItem
            grow={false}
            style={
              Object {
                "maxWidth": "40vw",
              }
            }
          >
            <div
              className="euiFlexItem euiFlexItem--flexGrowZero"
              style={
                Object {
                  "maxWidth": "40vw",
                }
              }
            >
              <EuiSuperDatePicker
                commonlyUsedRanges={
                  Array [
                    Object {
                      "end": "now/d",
                      "label": "Today",
                      "start": "now/d",
                    },
                    Object {
                      "end": "now/w",
                      "label": "This week",
                      "start": "now/w",
                    },
                    Object {
                      "end": "now/M",
                      "label": "This month",
                      "start": "now/M",
                    },
                    Object {
                      "end": "now/y",
                      "label": "This year",
                      "start": "now/y",
                    },
                    Object {
                      "end": "now-1d/d",
                      "label": "Yesterday",
                      "start": "now-1d/d",
                    },
                    Object {
                      "end": "now",
                      "label": "Week to date",
                      "start": "now/w",
                    },
                    Object {
                      "end": "now",
                      "label": "Month to date",
                      "start": "now/M",
                    },
                    Object {
                      "end": "now",
                      "label": "Year to date",
                      "start": "now/y",
                    },
                  ]
                }
                dateFormat=""
                end="now"
                isAutoRefreshOnly={false}
                isDisabled={false}
                isPaused={true}
                onTimeChange={[Function]}
                recentlyUsedRanges={Array []}
                refreshInterval={0}
                showUpdateButton={false}
                start="now-5m"
                timeFormat="HH:mm"
              >
                <EuiFlexGroup
                  className="euiSuperDatePicker__flexWrapper euiSuperDatePicker__flexWrapper--noUpdateButton"
                  gutterSize="s"
                  responsive={false}
                >
                  <div
                    className="euiFlexGroup euiFlexGroup--gutterSmall euiFlexGroup--directionRow euiSuperDatePicker__flexWrapper euiSuperDatePicker__flexWrapper--noUpdateButton"
                  >
                    <EuiFlexItem>
                      <div
                        className="euiFlexItem"
                      >
                        <EuiFormControlLayout
                          className="euiSuperDatePicker"
                          isDisabled={false}
                          prepend={
                            <EuiQuickSelectPopover
                              applyTime={[Function]}
                              commonlyUsedRanges={
                                Array [
                                  Object {
                                    "end": "now/d",
                                    "label": "Today",
                                    "start": "now/d",
                                  },
                                  Object {
                                    "end": "now/w",
                                    "label": "This week",
                                    "start": "now/w",
                                  },
                                  Object {
                                    "end": "now/M",
                                    "label": "This month",
                                    "start": "now/M",
                                  },
                                  Object {
                                    "end": "now/y",
                                    "label": "This year",
                                    "start": "now/y",
                                  },
                                  Object {
                                    "end": "now-1d/d",
                                    "label": "Yesterday",
                                    "start": "now-1d/d",
                                  },
                                  Object {
                                    "end": "now",
                                    "label": "Week to date",
                                    "start": "now/w",
                                  },
                                  Object {
                                    "end": "now",
                                    "label": "Month to date",
                                    "start": "now/M",
                                  },
                                  Object {
                                    "end": "now",
                                    "label": "Year to date",
                                    "start": "now/y",
                                  },
                                ]
                              }
                              dateFormat=""
                              end="now"
                              isAutoRefreshOnly={false}
                              isDisabled={false}
                              isPaused={true}
                              recentlyUsedRanges={Array []}
                              refreshInterval={0}
                              start="now-5m"
                            />
                          }
                        >
                          <div
                            className="euiFormControlLayout euiFormControlLayout--group euiSuperDatePicker"
                          >
                            <EuiQuickSelectPopover
                              applyTime={[Function]}
                              className="euiFormControlLayout__prepend"
                              commonlyUsedRanges={
                                Array [
                                  Object {
                                    "end": "now/d",
                                    "label": "Today",
                                    "start": "now/d",
                                  },
                                  Object {
                                    "end": "now/w",
                                    "label": "This week",
                                    "start": "now/w",
                                  },
                                  Object {
                                    "end": "now/M",
                                    "label": "This month",
                                    "start": "now/M",
                                  },
                                  Object {
                                    "end": "now/y",
                                    "label": "This year",
                                    "start": "now/y",
                                  },
                                  Object {
                                    "end": "now-1d/d",
                                    "label": "Yesterday",
                                    "start": "now-1d/d",
                                  },
                                  Object {
                                    "end": "now",
                                    "label": "Week to date",
                                    "start": "now/w",
                                  },
                                  Object {
                                    "end": "now",
                                    "label": "Month to date",
                                    "start": "now/M",
                                  },
                                  Object {
                                    "end": "now",
                                    "label": "Year to date",
                                    "start": "now/y",
                                  },
                                ]
                              }
                              dateFormat=""
                              end="now"
                              isAutoRefreshOnly={false}
                              isDisabled={false}
                              isPaused={true}
                              key="0/.0"
                              recentlyUsedRanges={Array []}
                              refreshInterval={0}
                              start="now-5m"
                            >
                              <EuiPopover
                                anchorClassName="euiQuickSelectPopover__anchor"
                                anchorPosition="downLeft"
                                button={
                                  <EuiButtonEmpty
                                    aria-label="Date quick select"
                                    className="euiFormControlLayout__prepend"
                                    data-test-subj="superDatePickerToggleQuickMenuButton"
                                    iconSide="right"
                                    iconType="arrowDown"
                                    isDisabled={false}
                                    onClick={[Function]}
                                    size="xs"
                                    textProps={
                                      Object {
                                        "className": "euiQuickSelectPopover__buttonText",
                                      }
                                    }
                                  >
                                    <EuiIcon
                                      type="calendar"
                                    />
                                  </EuiButtonEmpty>
                                }
                                closePopover={[Function]}
                                display="inlineBlock"
                                hasArrow={true}
                                isOpen={false}
                                ownFocus={true}
                                panelPaddingSize="m"
                              >
                                <div
                                  className="euiPopover euiPopover--anchorDownLeft"
                                >
                                  <div
                                    className="euiPopover__anchor euiQuickSelectPopover__anchor"
                                  >
                                    <EuiButtonEmpty
                                      aria-label="Date quick select"
                                      className="euiFormControlLayout__prepend"
                                      data-test-subj="superDatePickerToggleQuickMenuButton"
                                      iconSide="right"
                                      iconType="arrowDown"
                                      isDisabled={false}
                                      onClick={[Function]}
                                      size="xs"
                                      textProps={
                                        Object {
                                          "className": "euiQuickSelectPopover__buttonText",
                                        }
                                      }
                                    >
                                      <button
                                        aria-label="Date quick select"
                                        className="euiButtonEmpty euiButtonEmpty--primary euiButtonEmpty--xSmall euiFormControlLayout__prepend"
                                        data-test-subj="superDatePickerToggleQuickMenuButton"
                                        disabled={false}
                                        onClick={[Function]}
                                        type="button"
                                      >
                                        <EuiButtonContent
                                          className="euiButtonEmpty__content"
                                          iconSide="right"
                                          iconSize="s"
                                          iconType="arrowDown"
                                          textProps={
                                            Object {
                                              "className": "euiButtonEmpty__text euiQuickSelectPopover__buttonText",
                                            }
                                          }
                                        >
                                          <span
                                            className="euiButtonContent euiButtonContent--iconRight euiButtonEmpty__content"
                                          >
                                            <EuiIcon
                                              className="euiButtonContent__icon"
                                              color="inherit"
                                              size="s"
                                              type="arrowDown"
                                            >
                                              <EuiIconArrowDown
                                                aria-hidden={true}
                                                className="euiIcon euiIcon--small euiIcon--inherit euiButtonContent__icon"
                                                focusable="false"
                                                role="img"
                                                style={null}
                                              >
                                                <svg
                                                  aria-hidden={true}
                                                  className="euiIcon euiIcon--small euiIcon--inherit euiButtonContent__icon"
                                                  focusable="false"
                                                  height={16}
                                                  role="img"
                                                  style={null}
                                                  viewBox="0 0 16 16"
                                                  width={16}
                                                  xmlns="http://www.w3.org/2000/svg"
                                                >
                                                  <path
                                                    d="M13.069 5.157 8.384 9.768a.546.546 0 0 1-.768 0L2.93 5.158a.552.552 0 0 0-.771 0 .53.53 0 0 0 0 .759l4.684 4.61c.641.631 1.672.63 2.312 0l4.684-4.61a.53.53 0 0 0 0-.76.552.552 0 0 0-.771 0Z"
                                                    fillRule="non-zero"
                                                  />
                                                </svg>
                                              </EuiIconArrowDown>
                                            </EuiIcon>
                                            <span
                                              className="euiButtonEmpty__text euiQuickSelectPopover__buttonText"
                                            >
                                              <EuiIcon
                                                type="calendar"
                                              >
                                                <EuiIconCalendar
                                                  aria-hidden={true}
                                                  className="euiIcon euiIcon--medium"
                                                  focusable="false"
                                                  role="img"
                                                  style={null}
                                                >
                                                  <svg
                                                    aria-hidden={true}
                                                    className="euiIcon euiIcon--medium"
                                                    focusable="false"
                                                    height={16}
                                                    role="img"
                                                    style={null}
                                                    viewBox="0 0 16 16"
                                                    width={16}
                                                    xmlns="http://www.w3.org/2000/svg"
                                                  >
                                                    <path
                                                      d="M14 4v-.994C14 2.45 13.55 2 12.994 2H11v1h-1V2H6v1H5V2H3.006C2.45 2 2 2.45 2 3.006v9.988C2 13.55 2.45 14 3.006 14h9.988C13.55 14 14 13.55 14 12.994V5H2V4h12zm-3-3h1.994C14.102 1 15 1.897 15 3.006v9.988A2.005 2.005 0 0 1 12.994 15H3.006A2.005 2.005 0 0 1 1 12.994V3.006C1 1.898 1.897 1 3.006 1H5V0h1v1h4V0h1v1zM4 7h2v1H4V7zm3 0h2v1H7V7zm3 0h2v1h-2V7zM4 9h2v1H4V9zm3 0h2v1H7V9zm3 0h2v1h-2V9zm-6 2h2v1H4v-1zm3 0h2v1H7v-1zm3 0h2v1h-2v-1z"
                                                      fillRule="evenodd"
                                                    />
                                                  </svg>
                                                </EuiIconCalendar>
                                              </EuiIcon>
                                            </span>
                                          </span>
                                        </EuiButtonContent>
                                      </button>
                                    </EuiButtonEmpty>
                                  </div>
                                </div>
                              </EuiPopover>
                            </EuiQuickSelectPopover>
                            <div
                              className="euiFormControlLayout__childrenWrapper"
                            >
                              <EuiDatePickerRange
                                className="euiDatePickerRange--inGroup"
                                endDateControl={<div />}
                                iconType={false}
                                isCustom={true}
                                startDateControl={<div />}
                              >
                                <div
                                  className="euiDatePickerRange euiDatePickerRange--inGroup"
                                >
                                  <button
                                    className="euiSuperDatePicker__prettyFormat"
                                    data-test-subj="superDatePickerShowDatesButton"
                                    disabled={false}
                                    onClick={[Function]}
                                  >
                                    Last 5 minutes
                                    <span
                                      className="euiSuperDatePicker__prettyFormatLink"
                                    >
                                      <EuiI18n
                                        default="Show dates"
                                        token="euiSuperDatePicker.showDatesButtonLabel"
                                      >
                                        Show dates
                                      </EuiI18n>
                                    </span>
                                  </button>
                                </div>
                              </EuiDatePickerRange>
                              <EuiFormControlLayoutIcons />
                            </div>
                          </div>
                        </EuiFormControlLayout>
                      </div>
                    </EuiFlexItem>
                  </div>
                </EuiFlexGroup>
              </EuiSuperDatePicker>
            </div>
          </EuiFlexItem>
          <EuiFlexItem
            grow={false}
          >
            <div
              className="euiFlexItem euiFlexItem--flexGrowZero"
            >
              <EuiButton
                data-click-metric-element="trace_analytics.refresh_button"
                data-test-subj="superDatePickerApplyTimeButton"
                iconType="refresh"
                onClick={[Function]}
              >
                <EuiButtonDisplay
                  baseClassName="euiButton"
                  data-click-metric-element="trace_analytics.refresh_button"
                  data-test-subj="superDatePickerApplyTimeButton"
                  disabled={false}
                  element="button"
                  iconType="refresh"
                  isDisabled={false}
                  onClick={[Function]}
                  type="button"
                >
                  <button
                    className="euiButton euiButton--primary"
                    data-click-metric-element="trace_analytics.refresh_button"
                    data-test-subj="superDatePickerApplyTimeButton"
                    disabled={false}
                    onClick={[Function]}
                    style={
                      Object {
                        "minWidth": undefined,
                      }
                    }
                    type="button"
                  >
                    <EuiButtonContent
                      className="euiButton__content"
                      iconSide="left"
                      iconType="refresh"
                      textProps={
                        Object {
                          "className": "euiButton__text",
                        }
                      }
                    >
                      <span
                        className="euiButtonContent euiButton__content"
                      >
                        <EuiIcon
                          className="euiButtonContent__icon"
                          color="inherit"
                          size="m"
                          type="refresh"
                        >
                          <EuiIconRefresh
                            aria-hidden={true}
                            className="euiIcon euiIcon--medium euiIcon--inherit euiButtonContent__icon"
                            focusable="false"
                            role="img"
                            style={null}
                          >
                            <svg
                              aria-hidden={true}
                              className="euiIcon euiIcon--medium euiIcon--inherit euiButtonContent__icon"
                              focusable="false"
                              height={16}
                              role="img"
                              style={null}
                              viewBox="0 0 16 16"
                              width={16}
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                d="M11.228 2.942a.5.5 0 1 1-.538.842A5 5 0 1 0 13 8a.5.5 0 1 1 1 0 6 6 0 1 1-2.772-5.058ZM14 1.5v3A1.5 1.5 0 0 1 12.5 6h-3a.5.5 0 0 1 0-1h3a.5.5 0 0 0 .5-.5v-3a.5.5 0 1 1 1 0Z"
                              />
                            </svg>
                          </EuiIconRefresh>
                        </EuiIcon>
                        <span
                          className="euiButton__text"
                        >
                          Refresh
                        </span>
                      </span>
                    </EuiButtonContent>
                  </button>
                </EuiButtonDisplay>
              </EuiButton>
            </div>
          </EuiFlexItem>
        </div>
      </EuiFlexGroup>
      <EuiSpacer
        size="s"
      >
        <div
          className="euiSpacer euiSpacer--s"
        />
      </EuiSpacer>
      <Filters
        appConfigs={Array []}
        filters={Array []}
        mode="jaeger"
        page="services"
        setFilters={
          [MockFunction] {
            "calls": Array [
              Array [
                Array [],
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": undefined,
              },
            ],
          }
        }
      >
        <EuiFlexGroup
          alignItems="center"
          gutterSize="xs"
          responsive={false}
          style={
            Object {
              "minHeight": 32,
            }
          }
        >
          <div
            className="euiFlexGroup euiFlexGroup--gutterExtraSmall euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow"
            style={
              Object {
                "minHeight": 32,
              }
            }
          >
            <EuiFlexItem
              grow={false}
            >
              <div
                className="euiFlexItem euiFlexItem--flexGrowZero"
              >
                <GlobalFilterButton>
                  <EuiPopover
                    anchorPosition="rightUp"
                    button={
                      <EuiButtonIcon
                        aria-label="Change all filters"
                        iconType="filter"
                        onClick={[Function]}
                        title="Change all filters"
                      />
                    }
                    closePopover={[Function]}
                    data-test-subj="global-filter-button"
                    display="inlineBlock"
                    hasArrow={true}
                    isOpen={false}
                    ownFocus={true}
                    panelPaddingSize="none"
                    withTitle={true}
                  >
                    <div
                      className="euiPopover euiPopover--anchorRightUp"
                      data-test-subj="global-filter-button"
                      withTitle={true}
                    >
                      <div
                        className="euiPopover__anchor"
                      >
                        <EuiButtonIcon
                          aria-label="Change all filters"
                          iconType="filter"
                          onClick={[Function]}
                          title="Change all filters"
                        >
                          <button
                            aria-label="Change all filters"
                            className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--xSmall"
                            disabled={false}
                            onClick={[Function]}
                            title="Change all filters"
                            type="button"
                          >
                            <EuiIcon
                              aria-hidden="true"
                              className="euiButtonIcon__icon"
                              color="inherit"
                              size="m"
                              type="filter"
                            >
                              <EuiIconFilter
                                aria-hidden={true}
                                className="euiIcon euiIcon--medium euiIcon--inherit euiButtonIcon__icon"
                                focusable="false"
                                role="img"
                                style={null}
                              >
                                <svg
                                  aria-hidden={true}
                                  className="euiIcon euiIcon--medium euiIcon--inherit euiButtonIcon__icon"
                                  focusable="false"
                                  height={16}
                                  role="img"
                                  style={null}
                                  viewBox="0 0 16 16"
                                  width={16}
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <path
                                    d="M7.999 15.999a8 8 0 1 1 0-16 8 8 0 0 1 0 16ZM8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14ZM3.5 5h9a.5.5 0 1 1 0 1h-9a.5.5 0 0 1 0-1Zm2 3h5a.5.5 0 1 1 0 1h-5a.5.5 0 0 1 0-1Zm2 3h1a.5.5 0 1 1 0 1h-1a.5.5 0 1 1 0-1Z"
                                    fillRule="evenodd"
                                  />
                                </svg>
                              </EuiIconFilter>
                            </EuiIcon>
                          </button>
                        </EuiButtonIcon>
                      </div>
                    </div>
                  </EuiPopover>
                </GlobalFilterButton>
              </div>
            </EuiFlexItem>
            <EuiFlexItem
              grow={false}
            >
              <div
                className="euiFlexItem euiFlexItem--flexGrowZero"
              >
                <AddFilterButton>
                  <EuiPopover
                    anchorPosition="downLeft"
                    button={
                      <EuiButtonEmpty
                        onClick={[Function]}
                        size="xs"
                      >
                        + Add filter
                      </EuiButtonEmpty>
                    }
                    closePopover={[Function]}
                    data-test-subj="addfilter"
                    display="inlineBlock"
                    hasArrow={true}
                    isOpen={false}
                    ownFocus={true}
                    panelPaddingSize="m"
                    withTitle={true}
                  >
                    <div
                      className="euiPopover euiPopover--anchorDownLeft"
                      data-test-subj="addfilter"
                      withTitle={true}
                    >
                      <div
                        className="euiPopover__anchor"
                      >
                        <EuiButtonEmpty
                          onClick={[Function]}
                          size="xs"
                        >
                          <button
                            className="euiButtonEmpty euiButtonEmpty--primary euiButtonEmpty--xSmall"
                            disabled={false}
                            onClick={[Function]}
                            type="button"
                          >
                            <EuiButtonContent
                              className="euiButtonEmpty__content"
                              iconSide="left"
                              iconSize="s"
                              textProps={
                                Object {
                                  "className": "euiButtonEmpty__text",
                                }
                              }
                            >
                              <span
                                className="euiButtonContent euiButtonEmpty__content"
                              >
                                <span
                                  className="euiButtonEmpty__text"
                                >
                                  + Add filter
                                </span>
                              </span>
                            </EuiButtonContent>
                          </button>
                        </EuiButtonEmpty>
                      </div>
                    </div>
                  </EuiPopover>
                </AddFilterButton>
              </div>
            </EuiFlexItem>
          </div>
        </EuiFlexGroup>
      </Filters>
    </SearchBar>
    <EuiSpacer
      size="m"
    >
      <div
        className="euiSpacer euiSpacer--m"
      />
    </EuiSpacer>
    <ServicesTable
      addFilter={[Function]}
      dataPrepperIndicesExist={false}
      items={Array []}
      jaegerIndicesExist={true}
      loading={true}
      mode="jaeger"
      nameColumnAction={[Function]}
      setRedirect={[Function]}
      traceColumnAction={[Function]}
    >
      <EuiPanel>
        <div
          className="euiPanel euiPanel--paddingMedium euiPanel--borderRadiusMedium euiPanel--plain euiPanel--hasShadow"
        >
          <EuiFlexGroup
            alignItems="center"
            gutterSize="s"
          >
            <div
              className="euiFlexGroup euiFlexGroup--gutterSmall euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow euiFlexGroup--responsive"
            >
              <EuiFlexItem
                grow={10}
              >
                <div
                  className="euiFlexItem euiFlexItem--flexGrow10"
                >
                  <PanelTitle
                    title="Services"
                    totalItems={0}
                  >
                    <EuiText
                      size="m"
                    >
                      <div
                        className="euiText euiText--medium"
                      >
                        <span
                          className="panel-title"
                        >
                          Services
                        </span>
                        <span
                          className="panel-title-count"
                        >
                           (0)
                        </span>
                      </div>
                    </EuiText>
                  </PanelTitle>
                </div>
              </EuiFlexItem>
            </div>
          </EuiFlexGroup>
          <EuiSpacer
            size="m"
          >
            <div
              className="euiSpacer euiSpacer--m"
            />
          </EuiSpacer>
          <EuiHorizontalRule
            margin="none"
          >
            <hr
              className="euiHorizontalRule euiHorizontalRule--full"
            />
          </EuiHorizontalRule>
          <NoMatchMessage
            size="xl"
          >
            <EuiSpacer
              size="xl"
            >
              <div
                className="euiSpacer euiSpacer--xl"
              />
            </EuiSpacer>
            <EuiEmptyPrompt
              body={
                <EuiText>
                  No data matches the selected filter. Clear the filter and/or increase the time range to see more results.
                </EuiText>
              }
              title={
                <h2>
                  No matches
                </h2>
              }
            >
              <div
                className="euiEmptyPrompt"
              >
                <EuiTitle
                  size="m"
                >
                  <h2
                    className="euiTitle euiTitle--medium"
                  >
                    No matches
                  </h2>
                </EuiTitle>
                <EuiTextColor
                  color="subdued"
                >
                  <span
                    className="euiTextColor euiTextColor--subdued"
                  >
                    <EuiSpacer
                      size="m"
                    >
                      <div
                        className="euiSpacer euiSpacer--m"
                      />
                    </EuiSpacer>
                    <EuiText>
                      <div
                        className="euiText euiText--medium"
                      >
                        <EuiText>
                          <div
                            className="euiText euiText--medium"
                          >
                            No data matches the selected filter. Clear the filter and/or increase the time range to see more results.
                          </div>
                        </EuiText>
                      </div>
                    </EuiText>
                  </span>
                </EuiTextColor>
              </div>
            </EuiEmptyPrompt>
            <EuiSpacer
              size="xl"
            >
              <div
                className="euiSpacer euiSpacer--xl"
              />
            </EuiSpacer>
          </NoMatchMessage>
        </div>
      </EuiPanel>
    </ServicesTable>
    <EuiSpacer
      size="m"
    >
      <div
        className="euiSpacer euiSpacer--m"
      />
    </EuiSpacer>
    <div />
    <EuiSpacer
      size="m"
    >
      <div
        className="euiSpacer euiSpacer--m"
      />
    </EuiSpacer>
    <EuiPanel>
      <div
        className="euiPanel euiPanel--paddingMedium euiPanel--borderRadiusMedium euiPanel--plain euiPanel--hasShadow"
      >
        <EuiAccordion
          arrowDisplay="left"
          buttonContent="Service and Operations"
          data-test-subj="trace-groups-service-operation-accordian"
          forceState="closed"
          id="accordion1"
          initialIsOpen={false}
          isLoading={false}
          isLoadingMessage={false}
          onToggle={[Function]}
          paddingSize="none"
        >
          <div
            className="euiAccordion"
            data-test-subj="trace-groups-service-operation-accordian"
            onToggle={[Function]}
          >
            <div
              className="euiAccordion__triggerWrapper"
            >
              <button
                aria-controls="accordion1"
                aria-expanded={false}
                className="euiAccordion__button"
                id="random_html_id"
                onClick={[Function]}
                type="button"
              >
                <span
                  className="euiAccordion__iconWrapper"
                >
                  <EuiIcon
                    className="euiAccordion__icon"
                    size="m"
                    type="arrowRight"
                  >
                    <EuiIconArrowRight
                      aria-hidden={true}
                      className="euiIcon euiIcon--medium euiAccordion__icon"
                      focusable="false"
                      role="img"
                      style={null}
                    >
                      <svg
                        aria-hidden={true}
                        className="euiIcon euiIcon--medium euiAccordion__icon"
                        focusable="false"
                        height={16}
                        role="img"
                        style={null}
                        viewBox="0 0 16 16"
                        width={16}
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="m5.157 13.069 4.611-4.685a.546.546 0 0 0 0-.768L5.158 2.93a.552.552 0 0 1 0-.771.53.53 0 0 1 .759 0l4.61 4.684c.631.641.63 1.672 0 2.312l-4.61 4.684a.53.53 0 0 1-.76 0 .552.552 0 0 1 0-.771Z"
                          fillRule="nonzero"
                        />
                      </svg>
                    </EuiIconArrowRight>
                  </EuiIcon>
                </span>
                <span
                  className="euiIEFlexWrapFix"
                >
                  Service and Operations
                </span>
              </button>
            </div>
            <div
              aria-labelledby="random_html_id"
              className="euiAccordion__childWrapper"
              id="accordion1"
              role="region"
              tabIndex={-1}
            >
              <EuiResizeObserver
                onResize={[Function]}
              >
                <div>
                  <div
                    className=""
                  >
                    <EuiSpacer
                      size="m"
                    >
                      <div
                        className="euiSpacer euiSpacer--m"
                      />
                    </EuiSpacer>
                  </div>
                </div>
              </EuiResizeObserver>
            </div>
          </div>
        </EuiAccordion>
      </div>
    </EuiPanel>
  </ServicesContent>
</Services>
`;

exports[`Services component renders services page 1`] = `
<Services
  appConfigs={Array []}
  childBreadcrumbs={
    Array [
      Object {
        "href": "#/trace_analytics/home",
        "text": "Trace analytics",
      },
      Object {
        "href": "#/trace_analytics/services",
        "text": "Services",
      },
    ]
  }
  chrome={
    Object {
      "addApplicationClass": [MockFunction],
      "docTitle": Object {
        "change": [MockFunction],
        "reset": [MockFunction],
      },
      "getApplicationClasses$": [MockFunction],
      "getBadge$": [MockFunction],
      "getBreadcrumbs$": [MockFunction],
      "getCustomNavLink$": [MockFunction],
      "getHeaderComponent": [MockFunction],
      "getHelpExtension$": [MockFunction],
      "getIsNavDrawerLocked$": [MockFunction],
      "getIsVisible$": [MockFunction],
      "logos": Object {
        "AnimatedMark": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_spinner_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_spinner_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_spinner_on_light.svg",
        },
        "Application": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_dashboards_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_dashboards_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_dashboards_on_light.svg",
        },
        "CenterMark": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_center_mark_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_center_mark_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_center_mark_on_light.svg",
        },
        "Mark": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_mark_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_mark_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_mark_on_light.svg",
        },
        "OpenSearch": Object {
          "dark": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_on_dark.svg",
          },
          "light": Object {
            "type": "default",
            "url": "/ui/logos/opensearch_on_light.svg",
          },
          "type": "default",
          "url": "/ui/logos/opensearch_on_light.svg",
        },
        "colorScheme": "light",
      },
      "navControls": Object {
        "getCenter$": [MockFunction],
        "getLeft$": [MockFunction],
        "getRight$": [MockFunction],
        "registerCenter": [MockFunction],
        "registerLeft": [MockFunction],
        "registerRight": [MockFunction],
      },
      "navLinks": Object {
        "enableForcedAppSwitcherNavigation": [MockFunction],
        "get": [MockFunction],
        "getAll": [MockFunction],
        "getForceAppSwitcherNavigation$": [MockFunction],
        "getNavLinks$": [MockFunction],
        "has": [MockFunction],
        "showOnly": [MockFunction],
        "update": [MockFunction],
      },
      "recentlyAccessed": Object {
        "add": [MockFunction],
        "get": [MockFunction],
        "get$": [MockFunction],
      },
      "removeApplicationClass": [MockFunction],
      "setAppTitle": [MockFunction],
      "setBadge": [MockFunction],
      "setBreadcrumbs": [MockFunction] {
        "calls": Array [
          Array [
            Array [
              undefined,
              Object {
                "href": "#/trace_analytics/home",
                "text": "Trace analytics",
              },
              Object {
                "href": "#/trace_analytics/services",
                "text": "Services",
              },
            ],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
      "setCustomNavLink": [MockFunction],
      "setHelpExtension": [MockFunction],
      "setHelpSupportUrl": [MockFunction],
      "setIsVisible": [MockFunction],
    }
  }
  dataPrepperIndicesExist={true}
  dataSourceMDSId={
    Array [
      Object {
        "id": "",
        "label": "",
      },
    ]
  }
  endTime="now"
  filters={Array []}
  http={[MockFunction]}
  mode="data_prepper"
  modes={
    Array [
      Object {
        "id": "jaeger",
        "title": "Jaeger",
      },
      Object {
        "id": "data_prepper",
        "title": "Data Prepper",
      },
    ]
  }
  nameColumnAction={[Function]}
  page="services"
  parentBreadcrumbs={
    Array [
      Object {
        "href": "test#/",
        "text": "test",
      },
    ]
  }
  query=""
  setEndTime={[MockFunction]}
  setFilters={
    [MockFunction] {
      "calls": Array [
        Array [
          Array [],
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  setQuery={[MockFunction]}
  setStartTime={[MockFunction]}
  startTime="now-5m"
  traceColumnAction={[Function]}
>
  <DataSourcePicker
    modes={
      Array [
        Object {
          "id": "jaeger",
          "title": "Jaeger",
        },
        Object {
          "id": "data_prepper",
          "title": "Data Prepper",
        },
      ]
    }
    selectedMode="data_prepper"
  >
    <EuiPopover
      anchorClassName="eui-textTruncate"
      anchorPosition="downCenter"
      button={
        <EuiButtonEmpty
          className="dscIndexPattern__triggerButton"
          color="text"
          data-test-subj="indexPattern-switch-link"
          flush="left"
          iconSide="right"
          iconType="arrowDown"
          onClick={[Function]}
          title="data_prepper"
        >
          Data Prepper
        </EuiButtonEmpty>
      }
      className="eui-textTruncate"
      closePopover={[Function]}
      display="inlineBlock"
      hasArrow={true}
      isOpen={false}
      ownFocus={true}
      panelPaddingSize="s"
    >
      <div
        className="euiPopover euiPopover--anchorDownCenter eui-textTruncate"
      >
        <div
          className="euiPopover__anchor eui-textTruncate"
        >
          <EuiButtonEmpty
            className="dscIndexPattern__triggerButton"
            color="text"
            data-test-subj="indexPattern-switch-link"
            flush="left"
            iconSide="right"
            iconType="arrowDown"
            onClick={[Function]}
            title="data_prepper"
          >
            <button
              className="euiButtonEmpty euiButtonEmpty--text euiButtonEmpty--flushLeft dscIndexPattern__triggerButton"
              data-test-subj="indexPattern-switch-link"
              disabled={false}
              onClick={[Function]}
              title="data_prepper"
              type="button"
            >
              <EuiButtonContent
                className="euiButtonEmpty__content"
                iconSide="right"
                iconSize="m"
                iconType="arrowDown"
                textProps={
                  Object {
                    "className": "euiButtonEmpty__text",
                  }
                }
              >
                <span
                  className="euiButtonContent euiButtonContent--iconRight euiButtonEmpty__content"
                >
                  <EuiIcon
                    className="euiButtonContent__icon"
                    color="inherit"
                    size="m"
                    type="arrowDown"
                  >
                    <EuiIconArrowDown
                      aria-hidden={true}
                      className="euiIcon euiIcon--medium euiIcon--inherit euiButtonContent__icon"
                      focusable="false"
                      role="img"
                      style={null}
                    >
                      <svg
                        aria-hidden={true}
                        className="euiIcon euiIcon--medium euiIcon--inherit euiButtonContent__icon"
                        focusable="false"
                        height={16}
                        role="img"
                        style={null}
                        viewBox="0 0 16 16"
                        width={16}
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M13.069 5.157 8.384 9.768a.546.546 0 0 1-.768 0L2.93 5.158a.552.552 0 0 0-.771 0 .53.53 0 0 0 0 .759l4.684 4.61c.641.631 1.672.63 2.312 0l4.684-4.61a.53.53 0 0 0 0-.76.552.552 0 0 0-.771 0Z"
                          fillRule="non-zero"
                        />
                      </svg>
                    </EuiIconArrowDown>
                  </EuiIcon>
                  <span
                    className="euiButtonEmpty__text"
                  >
                    Data Prepper
                  </span>
                </span>
              </EuiButtonContent>
            </button>
          </EuiButtonEmpty>
        </div>
      </div>
    </EuiPopover>
  </DataSourcePicker>
  <ServicesContent
    appConfigs={Array []}
    childBreadcrumbs={
      Array [
        Object {
          "href": "#/trace_analytics/home",
          "text": "Trace analytics",
        },
        Object {
          "href": "#/trace_analytics/services",
          "text": "Services",
        },
      ]
    }
    chrome={
      Object {
        "addApplicationClass": [MockFunction],
        "docTitle": Object {
          "change": [MockFunction],
          "reset": [MockFunction],
        },
        "getApplicationClasses$": [MockFunction],
        "getBadge$": [MockFunction],
        "getBreadcrumbs$": [MockFunction],
        "getCustomNavLink$": [MockFunction],
        "getHeaderComponent": [MockFunction],
        "getHelpExtension$": [MockFunction],
        "getIsNavDrawerLocked$": [MockFunction],
        "getIsVisible$": [MockFunction],
        "logos": Object {
          "AnimatedMark": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_spinner_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_spinner_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_spinner_on_light.svg",
          },
          "Application": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_dashboards_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_dashboards_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_dashboards_on_light.svg",
          },
          "CenterMark": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_center_mark_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_center_mark_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_center_mark_on_light.svg",
          },
          "Mark": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_mark_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_mark_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_mark_on_light.svg",
          },
          "OpenSearch": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_on_light.svg",
          },
          "colorScheme": "light",
        },
        "navControls": Object {
          "getCenter$": [MockFunction],
          "getLeft$": [MockFunction],
          "getRight$": [MockFunction],
          "registerCenter": [MockFunction],
          "registerLeft": [MockFunction],
          "registerRight": [MockFunction],
        },
        "navLinks": Object {
          "enableForcedAppSwitcherNavigation": [MockFunction],
          "get": [MockFunction],
          "getAll": [MockFunction],
          "getForceAppSwitcherNavigation$": [MockFunction],
          "getNavLinks$": [MockFunction],
          "has": [MockFunction],
          "showOnly": [MockFunction],
          "update": [MockFunction],
        },
        "recentlyAccessed": Object {
          "add": [MockFunction],
          "get": [MockFunction],
          "get$": [MockFunction],
        },
        "removeApplicationClass": [MockFunction],
        "setAppTitle": [MockFunction],
        "setBadge": [MockFunction],
        "setBreadcrumbs": [MockFunction] {
          "calls": Array [
            Array [
              Array [
                undefined,
                Object {
                  "href": "#/trace_analytics/home",
                  "text": "Trace analytics",
                },
                Object {
                  "href": "#/trace_analytics/services",
                  "text": "Services",
                },
              ],
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        },
        "setCustomNavLink": [MockFunction],
        "setHelpExtension": [MockFunction],
        "setHelpSupportUrl": [MockFunction],
        "setIsVisible": [MockFunction],
      }
    }
    dataPrepperIndicesExist={true}
    dataSourceMDSId={
      Array [
        Object {
          "id": "",
          "label": "",
        },
      ]
    }
    endTime="now"
    filters={Array []}
    http={[MockFunction]}
    mode="data_prepper"
    modes={
      Array [
        Object {
          "id": "jaeger",
          "title": "Jaeger",
        },
        Object {
          "id": "data_prepper",
          "title": "Data Prepper",
        },
      ]
    }
    nameColumnAction={[Function]}
    page="services"
    parentBreadcrumbs={
      Array [
        Object {
          "href": "test#/",
          "text": "test",
        },
      ]
    }
    query=""
    setEndTime={[MockFunction]}
    setFilters={
      [MockFunction] {
        "calls": Array [
          Array [
            Array [],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    setQuery={[MockFunction]}
    setStartTime={[MockFunction]}
    startTime="now-5m"
    traceColumnAction={[Function]}
  >
    <SearchBar
      appConfigs={Array []}
      endTime="now"
      filters={Array []}
      mode="data_prepper"
      page="services"
      query=""
      refresh={[Function]}
      setEndTime={[MockFunction]}
      setFilters={
        [MockFunction] {
          "calls": Array [
            Array [
              Array [],
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        }
      }
      setQuery={[MockFunction]}
      setStartTime={[MockFunction]}
      startTime="now-5m"
    >
      <EuiFlexGroup
        gutterSize="s"
      >
        <div
          className="euiFlexGroup euiFlexGroup--gutterSmall euiFlexGroup--directionRow euiFlexGroup--responsive"
        >
          <EuiFlexItem>
            <div
              className="euiFlexItem"
            >
              <EuiFieldSearch
                compressed={false}
                data-test-subj="search-bar-input-box"
                fullWidth={true}
                incremental={false}
                isClearable={false}
                isLoading={false}
                onChange={[Function]}
                onSearch={[Function]}
                placeholder="Trace ID, trace group name, service name"
                value=""
              >
                <EuiFormControlLayout
                  compressed={false}
                  fullWidth={true}
                  icon="search"
                  isLoading={false}
                >
                  <div
                    className="euiFormControlLayout euiFormControlLayout--fullWidth"
                  >
                    <div
                      className="euiFormControlLayout__childrenWrapper"
                    >
                      <EuiValidatableControl>
                        <input
                          className="euiFieldSearch euiFieldSearch--fullWidth"
                          data-test-subj="search-bar-input-box"
                          onChange={[Function]}
                          onKeyUp={[Function]}
                          placeholder="Trace ID, trace group name, service name"
                          type="search"
                          value=""
                        />
                      </EuiValidatableControl>
                      <EuiFormControlLayoutIcons
                        compressed={false}
                        icon="search"
                        isLoading={false}
                      >
                        <div
                          className="euiFormControlLayoutIcons"
                        >
                          <EuiFormControlLayoutCustomIcon
                            size="m"
                            type="search"
                          >
                            <span
                              className="euiFormControlLayoutCustomIcon"
                            >
                              <EuiIcon
                                aria-hidden="true"
                                className="euiFormControlLayoutCustomIcon__icon"
                                size="m"
                                type="search"
                              >
                                <EuiIconSearch
                                  aria-hidden={true}
                                  className="euiIcon euiIcon--medium euiFormControlLayoutCustomIcon__icon"
                                  focusable="false"
                                  role="img"
                                  style={null}
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="euiIcon euiIcon--medium euiFormControlLayoutCustomIcon__icon"
                                    focusable="false"
                                    height={16}
                                    role="img"
                                    style={null}
                                    viewBox="0 0 16 16"
                                    width={16}
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="m11.271 11.978 3.872 3.873a.502.502 0 0 0 .708 0 .502.502 0 0 0 0-.708l-3.565-3.564c2.38-2.747 2.267-6.923-.342-9.532-2.73-2.73-7.17-2.73-9.898 0-2.728 2.729-2.728 7.17 0 9.9a6.955 6.955 0 0 0 4.949 2.05.5.5 0 0 0 0-1 5.96 5.96 0 0 1-4.242-1.757 6.01 6.01 0 0 1 0-8.486c2.337-2.34 6.143-2.34 8.484 0a6.01 6.01 0 0 1 0 8.486.5.5 0 0 0 .034.738Z"
                                    />
                                  </svg>
                                </EuiIconSearch>
                              </EuiIcon>
                            </span>
                          </EuiFormControlLayoutCustomIcon>
                        </div>
                      </EuiFormControlLayoutIcons>
                    </div>
                  </div>
                </EuiFormControlLayout>
              </EuiFieldSearch>
            </div>
          </EuiFlexItem>
          <EuiFlexItem
            grow={false}
            style={
              Object {
                "maxWidth": "40vw",
              }
            }
          >
            <div
              className="euiFlexItem euiFlexItem--flexGrowZero"
              style={
                Object {
                  "maxWidth": "40vw",
                }
              }
            >
              <EuiSuperDatePicker
                commonlyUsedRanges={
                  Array [
                    Object {
                      "end": "now/d",
                      "label": "Today",
                      "start": "now/d",
                    },
                    Object {
                      "end": "now/w",
                      "label": "This week",
                      "start": "now/w",
                    },
                    Object {
                      "end": "now/M",
                      "label": "This month",
                      "start": "now/M",
                    },
                    Object {
                      "end": "now/y",
                      "label": "This year",
                      "start": "now/y",
                    },
                    Object {
                      "end": "now-1d/d",
                      "label": "Yesterday",
                      "start": "now-1d/d",
                    },
                    Object {
                      "end": "now",
                      "label": "Week to date",
                      "start": "now/w",
                    },
                    Object {
                      "end": "now",
                      "label": "Month to date",
                      "start": "now/M",
                    },
                    Object {
                      "end": "now",
                      "label": "Year to date",
                      "start": "now/y",
                    },
                  ]
                }
                dateFormat=""
                end="now"
                isAutoRefreshOnly={false}
                isDisabled={false}
                isPaused={true}
                onTimeChange={[Function]}
                recentlyUsedRanges={Array []}
                refreshInterval={0}
                showUpdateButton={false}
                start="now-5m"
                timeFormat="HH:mm"
              >
                <EuiFlexGroup
                  className="euiSuperDatePicker__flexWrapper euiSuperDatePicker__flexWrapper--noUpdateButton"
                  gutterSize="s"
                  responsive={false}
                >
                  <div
                    className="euiFlexGroup euiFlexGroup--gutterSmall euiFlexGroup--directionRow euiSuperDatePicker__flexWrapper euiSuperDatePicker__flexWrapper--noUpdateButton"
                  >
                    <EuiFlexItem>
                      <div
                        className="euiFlexItem"
                      >
                        <EuiFormControlLayout
                          className="euiSuperDatePicker"
                          isDisabled={false}
                          prepend={
                            <EuiQuickSelectPopover
                              applyTime={[Function]}
                              commonlyUsedRanges={
                                Array [
                                  Object {
                                    "end": "now/d",
                                    "label": "Today",
                                    "start": "now/d",
                                  },
                                  Object {
                                    "end": "now/w",
                                    "label": "This week",
                                    "start": "now/w",
                                  },
                                  Object {
                                    "end": "now/M",
                                    "label": "This month",
                                    "start": "now/M",
                                  },
                                  Object {
                                    "end": "now/y",
                                    "label": "This year",
                                    "start": "now/y",
                                  },
                                  Object {
                                    "end": "now-1d/d",
                                    "label": "Yesterday",
                                    "start": "now-1d/d",
                                  },
                                  Object {
                                    "end": "now",
                                    "label": "Week to date",
                                    "start": "now/w",
                                  },
                                  Object {
                                    "end": "now",
                                    "label": "Month to date",
                                    "start": "now/M",
                                  },
                                  Object {
                                    "end": "now",
                                    "label": "Year to date",
                                    "start": "now/y",
                                  },
                                ]
                              }
                              dateFormat=""
                              end="now"
                              isAutoRefreshOnly={false}
                              isDisabled={false}
                              isPaused={true}
                              recentlyUsedRanges={Array []}
                              refreshInterval={0}
                              start="now-5m"
                            />
                          }
                        >
                          <div
                            className="euiFormControlLayout euiFormControlLayout--group euiSuperDatePicker"
                          >
                            <EuiQuickSelectPopover
                              applyTime={[Function]}
                              className="euiFormControlLayout__prepend"
                              commonlyUsedRanges={
                                Array [
                                  Object {
                                    "end": "now/d",
                                    "label": "Today",
                                    "start": "now/d",
                                  },
                                  Object {
                                    "end": "now/w",
                                    "label": "This week",
                                    "start": "now/w",
                                  },
                                  Object {
                                    "end": "now/M",
                                    "label": "This month",
                                    "start": "now/M",
                                  },
                                  Object {
                                    "end": "now/y",
                                    "label": "This year",
                                    "start": "now/y",
                                  },
                                  Object {
                                    "end": "now-1d/d",
                                    "label": "Yesterday",
                                    "start": "now-1d/d",
                                  },
                                  Object {
                                    "end": "now",
                                    "label": "Week to date",
                                    "start": "now/w",
                                  },
                                  Object {
                                    "end": "now",
                                    "label": "Month to date",
                                    "start": "now/M",
                                  },
                                  Object {
                                    "end": "now",
                                    "label": "Year to date",
                                    "start": "now/y",
                                  },
                                ]
                              }
                              dateFormat=""
                              end="now"
                              isAutoRefreshOnly={false}
                              isDisabled={false}
                              isPaused={true}
                              key="0/.0"
                              recentlyUsedRanges={Array []}
                              refreshInterval={0}
                              start="now-5m"
                            >
                              <EuiPopover
                                anchorClassName="euiQuickSelectPopover__anchor"
                                anchorPosition="downLeft"
                                button={
                                  <EuiButtonEmpty
                                    aria-label="Date quick select"
                                    className="euiFormControlLayout__prepend"
                                    data-test-subj="superDatePickerToggleQuickMenuButton"
                                    iconSide="right"
                                    iconType="arrowDown"
                                    isDisabled={false}
                                    onClick={[Function]}
                                    size="xs"
                                    textProps={
                                      Object {
                                        "className": "euiQuickSelectPopover__buttonText",
                                      }
                                    }
                                  >
                                    <EuiIcon
                                      type="calendar"
                                    />
                                  </EuiButtonEmpty>
                                }
                                closePopover={[Function]}
                                display="inlineBlock"
                                hasArrow={true}
                                isOpen={false}
                                ownFocus={true}
                                panelPaddingSize="m"
                              >
                                <div
                                  className="euiPopover euiPopover--anchorDownLeft"
                                >
                                  <div
                                    className="euiPopover__anchor euiQuickSelectPopover__anchor"
                                  >
                                    <EuiButtonEmpty
                                      aria-label="Date quick select"
                                      className="euiFormControlLayout__prepend"
                                      data-test-subj="superDatePickerToggleQuickMenuButton"
                                      iconSide="right"
                                      iconType="arrowDown"
                                      isDisabled={false}
                                      onClick={[Function]}
                                      size="xs"
                                      textProps={
                                        Object {
                                          "className": "euiQuickSelectPopover__buttonText",
                                        }
                                      }
                                    >
                                      <button
                                        aria-label="Date quick select"
                                        className="euiButtonEmpty euiButtonEmpty--primary euiButtonEmpty--xSmall euiFormControlLayout__prepend"
                                        data-test-subj="superDatePickerToggleQuickMenuButton"
                                        disabled={false}
                                        onClick={[Function]}
                                        type="button"
                                      >
                                        <EuiButtonContent
                                          className="euiButtonEmpty__content"
                                          iconSide="right"
                                          iconSize="s"
                                          iconType="arrowDown"
                                          textProps={
                                            Object {
                                              "className": "euiButtonEmpty__text euiQuickSelectPopover__buttonText",
                                            }
                                          }
                                        >
                                          <span
                                            className="euiButtonContent euiButtonContent--iconRight euiButtonEmpty__content"
                                          >
                                            <EuiIcon
                                              className="euiButtonContent__icon"
                                              color="inherit"
                                              size="s"
                                              type="arrowDown"
                                            >
                                              <EuiIconArrowDown
                                                aria-hidden={true}
                                                className="euiIcon euiIcon--small euiIcon--inherit euiButtonContent__icon"
                                                focusable="false"
                                                role="img"
                                                style={null}
                                              >
                                                <svg
                                                  aria-hidden={true}
                                                  className="euiIcon euiIcon--small euiIcon--inherit euiButtonContent__icon"
                                                  focusable="false"
                                                  height={16}
                                                  role="img"
                                                  style={null}
                                                  viewBox="0 0 16 16"
                                                  width={16}
                                                  xmlns="http://www.w3.org/2000/svg"
                                                >
                                                  <path
                                                    d="M13.069 5.157 8.384 9.768a.546.546 0 0 1-.768 0L2.93 5.158a.552.552 0 0 0-.771 0 .53.53 0 0 0 0 .759l4.684 4.61c.641.631 1.672.63 2.312 0l4.684-4.61a.53.53 0 0 0 0-.76.552.552 0 0 0-.771 0Z"
                                                    fillRule="non-zero"
                                                  />
                                                </svg>
                                              </EuiIconArrowDown>
                                            </EuiIcon>
                                            <span
                                              className="euiButtonEmpty__text euiQuickSelectPopover__buttonText"
                                            >
                                              <EuiIcon
                                                type="calendar"
                                              >
                                                <EuiIconCalendar
                                                  aria-hidden={true}
                                                  className="euiIcon euiIcon--medium"
                                                  focusable="false"
                                                  role="img"
                                                  style={null}
                                                >
                                                  <svg
                                                    aria-hidden={true}
                                                    className="euiIcon euiIcon--medium"
                                                    focusable="false"
                                                    height={16}
                                                    role="img"
                                                    style={null}
                                                    viewBox="0 0 16 16"
                                                    width={16}
                                                    xmlns="http://www.w3.org/2000/svg"
                                                  >
                                                    <path
                                                      d="M14 4v-.994C14 2.45 13.55 2 12.994 2H11v1h-1V2H6v1H5V2H3.006C2.45 2 2 2.45 2 3.006v9.988C2 13.55 2.45 14 3.006 14h9.988C13.55 14 14 13.55 14 12.994V5H2V4h12zm-3-3h1.994C14.102 1 15 1.897 15 3.006v9.988A2.005 2.005 0 0 1 12.994 15H3.006A2.005 2.005 0 0 1 1 12.994V3.006C1 1.898 1.897 1 3.006 1H5V0h1v1h4V0h1v1zM4 7h2v1H4V7zm3 0h2v1H7V7zm3 0h2v1h-2V7zM4 9h2v1H4V9zm3 0h2v1H7V9zm3 0h2v1h-2V9zm-6 2h2v1H4v-1zm3 0h2v1H7v-1zm3 0h2v1h-2v-1z"
                                                      fillRule="evenodd"
                                                    />
                                                  </svg>
                                                </EuiIconCalendar>
                                              </EuiIcon>
                                            </span>
                                          </span>
                                        </EuiButtonContent>
                                      </button>
                                    </EuiButtonEmpty>
                                  </div>
                                </div>
                              </EuiPopover>
                            </EuiQuickSelectPopover>
                            <div
                              className="euiFormControlLayout__childrenWrapper"
                            >
                              <EuiDatePickerRange
                                className="euiDatePickerRange--inGroup"
                                endDateControl={<div />}
                                iconType={false}
                                isCustom={true}
                                startDateControl={<div />}
                              >
                                <div
                                  className="euiDatePickerRange euiDatePickerRange--inGroup"
                                >
                                  <button
                                    className="euiSuperDatePicker__prettyFormat"
                                    data-test-subj="superDatePickerShowDatesButton"
                                    disabled={false}
                                    onClick={[Function]}
                                  >
                                    Last 5 minutes
                                    <span
                                      className="euiSuperDatePicker__prettyFormatLink"
                                    >
                                      <EuiI18n
                                        default="Show dates"
                                        token="euiSuperDatePicker.showDatesButtonLabel"
                                      >
                                        Show dates
                                      </EuiI18n>
                                    </span>
                                  </button>
                                </div>
                              </EuiDatePickerRange>
                              <EuiFormControlLayoutIcons />
                            </div>
                          </div>
                        </EuiFormControlLayout>
                      </div>
                    </EuiFlexItem>
                  </div>
                </EuiFlexGroup>
              </EuiSuperDatePicker>
            </div>
          </EuiFlexItem>
          <EuiFlexItem
            grow={false}
          >
            <div
              className="euiFlexItem euiFlexItem--flexGrowZero"
            >
              <EuiButton
                data-click-metric-element="trace_analytics.refresh_button"
                data-test-subj="superDatePickerApplyTimeButton"
                iconType="refresh"
                onClick={[Function]}
              >
                <EuiButtonDisplay
                  baseClassName="euiButton"
                  data-click-metric-element="trace_analytics.refresh_button"
                  data-test-subj="superDatePickerApplyTimeButton"
                  disabled={false}
                  element="button"
                  iconType="refresh"
                  isDisabled={false}
                  onClick={[Function]}
                  type="button"
                >
                  <button
                    className="euiButton euiButton--primary"
                    data-click-metric-element="trace_analytics.refresh_button"
                    data-test-subj="superDatePickerApplyTimeButton"
                    disabled={false}
                    onClick={[Function]}
                    style={
                      Object {
                        "minWidth": undefined,
                      }
                    }
                    type="button"
                  >
                    <EuiButtonContent
                      className="euiButton__content"
                      iconSide="left"
                      iconType="refresh"
                      textProps={
                        Object {
                          "className": "euiButton__text",
                        }
                      }
                    >
                      <span
                        className="euiButtonContent euiButton__content"
                      >
                        <EuiIcon
                          className="euiButtonContent__icon"
                          color="inherit"
                          size="m"
                          type="refresh"
                        >
                          <EuiIconRefresh
                            aria-hidden={true}
                            className="euiIcon euiIcon--medium euiIcon--inherit euiButtonContent__icon"
                            focusable="false"
                            role="img"
                            style={null}
                          >
                            <svg
                              aria-hidden={true}
                              className="euiIcon euiIcon--medium euiIcon--inherit euiButtonContent__icon"
                              focusable="false"
                              height={16}
                              role="img"
                              style={null}
                              viewBox="0 0 16 16"
                              width={16}
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                d="M11.228 2.942a.5.5 0 1 1-.538.842A5 5 0 1 0 13 8a.5.5 0 1 1 1 0 6 6 0 1 1-2.772-5.058ZM14 1.5v3A1.5 1.5 0 0 1 12.5 6h-3a.5.5 0 0 1 0-1h3a.5.5 0 0 0 .5-.5v-3a.5.5 0 1 1 1 0Z"
                              />
                            </svg>
                          </EuiIconRefresh>
                        </EuiIcon>
                        <span
                          className="euiButton__text"
                        >
                          Refresh
                        </span>
                      </span>
                    </EuiButtonContent>
                  </button>
                </EuiButtonDisplay>
              </EuiButton>
            </div>
          </EuiFlexItem>
        </div>
      </EuiFlexGroup>
      <EuiSpacer
        size="s"
      >
        <div
          className="euiSpacer euiSpacer--s"
        />
      </EuiSpacer>
      <Filters
        appConfigs={Array []}
        filters={Array []}
        mode="data_prepper"
        page="services"
        setFilters={
          [MockFunction] {
            "calls": Array [
              Array [
                Array [],
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": undefined,
              },
            ],
          }
        }
      >
        <EuiFlexGroup
          alignItems="center"
          gutterSize="xs"
          responsive={false}
          style={
            Object {
              "minHeight": 32,
            }
          }
        >
          <div
            className="euiFlexGroup euiFlexGroup--gutterExtraSmall euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow"
            style={
              Object {
                "minHeight": 32,
              }
            }
          >
            <EuiFlexItem
              grow={false}
            >
              <div
                className="euiFlexItem euiFlexItem--flexGrowZero"
              >
                <GlobalFilterButton>
                  <EuiPopover
                    anchorPosition="rightUp"
                    button={
                      <EuiButtonIcon
                        aria-label="Change all filters"
                        iconType="filter"
                        onClick={[Function]}
                        title="Change all filters"
                      />
                    }
                    closePopover={[Function]}
                    data-test-subj="global-filter-button"
                    display="inlineBlock"
                    hasArrow={true}
                    isOpen={false}
                    ownFocus={true}
                    panelPaddingSize="none"
                    withTitle={true}
                  >
                    <div
                      className="euiPopover euiPopover--anchorRightUp"
                      data-test-subj="global-filter-button"
                      withTitle={true}
                    >
                      <div
                        className="euiPopover__anchor"
                      >
                        <EuiButtonIcon
                          aria-label="Change all filters"
                          iconType="filter"
                          onClick={[Function]}
                          title="Change all filters"
                        >
                          <button
                            aria-label="Change all filters"
                            className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--xSmall"
                            disabled={false}
                            onClick={[Function]}
                            title="Change all filters"
                            type="button"
                          >
                            <EuiIcon
                              aria-hidden="true"
                              className="euiButtonIcon__icon"
                              color="inherit"
                              size="m"
                              type="filter"
                            >
                              <EuiIconFilter
                                aria-hidden={true}
                                className="euiIcon euiIcon--medium euiIcon--inherit euiButtonIcon__icon"
                                focusable="false"
                                role="img"
                                style={null}
                              >
                                <svg
                                  aria-hidden={true}
                                  className="euiIcon euiIcon--medium euiIcon--inherit euiButtonIcon__icon"
                                  focusable="false"
                                  height={16}
                                  role="img"
                                  style={null}
                                  viewBox="0 0 16 16"
                                  width={16}
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <path
                                    d="M7.999 15.999a8 8 0 1 1 0-16 8 8 0 0 1 0 16ZM8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14ZM3.5 5h9a.5.5 0 1 1 0 1h-9a.5.5 0 0 1 0-1Zm2 3h5a.5.5 0 1 1 0 1h-5a.5.5 0 0 1 0-1Zm2 3h1a.5.5 0 1 1 0 1h-1a.5.5 0 1 1 0-1Z"
                                    fillRule="evenodd"
                                  />
                                </svg>
                              </EuiIconFilter>
                            </EuiIcon>
                          </button>
                        </EuiButtonIcon>
                      </div>
                    </div>
                  </EuiPopover>
                </GlobalFilterButton>
              </div>
            </EuiFlexItem>
            <EuiFlexItem
              grow={false}
            >
              <div
                className="euiFlexItem euiFlexItem--flexGrowZero"
              >
                <AddFilterButton>
                  <EuiPopover
                    anchorPosition="downLeft"
                    button={
                      <EuiButtonEmpty
                        onClick={[Function]}
                        size="xs"
                      >
                        + Add filter
                      </EuiButtonEmpty>
                    }
                    closePopover={[Function]}
                    data-test-subj="addfilter"
                    display="inlineBlock"
                    hasArrow={true}
                    isOpen={false}
                    ownFocus={true}
                    panelPaddingSize="m"
                    withTitle={true}
                  >
                    <div
                      className="euiPopover euiPopover--anchorDownLeft"
                      data-test-subj="addfilter"
                      withTitle={true}
                    >
                      <div
                        className="euiPopover__anchor"
                      >
                        <EuiButtonEmpty
                          onClick={[Function]}
                          size="xs"
                        >
                          <button
                            className="euiButtonEmpty euiButtonEmpty--primary euiButtonEmpty--xSmall"
                            disabled={false}
                            onClick={[Function]}
                            type="button"
                          >
                            <EuiButtonContent
                              className="euiButtonEmpty__content"
                              iconSide="left"
                              iconSize="s"
                              textProps={
                                Object {
                                  "className": "euiButtonEmpty__text",
                                }
                              }
                            >
                              <span
                                className="euiButtonContent euiButtonEmpty__content"
                              >
                                <span
                                  className="euiButtonEmpty__text"
                                >
                                  + Add filter
                                </span>
                              </span>
                            </EuiButtonContent>
                          </button>
                        </EuiButtonEmpty>
                      </div>
                    </div>
                  </EuiPopover>
                </AddFilterButton>
              </div>
            </EuiFlexItem>
          </div>
        </EuiFlexGroup>
      </Filters>
    </SearchBar>
    <EuiSpacer
      size="m"
    >
      <div
        className="euiSpacer euiSpacer--m"
      />
    </EuiSpacer>
    <ServicesTable
      addFilter={[Function]}
      dataPrepperIndicesExist={true}
      items={Array []}
      loading={true}
      mode="data_prepper"
      nameColumnAction={[Function]}
      setRedirect={[Function]}
      traceColumnAction={[Function]}
    >
      <EuiPanel>
        <div
          className="euiPanel euiPanel--paddingMedium euiPanel--borderRadiusMedium euiPanel--plain euiPanel--hasShadow"
        >
          <EuiFlexGroup
            alignItems="center"
            gutterSize="s"
          >
            <div
              className="euiFlexGroup euiFlexGroup--gutterSmall euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow euiFlexGroup--responsive"
            >
              <EuiFlexItem
                grow={10}
              >
                <div
                  className="euiFlexItem euiFlexItem--flexGrow10"
                >
                  <PanelTitle
                    title="Services"
                    totalItems={0}
                  >
                    <EuiText
                      size="m"
                    >
                      <div
                        className="euiText euiText--medium"
                      >
                        <span
                          className="panel-title"
                        >
                          Services
                        </span>
                        <span
                          className="panel-title-count"
                        >
                           (0)
                        </span>
                      </div>
                    </EuiText>
                  </PanelTitle>
                </div>
              </EuiFlexItem>
            </div>
          </EuiFlexGroup>
          <EuiSpacer
            size="m"
          >
            <div
              className="euiSpacer euiSpacer--m"
            />
          </EuiSpacer>
          <EuiHorizontalRule
            margin="none"
          >
            <hr
              className="euiHorizontalRule euiHorizontalRule--full"
            />
          </EuiHorizontalRule>
          <NoMatchMessage
            size="xl"
          >
            <EuiSpacer
              size="xl"
            >
              <div
                className="euiSpacer euiSpacer--xl"
              />
            </EuiSpacer>
            <EuiEmptyPrompt
              body={
                <EuiText>
                  No data matches the selected filter. Clear the filter and/or increase the time range to see more results.
                </EuiText>
              }
              title={
                <h2>
                  No matches
                </h2>
              }
            >
              <div
                className="euiEmptyPrompt"
              >
                <EuiTitle
                  size="m"
                >
                  <h2
                    className="euiTitle euiTitle--medium"
                  >
                    No matches
                  </h2>
                </EuiTitle>
                <EuiTextColor
                  color="subdued"
                >
                  <span
                    className="euiTextColor euiTextColor--subdued"
                  >
                    <EuiSpacer
                      size="m"
                    >
                      <div
                        className="euiSpacer euiSpacer--m"
                      />
                    </EuiSpacer>
                    <EuiText>
                      <div
                        className="euiText euiText--medium"
                      >
                        <EuiText>
                          <div
                            className="euiText euiText--medium"
                          >
                            No data matches the selected filter. Clear the filter and/or increase the time range to see more results.
                          </div>
                        </EuiText>
                      </div>
                    </EuiText>
                  </span>
                </EuiTextColor>
              </div>
            </EuiEmptyPrompt>
            <EuiSpacer
              size="xl"
            >
              <div
                className="euiSpacer euiSpacer--xl"
              />
            </EuiSpacer>
          </NoMatchMessage>
        </div>
      </EuiPanel>
    </ServicesTable>
    <EuiSpacer
      size="m"
    >
      <div
        className="euiSpacer euiSpacer--m"
      />
    </EuiSpacer>
    <ServiceMap
      addFilter={[Function]}
      currService=""
      idSelected="latency"
      page="services"
      serviceMap={Object {}}
      setIdSelected={[Function]}
    >
      <EuiPanel>
        <div
          className="euiPanel euiPanel--paddingMedium euiPanel--borderRadiusMedium euiPanel--plain euiPanel--hasShadow"
        >
          <PanelTitle
            title="Service map"
          >
            <EuiText
              size="m"
            >
              <div
                className="euiText euiText--medium"
              >
                <span
                  className="panel-title"
                >
                  Service map
                </span>
              </div>
            </EuiText>
          </PanelTitle>
          <EuiSpacer
            size="m"
          >
            <div
              className="euiSpacer euiSpacer--m"
            />
          </EuiSpacer>
          <EuiButtonGroup
            buttonSize="s"
            color="text"
            idSelected="latency"
            onChange={[Function]}
            options={
              Array [
                Object {
                  "id": "latency",
                  "label": "Duration",
                },
                Object {
                  "id": "error_rate",
                  "label": "Errors",
                },
                Object {
                  "id": "throughput",
                  "label": "Request Rate",
                },
              ]
            }
          >
            <fieldset
              className="euiButtonGroup euiButtonGroup--small euiButtonGroup--text"
              disabled={false}
            >
              <EuiScreenReaderOnly>
                <legend
                  className="euiScreenReaderOnly"
                />
              </EuiScreenReaderOnly>
              <div
                className="euiButtonGroup__buttons"
              >
                <EuiButtonGroupButton
                  color="text"
                  element="label"
                  id="latency"
                  isDisabled={false}
                  isIconOnly={false}
                  isSelected={true}
                  key="0"
                  label="Duration"
                  name="random_html_id"
                  onChange={[Function]}
                  size="s"
                >
                  <EuiButtonDisplay
                    baseClassName="euiButtonGroupButton"
                    className="euiButtonGroupButton-isSelected"
                    color="text"
                    element="label"
                    fill={true}
                    htmlFor="random_html_id"
                    isDisabled={false}
                    onClick={[Function]}
                    size="s"
                    textProps={
                      Object {
                        "className": "euiButtonGroupButton__textShift",
                        "data-text": "Duration",
                        "ref": [Function],
                        "title": "Duration",
                      }
                    }
                  >
                    <label
                      className="euiButtonGroupButton euiButtonGroupButton--text euiButtonGroupButton--small euiButtonGroupButton--fill euiButtonGroupButton-isSelected"
                      disabled={false}
                      htmlFor="random_html_id"
                      onClick={[Function]}
                      style={
                        Object {
                          "minWidth": undefined,
                        }
                      }
                    >
                      <EuiButtonContent
                        className="euiButton__content"
                        iconSide="left"
                        textProps={
                          Object {
                            "className": "euiButton__text euiButtonGroupButton__textShift",
                            "data-text": "Duration",
                            "ref": [Function],
                            "title": "Duration",
                          }
                        }
                      >
                        <span
                          className="euiButtonContent euiButton__content"
                        >
                          <span
                            className="euiButton__text euiButtonGroupButton__textShift"
                            data-text="Duration"
                            title="Duration"
                          >
                            <input
                              checked={true}
                              className="euiScreenReaderOnly"
                              data-test-subj="latency"
                              disabled={false}
                              id="random_html_id"
                              name="random_html_id"
                              onChange={[Function]}
                              type="radio"
                            />
                            Duration
                          </span>
                        </span>
                      </EuiButtonContent>
                    </label>
                  </EuiButtonDisplay>
                </EuiButtonGroupButton>
                <EuiButtonGroupButton
                  color="text"
                  element="label"
                  id="error_rate"
                  isDisabled={false}
                  isIconOnly={false}
                  isSelected={false}
                  key="1"
                  label="Errors"
                  name="random_html_id"
                  onChange={[Function]}
                  size="s"
                >
                  <EuiButtonDisplay
                    baseClassName="euiButtonGroupButton"
                    className=""
                    color="text"
                    element="label"
                    fill={false}
                    htmlFor="random_html_id"
                    isDisabled={false}
                    onClick={[Function]}
                    size="s"
                    textProps={
                      Object {
                        "className": "euiButtonGroupButton__textShift",
                        "data-text": "Errors",
                        "ref": [Function],
                        "title": "Errors",
                      }
                    }
                  >
                    <label
                      className="euiButtonGroupButton euiButtonGroupButton--text euiButtonGroupButton--small"
                      disabled={false}
                      htmlFor="random_html_id"
                      onClick={[Function]}
                      style={
                        Object {
                          "minWidth": undefined,
                        }
                      }
                    >
                      <EuiButtonContent
                        className="euiButton__content"
                        iconSide="left"
                        textProps={
                          Object {
                            "className": "euiButton__text euiButtonGroupButton__textShift",
                            "data-text": "Errors",
                            "ref": [Function],
                            "title": "Errors",
                          }
                        }
                      >
                        <span
                          className="euiButtonContent euiButton__content"
                        >
                          <span
                            className="euiButton__text euiButtonGroupButton__textShift"
                            data-text="Errors"
                            title="Errors"
                          >
                            <input
                              checked={false}
                              className="euiScreenReaderOnly"
                              data-test-subj="error_rate"
                              disabled={false}
                              id="random_html_id"
                              name="random_html_id"
                              onChange={[Function]}
                              type="radio"
                            />
                            Errors
                          </span>
                        </span>
                      </EuiButtonContent>
                    </label>
                  </EuiButtonDisplay>
                </EuiButtonGroupButton>
                <EuiButtonGroupButton
                  color="text"
                  element="label"
                  id="throughput"
                  isDisabled={false}
                  isIconOnly={false}
                  isSelected={false}
                  key="2"
                  label="Request Rate"
                  name="random_html_id"
                  onChange={[Function]}
                  size="s"
                >
                  <EuiButtonDisplay
                    baseClassName="euiButtonGroupButton"
                    className=""
                    color="text"
                    element="label"
                    fill={false}
                    htmlFor="random_html_id"
                    isDisabled={false}
                    onClick={[Function]}
                    size="s"
                    textProps={
                      Object {
                        "className": "euiButtonGroupButton__textShift",
                        "data-text": "Request Rate",
                        "ref": [Function],
                        "title": "Request Rate",
                      }
                    }
                  >
                    <label
                      className="euiButtonGroupButton euiButtonGroupButton--text euiButtonGroupButton--small"
                      disabled={false}
                      htmlFor="random_html_id"
                      onClick={[Function]}
                      style={
                        Object {
                          "minWidth": undefined,
                        }
                      }
                    >
                      <EuiButtonContent
                        className="euiButton__content"
                        iconSide="left"
                        textProps={
                          Object {
                            "className": "euiButton__text euiButtonGroupButton__textShift",
                            "data-text": "Request Rate",
                            "ref": [Function],
                            "title": "Request Rate",
                          }
                        }
                      >
                        <span
                          className="euiButtonContent euiButton__content"
                        >
                          <span
                            className="euiButton__text euiButtonGroupButton__textShift"
                            data-text="Request Rate"
                            title="Request Rate"
                          >
                            <input
                              checked={false}
                              className="euiScreenReaderOnly"
                              data-test-subj="throughput"
                              disabled={false}
                              id="random_html_id"
                              name="random_html_id"
                              onChange={[Function]}
                              type="radio"
                            />
                            Request Rate
                          </span>
                        </span>
                      </EuiButtonContent>
                    </label>
                  </EuiButtonDisplay>
                </EuiButtonGroupButton>
              </div>
            </fieldset>
          </EuiButtonGroup>
          <EuiHorizontalRule
            margin="m"
          >
            <hr
              className="euiHorizontalRule euiHorizontalRule--full euiHorizontalRule--marginMedium"
            />
          </EuiHorizontalRule>
          <EuiFlexGroup
            alignItems="center"
            gutterSize="s"
          >
            <div
              className="euiFlexGroup euiFlexGroup--gutterSmall euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow euiFlexGroup--responsive"
            >
              <EuiFlexItem
                grow={false}
              >
                <div
                  className="euiFlexItem euiFlexItem--flexGrowZero"
                >
                  <EuiText>
                    <div
                      className="euiText euiText--medium"
                    >
                      Focus on
                    </div>
                  </EuiText>
                </div>
              </EuiFlexItem>
              <EuiFlexItem>
                <div
                  className="euiFlexItem"
                >
                  <EuiFieldSearch
                    compressed={false}
                    fullWidth={false}
                    incremental={false}
                    isClearable={true}
                    isInvalid={false}
                    isLoading={false}
                    onChange={[Function]}
                    onSearch={[Function]}
                    placeholder="Service name"
                    value=""
                  >
                    <EuiFormControlLayout
                      compressed={false}
                      fullWidth={false}
                      icon="search"
                      isLoading={false}
                    >
                      <div
                        className="euiFormControlLayout"
                      >
                        <div
                          className="euiFormControlLayout__childrenWrapper"
                        >
                          <EuiValidatableControl
                            isInvalid={false}
                          >
                            <input
                              className="euiFieldSearch"
                              onChange={[Function]}
                              onKeyUp={[Function]}
                              placeholder="Service name"
                              type="search"
                              value=""
                            />
                          </EuiValidatableControl>
                          <EuiFormControlLayoutIcons
                            compressed={false}
                            icon="search"
                            isLoading={false}
                          >
                            <div
                              className="euiFormControlLayoutIcons"
                            >
                              <EuiFormControlLayoutCustomIcon
                                size="m"
                                type="search"
                              >
                                <span
                                  className="euiFormControlLayoutCustomIcon"
                                >
                                  <EuiIcon
                                    aria-hidden="true"
                                    className="euiFormControlLayoutCustomIcon__icon"
                                    size="m"
                                    type="search"
                                  >
                                    <EuiIconSearch
                                      aria-hidden={true}
                                      className="euiIcon euiIcon--medium euiFormControlLayoutCustomIcon__icon"
                                      focusable="false"
                                      role="img"
                                      style={null}
                                    >
                                      <svg
                                        aria-hidden={true}
                                        className="euiIcon euiIcon--medium euiFormControlLayoutCustomIcon__icon"
                                        focusable="false"
                                        height={16}
                                        role="img"
                                        style={null}
                                        viewBox="0 0 16 16"
                                        width={16}
                                        xmlns="http://www.w3.org/2000/svg"
                                      >
                                        <path
                                          d="m11.271 11.978 3.872 3.873a.502.502 0 0 0 .708 0 .502.502 0 0 0 0-.708l-3.565-3.564c2.38-2.747 2.267-6.923-.342-9.532-2.73-2.73-7.17-2.73-9.898 0-2.728 2.729-2.728 7.17 0 9.9a6.955 6.955 0 0 0 4.949 2.05.5.5 0 0 0 0-1 5.96 5.96 0 0 1-4.242-1.757 6.01 6.01 0 0 1 0-8.486c2.337-2.34 6.143-2.34 8.484 0a6.01 6.01 0 0 1 0 8.486.5.5 0 0 0 .034.738Z"
                                        />
                                      </svg>
                                    </EuiIconSearch>
                                  </EuiIcon>
                                </span>
                              </EuiFormControlLayoutCustomIcon>
                            </div>
                          </EuiFormControlLayoutIcons>
                        </div>
                      </div>
                    </EuiFormControlLayout>
                  </EuiFieldSearch>
                </div>
              </EuiFlexItem>
            </div>
          </EuiFlexGroup>
          <EuiSpacer>
            <div
              className="euiSpacer euiSpacer--l"
            />
          </EuiSpacer>
          <div
            style={
              Object {
                "minHeight": 434,
              }
            }
          >
            <NoMatchMessage
              size="s"
            >
              <EuiSpacer
                size="s"
              >
                <div
                  className="euiSpacer euiSpacer--s"
                />
              </EuiSpacer>
              <EuiEmptyPrompt
                body={
                  <EuiText>
                    No data matches the selected filter. Clear the filter and/or increase the time range to see more results.
                  </EuiText>
                }
                title={
                  <h2>
                    No matches
                  </h2>
                }
              >
                <div
                  className="euiEmptyPrompt"
                >
                  <EuiTitle
                    size="m"
                  >
                    <h2
                      className="euiTitle euiTitle--medium"
                    >
                      No matches
                    </h2>
                  </EuiTitle>
                  <EuiTextColor
                    color="subdued"
                  >
                    <span
                      className="euiTextColor euiTextColor--subdued"
                    >
                      <EuiSpacer
                        size="m"
                      >
                        <div
                          className="euiSpacer euiSpacer--m"
                        />
                      </EuiSpacer>
                      <EuiText>
                        <div
                          className="euiText euiText--medium"
                        >
                          <EuiText>
                            <div
                              className="euiText euiText--medium"
                            >
                              No data matches the selected filter. Clear the filter and/or increase the time range to see more results.
                            </div>
                          </EuiText>
                        </div>
                      </EuiText>
                    </span>
                  </EuiTextColor>
                </div>
              </EuiEmptyPrompt>
              <EuiSpacer
                size="s"
              >
                <div
                  className="euiSpacer euiSpacer--s"
                />
              </EuiSpacer>
            </NoMatchMessage>
          </div>
        </div>
      </EuiPanel>
    </ServiceMap>
    <EuiSpacer
      size="m"
    >
      <div
        className="euiSpacer euiSpacer--m"
      />
    </EuiSpacer>
    <EuiPanel>
      <div
        className="euiPanel euiPanel--paddingMedium euiPanel--borderRadiusMedium euiPanel--plain euiPanel--hasShadow"
      >
        <EuiAccordion
          arrowDisplay="left"
          buttonContent="Trace Groups"
          data-test-subj="trace-groups-service-operation-accordian"
          forceState="closed"
          id="accordion1"
          initialIsOpen={false}
          isLoading={false}
          isLoadingMessage={false}
          onToggle={[Function]}
          paddingSize="none"
        >
          <div
            className="euiAccordion"
            data-test-subj="trace-groups-service-operation-accordian"
            onToggle={[Function]}
          >
            <div
              className="euiAccordion__triggerWrapper"
            >
              <button
                aria-controls="accordion1"
                aria-expanded={false}
                className="euiAccordion__button"
                id="random_html_id"
                onClick={[Function]}
                type="button"
              >
                <span
                  className="euiAccordion__iconWrapper"
                >
                  <EuiIcon
                    className="euiAccordion__icon"
                    size="m"
                    type="arrowRight"
                  >
                    <EuiIconArrowRight
                      aria-hidden={true}
                      className="euiIcon euiIcon--medium euiAccordion__icon"
                      focusable="false"
                      role="img"
                      style={null}
                    >
                      <svg
                        aria-hidden={true}
                        className="euiIcon euiIcon--medium euiAccordion__icon"
                        focusable="false"
                        height={16}
                        role="img"
                        style={null}
                        viewBox="0 0 16 16"
                        width={16}
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="m5.157 13.069 4.611-4.685a.546.546 0 0 0 0-.768L5.158 2.93a.552.552 0 0 1 0-.771.53.53 0 0 1 .759 0l4.61 4.684c.631.641.63 1.672 0 2.312l-4.61 4.684a.53.53 0 0 1-.76 0 .552.552 0 0 1 0-.771Z"
                          fillRule="nonzero"
                        />
                      </svg>
                    </EuiIconArrowRight>
                  </EuiIcon>
                </span>
                <span
                  className="euiIEFlexWrapFix"
                >
                  Trace Groups
                </span>
              </button>
            </div>
            <div
              aria-labelledby="random_html_id"
              className="euiAccordion__childWrapper"
              id="accordion1"
              role="region"
              tabIndex={-1}
            >
              <EuiResizeObserver
                onResize={[Function]}
              >
                <div>
                  <div
                    className=""
                  >
                    <EuiSpacer
                      size="m"
                    >
                      <div
                        className="euiSpacer euiSpacer--m"
                      />
                    </EuiSpacer>
                  </div>
                </div>
              </EuiResizeObserver>
            </div>
          </div>
        </EuiAccordion>
      </div>
    </EuiPanel>
  </ServicesContent>
</Services>
`;
