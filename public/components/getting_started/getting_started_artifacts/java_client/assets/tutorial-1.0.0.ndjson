{"attributes":{"description":"Getting started for java client instructions v","kibanaSavedObjectMeta":{"searchSourceJSON":"{\"query\":{\"query\":\"\",\"language\":\"kuery\"},\"filter\":[]}"},"title":"java_client","uiStateJSON":"{}","version":1,"visState":"{\"title\":\"java_client\",\"type\":\"markdown\",\"aggs\":[],\"params\":{\"fontSize\":12,\"openLinksInNewTab\":false,\"markdown\":\"Here's a similar getting started guide for Java based on the provided Python instructions.\\n\\n# Java Client Integration\\n\\nThis guide provides instructions and a tutorial on setting up the Java OpenSearch client and logging application telemetry into OpenSearch.\\n\\n## Logging with OpenSearch in Java:\\n\\nLogging is an important aspect of software development, and OpenSearch is a robust and scalable solution for storing and analyzing logs efficiently. This guide walks you through integrating OpenSearch as a storage and analytics component in your Java project for effective logging.\\n\\n### Install Java Libraries\\n\\nAdd the OpenSearch Java client to your Maven project's `pom.xml` to interact with OpenSearch:\\n\\n```xml\\n<dependency>\\n  <groupId>org.opensearch.client</groupId>\\n  <artifactId>opensearch-rest-client</artifactId>\\n  <version>2.15.0</version>\\n</dependency>\\n\\n<dependency>\\n  <groupId>org.opensearch.client</groupId>\\n  <artifactId>opensearch-java</artifactId>\\n  <version>2.6.0</version>\\n</dependency>\\n```\\nSee additional documentation [here](https://opensearch.org/docs/latest/clients/java/).\\n\\n## Integrating OpenSearch with Your Java Project\\n\\n### Step 1: Import the OpenSearch Client\\n\\nIn your Java project, use a class called IndexData, which is a simple Java class that stores basic data and methods.\\nFor your own OpenSearch cluster, you might find that you need a more robust class to store your data.\\n\\n\\n\\n```java\\nstatic class IndexData {\\n  private String firstName;\\n  private String lastName;\\n\\n  public IndexData(String firstName, String lastName) {\\n    this.firstName = firstName;\\n    this.lastName = lastName;\\n  }\\n\\n  public String getFirstName() {\\n    return firstName;\\n  }\\n\\n  public void setFirstName(String firstName) {\\n    this.firstName = firstName;\\n  }\\n\\n  public String getLastName() {\\n    return lastName;\\n  }\\n\\n  public void setLastName(String lastName) {\\n    this.lastName = lastName;\\n  }\\n\\n  @Override\\n  public String toString() {\\n    return String.format(\\\"IndexData{first name='%s', last name='%s'}\\\", firstName, lastName);\\n  }\\n}\\n```\\n\\n### Step 2: Establish a Connection\\n\\nInitializing the client with SSL and TLS enabled using RestClient Transport\\nThis code example uses basic credentials that come with the default OpenSearch configuration.\\nIf youâ€™re using the Java client with your own OpenSearch cluster, be sure to change the code so that it uses your own credentials.\\n\\n\\n```java\\nimport org.apache.http.HttpHost;\\nimport org.apache.http.auth.AuthScope;\\nimport org.apache.http.auth.UsernamePasswordCredentials;\\nimport org.apache.http.impl.nio.client.HttpAsyncClientBuilder;\\nimport org.apache.http.impl.client.BasicCredentialsProvider;\\nimport org.opensearch.client.RestClient;\\nimport org.opensearch.client.RestClientBuilder;\\nimport org.opensearch.client.json.jackson.JacksonJsonpMapper;\\nimport org.opensearch.client.opensearch.OpenSearchClient;\\nimport org.opensearch.client.transport.OpenSearchTransport;\\nimport org.opensearch.client.transport.rest_client.RestClientTransport;\\n\\npublic class OpenSearchClientExample {\\n  public static void main(String[] args) throws Exception {\\n    System.setProperty(\\\"javax.net.ssl.trustStore\\\", \\\"/full/path/to/keystore\\\");\\n    System.setProperty(\\\"javax.net.ssl.trustStorePassword\\\", \\\"password-to-keystore\\\");\\n\\n    final HttpHost host = new HttpHost(\\\"https\\\", \\\"localhost\\\", 9200);\\n    final BasicCredentialsProvider credentialsProvider = new BasicCredentialsProvider();\\n    //Only for demo purposes. Don't specify your credentials in code.\\n    credentialsProvider.setCredentials(new AuthScope(host), new UsernamePasswordCredentials(\\\"admin\\\", \\\"admin\\\".toCharArray()));\\n\\n    //Initialize the client with SSL and TLS enabled\\n    final RestClient restClient = RestClient.builder(host).\\n            setHttpClientConfigCallback(new RestClientBuilder.HttpClientConfigCallback() {\\n              @Override\\n              public HttpAsyncClientBuilder customizeHttpClient(HttpAsyncClientBuilder httpClientBuilder) {\\n                return httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider);\\n              }\\n            }).build();\\n\\n    final OpenSearchTransport transport = new RestClientTransport(restClient, new JacksonJsonpMapper());\\n    final OpenSearchClient client = new OpenSearchClient(transport);\\n  }\\n}\\n```\\n\\n### Step 3: Indexing Logs\\nYou can create an index with non-default settings using the following code:\\n```java\\nString index = \\\"sample-index\\\";\\n        CreateIndexRequest createIndexRequest = new CreateIndexRequest.Builder().index(index).build();\\n        client.indices().create(createIndexRequest);\\n\\n        IndexSettings indexSettings = new IndexSettings.Builder().autoExpandReplicas(\\\"0-all\\\").build();\\n        PutIndicesSettingsRequest putIndicesSettingsRequest = new PutIndicesSettingsRequest.Builder().index(index).value(indexSettings).build();\\n        client.indices().putSettings(putIndicesSettingsRequest);\\n```\\n\\nIndex your logs into OpenSearch:\\n\\n```java\\nIndexData indexData = new IndexData(\\\"first_name\\\", \\\"Bruce\\\");\\nIndexRequest<IndexData> indexRequest = new IndexRequest.Builder<IndexData>().index(index).id(\\\"1\\\").document(indexData).build();\\nclient.index(indexRequest);\\n```\\n\\n### Step 4: Querying Logs\\n\\nRetrieve logs using OpenSearch's powerful search capabilities:\\n\\n```java\\nSearchResponse<IndexData> searchResponse = client.search(s -> s.index(index), IndexData.class);\\nfor (int i = 0; i< searchResponse.hits().hits().size(); i++) {\\n        System.out.println(searchResponse.hits().hits().get(i).source());\\n        }\\n```\\n\\n## Best Practices for Effective Logging\\n\\n1. **Descriptive Log Messages**: Include clear and detailed information.\\n2. **Appropriate Log Levels**: Use different levels (INFO, DEBUG, ERROR) to categorize log messages.\\n3. **Timestamps**: Always include timestamps for chronological analysis.\\n4. **Contextual Information**: Add details like module, function, or user IDs.\\n5. **Avoid Redundant Logging**: Balance between sufficient information and avoiding overload.\\n6. **Secure Sensitive Information**: Do not log sensitive data in plain text.\\n7. **Structured Logging**: Use JSON for consistent log formats.\\n\\n## Advanced Features of OpenSearch\\n\\n- **Index Patterns and Mappings**: Optimize log data structure for better analysis and retrieval.\\n- **Visualization with Dashboards**: Create interactive dashboards for real-time log insights.\\n\\n# How to build an Application Monitor Dashboard\\n\\nBased on the ingested logs, let's review the process of generating an informative monitor dashboard for the application logs:\\n\\n## Step-by-Step Tutorial: Creating an OpenSearch Dashboard for Application Logs\\n\\n### 1. Log in to OpenSearch Dashboards\\n\\n- Navigate to OpenSearch Dashboards.\\n- Log in and verify the logs index was created and contains logs data.\\n- Go to the Discover tab, select the index name, and view the data.\\n\\n### 2. Create an Index Pattern\\n\\n- Go to 'Management' > 'Index Patterns'.\\n- Click 'Create Index Pattern' and enter the pattern (e.g., logs-*).\\n- Select the timestamp field (e.g., @timestamp) for time-based data.\\n- Save the index pattern.\\n\\n### 3. Build Log Queries\\n\\n- Go to the 'Discover' tab.\\n- Use the search bar to filter logs, e.g., `log_level:ERROR` to find all error logs.\\n- For advanced filtering, utilize the Dashboard Query Language (DQL).\\n\\n### 4. Save Your Query\\n\\n- After refining your query, save it by clicking on the 'Save' button in the 'Discover' tab.\\n- Name your saved query for easy reference.\\n\\n### 5. Create Visualizations\\n\\n- Go to 'Visualize' > 'Create Visualization'.\\n- Select the type of visualization you want to create (e.g., bar chart, pie chart).\\n- Choose your saved query as the data source.\\n\\n### 6. Add Buckets for Data Aggregation\\n\\n- In the visualization settings, add buckets to aggregate your data. For example:\\n  - Use 'Date Histogram' for the X-axis to display logs over time.\\n  - Add other metrics or aggregations as needed.\\n\\n### 7. Split Series for Detailed Insights\\n\\n- Add another bucket to split data by specific fields, such as `service.name` or `host.name`.\\n- This will allow you to see log distributions across different services or hosts.\\n\\n### 8. Customize Visualization\\n\\n- Customize the visualization with labels, colors, and other settings to make it more informative and visually appealing.\\n\\n### 9. Save and Add to Dashboard\\n\\n- Save the visualization with a descriptive name.\\n- Navigate to the 'Dashboard' tab and create a new dashboard.\\n- Add your saved visualizations to the dashboard by selecting them from the list.\\n\\n### 10. Finalize and Share\\n\\n- Arrange the visualizations on the dashboard as desired.\\n- Save the dashboard with a meaningful name.\\n- Share the dashboard with your team by generating a shareable link or embedding it in your application.\\n\\n### Tips for Effective Dashboards\\n\\n- Use different types of visualizations to present various aspects of your log data.\\n- Regularly update the time filter to ensure you're viewing the most recent logs.\\n- Take advantage of OpenSearch Dashboards' interactive features, such as drill-downs and filters, for deeper analysis.\"}}"},"id":"128d0790-47e5-11ef-89c9-a5eb94f3bbbc","migrationVersion":{"visualization":"7.10.0"},"references":[],"type":"visualization","updated_at":"2024-07-22T04:44:25.609Z","version":"WzcyLDdd"}
{"attributes":{"description":"getting started instructions for a java client based applicative logs dashboard","hits":0,"kibanaSavedObjectMeta":{"searchSourceJSON":"{\"query\":{\"language\":\"kuery\",\"query\":\"\"},\"filter\":[]}"},"optionsJSON":"{\"hidePanelTitles\":false,\"useMargins\":true}","panelsJSON":"[{\"version\":\"2.15.0\",\"gridData\":{\"x\":0,\"y\":0,\"w\":24,\"h\":15,\"i\":\"39184cd8-b84d-48c8-821d-f749007e8bd0\"},\"panelIndex\":\"39184cd8-b84d-48c8-821d-f749007e8bd0\",\"embeddableConfig\":{},\"panelRefName\":\"panel_0\"}]","timeRestore":false,"title":"java_client-dashboard","version":1},"id":"java_client_getting-started-dashboard","migrationVersion":{"dashboard":"7.9.3"},"references":[{"id":"128d0790-47e5-11ef-89c9-a5eb94f3bbbc","name":"panel_0","type":"visualization"}],"type":"dashboard","updated_at":"2024-07-22T04:44:54.511Z","version":"WzczLDdd"}
{"attributes":{"fields":"[{\"count\":0,\"name\":\"_id\",\"type\":\"string\",\"esTypes\":[\"_id\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":false},{\"count\":0,\"name\":\"_index\",\"type\":\"string\",\"esTypes\":[\"_index\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":false},{\"count\":0,\"name\":\"_score\",\"type\":\"number\",\"scripted\":false,\"searchable\":false,\"aggregatable\":false,\"readFromDocValues\":false},{\"count\":0,\"name\":\"_source\",\"type\":\"_source\",\"esTypes\":[\"_source\"],\"scripted\":false,\"searchable\":false,\"aggregatable\":false,\"readFromDocValues\":false},{\"count\":0,\"name\":\"_type\",\"type\":\"string\",\"scripted\":false,\"searchable\":false,\"aggregatable\":false,\"readFromDocValues\":false},{\"count\":0,\"name\":\"error_code\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"function\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"level\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"message\",\"type\":\"string\",\"esTypes\":[\"text\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"count\":0,\"name\":\"module\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"source\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"timestamp\",\"type\":\"date\",\"esTypes\":[\"date\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"user_id\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true}]","timeFieldName":"timestamp","title":"applicative_logs*"},"id":"15746330-447b-11ef-99f2-2b48f7e65060","migrationVersion":{"index-pattern":"7.6.0"},"references":[],"type":"index-pattern","updated_at":"2024-07-19T21:03:51.880Z","version":"WzIxLDJd"}
{"exportedCount":3,"missingRefCount":0,"missingReferences":[]}