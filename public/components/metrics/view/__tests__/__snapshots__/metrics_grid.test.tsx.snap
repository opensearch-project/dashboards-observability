// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Metrics Grid Component renders Metrics Grid Component 1`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(Symbol.observable): [Function],
    }
  }
>
  <Connect(InnerMetricsGrid)
    chrome={
      Object {
        "addApplicationClass": [MockFunction],
        "docTitle": Object {
          "change": [MockFunction],
          "reset": [MockFunction],
        },
        "getApplicationClasses$": [MockFunction],
        "getBadge$": [MockFunction],
        "getBreadcrumbs$": [MockFunction],
        "getCustomNavLink$": [MockFunction],
        "getHeaderComponent": [MockFunction],
        "getHelpExtension$": [MockFunction],
        "getIsNavDrawerLocked$": [MockFunction],
        "getIsVisible$": [MockFunction],
        "logos": Object {
          "AnimatedMark": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_spinner_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_spinner_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_spinner_on_light.svg",
          },
          "Application": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_dashboards_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_dashboards_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_dashboards_on_light.svg",
          },
          "CenterMark": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_center_mark_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_center_mark_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_center_mark_on_light.svg",
          },
          "Mark": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_mark_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_mark_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_mark_on_light.svg",
          },
          "OpenSearch": Object {
            "dark": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_on_dark.svg",
            },
            "light": Object {
              "type": "default",
              "url": "/ui/logos/opensearch_on_light.svg",
            },
            "type": "default",
            "url": "/ui/logos/opensearch_on_light.svg",
          },
          "colorScheme": "light",
        },
        "navControls": Object {
          "getCenter$": [MockFunction],
          "getLeft$": [MockFunction],
          "getLeftBottom$": [MockFunction],
          "getRight$": [MockFunction],
          "registerCenter": [MockFunction],
          "registerLeft": [MockFunction],
          "registerLeftBottom": [MockFunction],
          "registerRight": [MockFunction],
        },
        "navGroup": Object {
          "getCurrentNavGroup$": [MockFunction],
          "getNavGroupEnabled": [MockFunction],
          "getNavGroupsMap$": [MockFunction],
          "setCurrentNavGroup": [MockFunction],
        },
        "navLinks": Object {
          "enableForcedAppSwitcherNavigation": [MockFunction],
          "get": [MockFunction],
          "getAll": [MockFunction],
          "getForceAppSwitcherNavigation$": [MockFunction],
          "getNavLinks$": [MockFunction],
          "has": [MockFunction],
          "showOnly": [MockFunction],
          "update": [MockFunction],
        },
        "recentlyAccessed": Object {
          "add": [MockFunction],
          "get": [MockFunction],
          "get$": [MockFunction],
        },
        "removeApplicationClass": [MockFunction],
        "setAppTitle": [MockFunction],
        "setBadge": [MockFunction],
        "setBreadcrumbs": [MockFunction],
        "setCustomNavLink": [MockFunction],
        "setHelpExtension": [MockFunction],
        "setHelpSupportUrl": [MockFunction],
        "setIsVisible": [MockFunction],
      }
    }
    editActionType="save"
    editMode={false}
    endTime="now"
    moveToEvents={[MockFunction]}
    onRefresh={true}
    panelVisualizations={
      Array [
        Object {
          "h": 2,
          "id": "Y4muP4QBiaYaSxpXk7r8",
          "query": Object {
            "aggregation": "avg",
            "attributesGroupBy": Array [],
            "type": "savedCustomMetric",
          },
          "savedVisualizationId": "Y4muP4QBiaYaSxpXk7r8",
          "w": 12,
          "x": 0,
          "y": 0,
        },
        Object {
          "h": 2,
          "id": "tomAP4QBiaYaSxpXALls",
          "metricType": "savedCustomMetric",
          "savedVisualizationId": "tomAP4QBiaYaSxpXALls",
          "w": 12,
          "x": 0,
          "y": 2,
        },
        Object {
          "h": 2,
          "id": "prometheus.process_resident_memory_bytes",
          "query": Object {
            "aggregation": "avg",
            "attributesGroupBy": Array [],
            "type": "prometheusMetric",
          },
          "savedVisualizationId": "prometheus.process_resident_memory_bytes",
          "w": 12,
          "x": 0,
          "y": 4,
        },
      ]
    }
    setEditActionType={[MockFunction]}
    setPanelVisualizations={[MockFunction]}
    spanParam="1h"
    startTime="now-30m"
  >
    <InnerMetricsGrid
      allMetrics={Object {}}
      chrome={
        Object {
          "addApplicationClass": [MockFunction],
          "docTitle": Object {
            "change": [MockFunction],
            "reset": [MockFunction],
          },
          "getApplicationClasses$": [MockFunction],
          "getBadge$": [MockFunction],
          "getBreadcrumbs$": [MockFunction],
          "getCustomNavLink$": [MockFunction],
          "getHeaderComponent": [MockFunction],
          "getHelpExtension$": [MockFunction],
          "getIsNavDrawerLocked$": [MockFunction],
          "getIsVisible$": [MockFunction],
          "logos": Object {
            "AnimatedMark": Object {
              "dark": Object {
                "type": "default",
                "url": "/ui/logos/opensearch_spinner_on_dark.svg",
              },
              "light": Object {
                "type": "default",
                "url": "/ui/logos/opensearch_spinner_on_light.svg",
              },
              "type": "default",
              "url": "/ui/logos/opensearch_spinner_on_light.svg",
            },
            "Application": Object {
              "dark": Object {
                "type": "default",
                "url": "/ui/logos/opensearch_dashboards_on_dark.svg",
              },
              "light": Object {
                "type": "default",
                "url": "/ui/logos/opensearch_dashboards_on_light.svg",
              },
              "type": "default",
              "url": "/ui/logos/opensearch_dashboards_on_light.svg",
            },
            "CenterMark": Object {
              "dark": Object {
                "type": "default",
                "url": "/ui/logos/opensearch_center_mark_on_dark.svg",
              },
              "light": Object {
                "type": "default",
                "url": "/ui/logos/opensearch_center_mark_on_light.svg",
              },
              "type": "default",
              "url": "/ui/logos/opensearch_center_mark_on_light.svg",
            },
            "Mark": Object {
              "dark": Object {
                "type": "default",
                "url": "/ui/logos/opensearch_mark_on_dark.svg",
              },
              "light": Object {
                "type": "default",
                "url": "/ui/logos/opensearch_mark_on_light.svg",
              },
              "type": "default",
              "url": "/ui/logos/opensearch_mark_on_light.svg",
            },
            "OpenSearch": Object {
              "dark": Object {
                "type": "default",
                "url": "/ui/logos/opensearch_on_dark.svg",
              },
              "light": Object {
                "type": "default",
                "url": "/ui/logos/opensearch_on_light.svg",
              },
              "type": "default",
              "url": "/ui/logos/opensearch_on_light.svg",
            },
            "colorScheme": "light",
          },
          "navControls": Object {
            "getCenter$": [MockFunction],
            "getLeft$": [MockFunction],
            "getLeftBottom$": [MockFunction],
            "getRight$": [MockFunction],
            "registerCenter": [MockFunction],
            "registerLeft": [MockFunction],
            "registerLeftBottom": [MockFunction],
            "registerRight": [MockFunction],
          },
          "navGroup": Object {
            "getCurrentNavGroup$": [MockFunction],
            "getNavGroupEnabled": [MockFunction],
            "getNavGroupsMap$": [MockFunction],
            "setCurrentNavGroup": [MockFunction],
          },
          "navLinks": Object {
            "enableForcedAppSwitcherNavigation": [MockFunction],
            "get": [MockFunction],
            "getAll": [MockFunction],
            "getForceAppSwitcherNavigation$": [MockFunction],
            "getNavLinks$": [MockFunction],
            "has": [MockFunction],
            "showOnly": [MockFunction],
            "update": [MockFunction],
          },
          "recentlyAccessed": Object {
            "add": [MockFunction],
            "get": [MockFunction],
            "get$": [MockFunction],
          },
          "removeApplicationClass": [MockFunction],
          "setAppTitle": [MockFunction],
          "setBadge": [MockFunction],
          "setBreadcrumbs": [MockFunction],
          "setCustomNavLink": [MockFunction],
          "setHelpExtension": [MockFunction],
          "setHelpSupportUrl": [MockFunction],
          "setIsVisible": [MockFunction],
        }
      }
      dateSpanFilter={
        Object {
          "end": "now",
          "recentlyUsedRanges": Array [],
          "resolution": "h",
          "span": 1,
          "start": "now-1d",
        }
      }
      editActionType="save"
      editMode={false}
      endTime="now"
      moveMetric={[Function]}
      moveToEvents={[MockFunction]}
      onRefresh={true}
      panelVisualizations={
        Array [
          Object {
            "h": 2,
            "id": "Y4muP4QBiaYaSxpXk7r8",
            "query": Object {
              "aggregation": "avg",
              "attributesGroupBy": Array [],
              "type": "savedCustomMetric",
            },
            "savedVisualizationId": "Y4muP4QBiaYaSxpXk7r8",
            "w": 12,
            "x": 0,
            "y": 0,
          },
          Object {
            "h": 2,
            "id": "tomAP4QBiaYaSxpXALls",
            "metricType": "savedCustomMetric",
            "savedVisualizationId": "tomAP4QBiaYaSxpXALls",
            "w": 12,
            "x": 0,
            "y": 2,
          },
          Object {
            "h": 2,
            "id": "prometheus.process_resident_memory_bytes",
            "query": Object {
              "aggregation": "avg",
              "attributesGroupBy": Array [],
              "type": "prometheusMetric",
            },
            "savedVisualizationId": "prometheus.process_resident_memory_bytes",
            "w": 12,
            "x": 0,
            "y": 4,
          },
        ]
      }
      refresh={0}
      selectedMetrics={Object {}}
      selectedMetricsIds={Array []}
      setEditActionType={[MockFunction]}
      setPanelVisualizations={[MockFunction]}
      spanParam="1h"
      startTime="now-30m"
    >
      <section
        className="metricsGrid"
      >
        <EuiDragDropContext
          onDragEnd={[Function]}
        >
          <DragDropContext
            onDragEnd={[Function]}
            onDragStart={[Function]}
          >
            <ErrorBoundary>
              <App
                contextId="0"
                dragHandleUsageInstructions="
  Press space bar to start a drag.
  When dragging you can use the arrow keys to move the item around and escape to cancel.
  Some screen readers may require you to be in focus mode or to use your pass through key
"
                onDragEnd={[Function]}
                onDragStart={[Function]}
                setCallbacks={[Function]}
              >
                <Provider
                  context={
                    Object {
                      "$$typeof": Symbol(react.context),
                      "Consumer": Object {
                        "$$typeof": Symbol(react.context),
                        "_calculateChangedBits": null,
                        "_context": [Circular],
                      },
                      "Provider": Object {
                        "$$typeof": Symbol(react.provider),
                        "_context": [Circular],
                      },
                      "_calculateChangedBits": null,
                      "_currentRenderer": Object {},
                      "_currentRenderer2": null,
                      "_currentValue": null,
                      "_currentValue2": null,
                      "_threadCount": 0,
                    }
                  }
                  store={
                    Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    }
                  }
                >
                  <EuiDroppable
                    droppableId="DROPPABLE_AREA_BARE"
                  >
                    <Connect(Droppable)
                      direction="vertical"
                      droppableId="DROPPABLE_AREA_BARE"
                      getContainerForClone={[Function]}
                      ignoreContainerClipping={false}
                      isCombineEnabled={false}
                      isDropDisabled={false}
                      mode="standard"
                      renderClone={null}
                      type="EUI_DEFAULT"
                    >
                      <Droppable
                        direction="vertical"
                        droppableId="DROPPABLE_AREA_BARE"
                        getContainerForClone={[Function]}
                        ignoreContainerClipping={false}
                        isCombineEnabled={false}
                        isDropDisabled={false}
                        mode="standard"
                        placeholder={null}
                        renderClone={null}
                        shouldAnimatePlaceholder={false}
                        snapshot={
                          Object {
                            "draggingFromThisWith": null,
                            "draggingOverWith": null,
                            "isDraggingOver": false,
                            "isUsingPlaceholder": false,
                          }
                        }
                        type="EUI_DEFAULT"
                        updateViewportMaxScroll={[Function]}
                        useClone={null}
                      >
                        <div
                          className="euiDroppable euiDroppable--noGrow"
                          data-rbd-droppable-context-id="0"
                          data-rbd-droppable-id="DROPPABLE_AREA_BARE"
                          data-test-subj="droppable"
                        >
                          <div
                            className="euiDroppable__placeholder"
                          >
                            <AnimateInOut
                              on={null}
                              shouldAnimate={false}
                            />
                          </div>
                        </div>
                      </Droppable>
                    </Connect(Droppable)>
                  </EuiDroppable>
                </Provider>
              </App>
            </ErrorBoundary>
          </DragDropContext>
        </EuiDragDropContext>
      </section>
    </InnerMetricsGrid>
  </Connect(InnerMetricsGrid)>
</Provider>
`;
